1 The Object Life Cycle
During the normal operation of a Rails application, objects may be created, updated, and destroyed. Active Record provides hooks into this object life cycle so that you can control your application and its data.
Callbacks allow you to trigger logic before or after an alteration of an object's state.

2 Callbacks Overview
Callbacks are methods that get called at certain moments of an object's life cycle. With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.

2.1 Callback Registration
In order to use the available callbacks, you need to register them. You can implement the callbacks as ordinary methods and use a macro-style class method to register them as callbacks:
3.0.0 :008 > room = Room.new
 => #<Room:0x0000558d479f7228 id: nil, price: nil, customer_id: nil, type:... 
3.0.0 :009 > room.save!
Hello before create here
  TRANSACTION (0.2ms)  BEGIN                                             
  Room Create (8.5ms)  INSERT INTO "rooms" ("price", "customer_id", "type") VALUES ($1, $2, $3) RETURNING "id"  [["price", nil], ["customer_id", nil], ["type", nil]]                                                              
Hello after create here                                            
  TRANSACTION (0.8ms)  COMMIT                                      
 => true    
 
 
 Common callbacks
 
 For create/update/delete'
 -> after_commit / after_rollback
 
 using after_create- 
 itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                 

.com")
  TRANSACTION (0.3ms)  BEGIN
  Author Create (3.1ms)  INSERT INTO "authors" ("name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["name", "JK Rowling"], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-02 10:38:08.632473"], ["updated_at", "2022-06-02 10:38:08.632473"], ["lock_version", 0], ["email_address", "jk@gmail.com"]]                                                        
Age cannot be calculated without date of birth                            
  TRANSACTION (0.6ms)  COMMIT                                             
 =>                                                                       
#<Author:0x0000558c1c917258                                               
...                           

before_validation:
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                                      
3.0.0 :001 > book = Book.new
 => #<Book:0x00007f044ca635e0 id: nil, title: nil, total_page: nil, rating: nil, price: nil, created_at: nil, updated_at: nil, date_published: nil, publisher_id: nil> 
3.0.0 :002 > book.title = "     Harry potter"
 => "     Harry potter" 
3.0.0 :003 > book.total_page = 422
 => 422 
3.0.0 :004 > book.valid?
 => true 
3.0.0 :005 > book.title
 => "Harry potter" 
 
 after_validation
3.0.0 :013 > appointment.valid?
  Physician Load (0.4ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]               
 => true                                                           
3.0.0 :014 > appointment.status
 => 1 
3.0.0 :015 > appointment.valid?
 => true 

 before_save(*args, &block)
Registers a callback to be called before a record is saved.-

3.0.0 :001 > appointment = Appointment.new
 => 
#<Appointment:0x00007f1fdc9bc528                                   
...                                                                
3.0.0

3.0.0 :002 > appointment.valid?
 => false 
3.0.0 :003 > appointment.date = "2022/07/01"
 => "2022/07/01" 
3.0.0 :004 > appointment.physician_id =1
 => 1 
3.0.0 :005 > appointment.valid?
  Physician Load (0.2ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]               
 => true  
 
 
  after_save(*args, &block)
Registers a callback to be called after a record is saved. -
itsacheckmate@itscheckmate:~/Training/rails/hosptial_management_system$ rails c                                                                  
Loading development environment (Rails 7.0.3)                      
3.0.0 :001 > appointment = Appointment.new
 => 
#<Appointment:0x00007fbcb8ac3e98                                   
...                                                                
3.0.0 :002 > appointment.valid?
 => false 
3.0.0 :003 > 
3.0.0 :003 > appointment.date = "2022/07/14"
 => "2022/07/14" 
3.0.0 :004 > appointment.valid?
 => false 
3.0.0 :005 > appointment.save
 => false 
 .0.0 :006 > appointment.valid?
, "updated_at", "status", "physician_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["date", "2022-07-14"], ["created_at", "2022-06-15 10:35:10.074773"], ["updated_at", "2022-06-15 10:35:10.074773"], ["status", 0], ["physician_id", 1]]                                                               
  TRANSACTION (0.7ms)  COMMIT                                      
 => true                                                           
3.0.0 :009 > appointment.valid?
 => true
 
 
 
 
3.0.0 :014 > book.title
 => "To Kill a MockingBird" 
3.0.0 :015 > book.title = "          To Kill a Mockingbird      "
 => "          To Kill a Mockingbird      " 
3.0.0 :017 > book.valid?
  Author Load (0.8ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]                                 
 => false   
 3.0.0 :023 > book.title
 => "          To Kill a Mockingbird      " 
 
 3.0.0 :024 > book.save
  TRANSACTION (0.4ms)  BEGIN
  Book Create (2.9ms)  INSERT INTO "books" ("title", "total_page", "rating", "price", "created_at", "updated_at", "date_published", "publisher_id", "author_id") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"  [["title", "          To Kill a Mockingbird      "], ["total_page", 281], ["rating", 4.3], ["price", 300], ["created_at", "2022-06-15 11:00:22.316512"], ["updated_at", "2022-06-15 11:00:22.316512"], ["date_published", "1960-07-11"], ["publisher_id", 1], ["author_id", 10017]]                                
  TRANSACTION (0.8ms)  COMMIT                               
 => true  
 3.0.0 :025 > book
 => 
#<Book:0x000055f4282b9d38                                   
 id: 18,                                                    
 title: "To Kill a Mockingbird",                            
 total_page: 281,        
 rating: 4.3,            
 price: 300,             
 created_at: Wed, 15 Jun 2022 11:00:22.316512000 UTC +00:00,
 updated_at: Wed, 15 Jun 2022 11:00:22.316512000 UTC +00:00,
 date_published: Mon, 11 Jul 1960,
 publisher_id: 1,
 author_id: 10017> 
 
 around_save ->
 around_* callbacks are invoked before the action, then when you want to invoke the action itself, you yield to it, then continue execution. That's why it's called around
 
 #<Author:0x0000555ffb48f5e8                               
...                                                       
3.0.0 :002 > a.email_address = "harper_lee@yahoo.com"
 => "harper_lee@yahoo.com" 
3.0.0 :003 > a.save
before save
in around save                                            
  TRANSACTION (0.5ms)  BEGIN                              
  Author Update (0.9ms)  UPDATE "authors" SET "updated_at" = $1, "email_address" = $2, "lock_version" = $3 WHERE "authors"."id" = $4 AND "authors"."lock_version" = $5  [["updated_at", "2022-06-15 12:16:51.746998"], ["email_address", "harper_lee@yahoo.com"], ["lock_version", 2], ["id", 10019], ["lock_version", 1]]
out around save                                           
after save                                                
  TRANSACTION (1.7ms)  COMMIT                             
 => true                                                  
3.0.0 :004 > 

