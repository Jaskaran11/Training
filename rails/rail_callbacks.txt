1 The Object Life Cycle
During the normal operation of a Rails application, objects may be created, updated, and destroyed. Active Record provides hooks into this object life cycle so that you can control your application and its data.
Callbacks allow you to trigger logic before or after an alteration of an object's state.

2 Callbacks Overview
Callbacks are methods that get called at certain moments of an object's life cycle. With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.

2.1 Callback Registration
In order to use the available callbacks, you need to register them. You can implement the callbacks as ordinary methods and use a macro-style class method to register them as callbacks:
3.0.0 :008 > room = Room.new
 => #<Room:0x0000558d479f7228 id: nil, price: nil, customer_id: nil, type:... 
3.0.0 :009 > room.save!
Hello before create here
  TRANSACTION (0.2ms)  BEGIN                                             
  Room Create (8.5ms)  INSERT INTO "rooms" ("price", "customer_id", "type") VALUES ($1, $2, $3) RETURNING "id"  [["price", nil], ["customer_id", nil], ["type", nil]]                                                              
Hello after create here                                            
  TRANSACTION (0.8ms)  COMMIT                                      
 => true    
 
 
 Common callbacks
 
 For create/update/delete'
 -> after_commit / after_rollback
 
 using after_create- 
 itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                 

.com")
  TRANSACTION (0.3ms)  BEGIN
  Author Create (3.1ms)  INSERT INTO "authors" ("name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["name", "JK Rowling"], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-02 10:38:08.632473"], ["updated_at", "2022-06-02 10:38:08.632473"], ["lock_version", 0], ["email_address", "jk@gmail.com"]]                                                        
Age cannot be calculated without date of birth                            
  TRANSACTION (0.6ms)  COMMIT                                             
 =>                                                                       
#<Author:0x0000558c1c917258                                               
...                           

before_validation:
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                                      
3.0.0 :001 > book = Book.new
 => #<Book:0x00007f044ca635e0 id: nil, title: nil, total_page: nil, rating: nil, price: nil, created_at: nil, updated_at: nil, date_published: nil, publisher_id: nil> 
3.0.0 :002 > book.title = "     Harry potter"
 => "     Harry potter" 
3.0.0 :003 > book.total_page = 422
 => 422 
3.0.0 :004 > book.valid?
 => true 
3.0.0 :005 > book.title
 => "Harry potter" 
 
 after_validation
3.0.0 :013 > appointment.valid?
  Physician Load (0.4ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]               
 => true                                                           
3.0.0 :014 > appointment.status
 => 1 
3.0.0 :015 > appointment.valid?
 => true 

 before_save(*args, &block)
Registers a callback to be called before a record is saved.-

3.0.0 :001 > appointment = Appointment.new
 => 
#<Appointment:0x00007f1fdc9bc528                                   
...                                                                
3.0.0

3.0.0 :002 > appointment.valid?
 => false 
3.0.0 :003 > appointment.date = "2022/07/01"
 => "2022/07/01" 
3.0.0 :004 > appointment.physician_id =1
 => 1 
3.0.0 :005 > appointment.valid?
  Physician Load (0.2ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]               
 => true  
 
 
  after_save(*args, &block)
Registers a callback to be called after a record is saved. -
itsacheckmate@itscheckmate:~/Training/rails/hosptial_management_system$ rails c                                                                  
Loading development environment (Rails 7.0.3)                      
3.0.0 :001 > appointment = Appointment.new
 => 
#<Appointment:0x00007fbcb8ac3e98                                   
...                                                                
3.0.0 :002 > appointment.valid?
 => false 
3.0.0 :003 > 
3.0.0 :003 > appointment.date = "2022/07/14"
 => "2022/07/14" 
3.0.0 :004 > appointment.valid?
 => false 
3.0.0 :005 > appointment.save
 => false 
 .0.0 :006 > appointment.valid?
, "updated_at", "status", "physician_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["date", "2022-07-14"], ["created_at", "2022-06-15 10:35:10.074773"], ["updated_at", "2022-06-15 10:35:10.074773"], ["status", 0], ["physician_id", 1]]                                                               
  TRANSACTION (0.7ms)  COMMIT                                      
 => true                                                           
3.0.0 :009 > appointment.valid?
 => true
 
 
 
 
3.0.0 :014 > book.title
 => "To Kill a MockingBird" 
3.0.0 :015 > book.title = "          To Kill a Mockingbird      "
 => "          To Kill a Mockingbird      " 
3.0.0 :017 > book.valid?
  Author Load (0.8ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]                                 
 => false   
 3.0.0 :023 > book.title
 => "          To Kill a Mockingbird      " 
 
 3.0.0 :024 > book.save
  TRANSACTION (0.4ms)  BEGIN
  Book Create (2.9ms)  INSERT INTO "books" ("title", "total_page", "rating", "price", "created_at", "updated_at", "date_published", "publisher_id", "author_id") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"  [["title", "          To Kill a Mockingbird      "], ["total_page", 281], ["rating", 4.3], ["price", 300], ["created_at", "2022-06-15 11:00:22.316512"], ["updated_at", "2022-06-15 11:00:22.316512"], ["date_published", "1960-07-11"], ["publisher_id", 1], ["author_id", 10017]]                                
  TRANSACTION (0.8ms)  COMMIT                               
 => true  
 3.0.0 :025 > book
 => 
#<Book:0x000055f4282b9d38                                   
 id: 18,                                                    
 title: "To Kill a Mockingbird",                            
 total_page: 281,        
 rating: 4.3,            
 price: 300,             
 created_at: Wed, 15 Jun 2022 11:00:22.316512000 UTC +00:00,
 updated_at: Wed, 15 Jun 2022 11:00:22.316512000 UTC +00:00,
 date_published: Mon, 11 Jul 1960,
 publisher_id: 1,
 author_id: 10017> 
 
 around_save ->
 around_* callbacks are invoked before the action, then when you want to invoke the action itself, you yield to it, then continue execution. That's why it's called around
 
 #<Author:0x0000555ffb48f5e8                               
...                                                       
3.0.0 :002 > a.email_address = "harper_lee@yahoo.com"
 => "harper_lee@yahoo.com" 
3.0.0 :003 > a.save
before save
in around save                                            
  TRANSACTION (0.5ms)  BEGIN                              
  Author Update (0.9ms)  UPDATE "authors" SET "updated_at" = $1, "email_address" = $2, "lock_version" = $3 WHERE "authors"."id" = $4 AND "authors"."lock_version" = $5  [["updated_at", "2022-06-15 12:16:51.746998"], ["email_address", "harper_lee@yahoo.com"], ["lock_version", 2], ["id", 10019], ["lock_version", 1]]
out around save                                           
after save                                                
  TRANSACTION (1.7ms)  COMMIT                             
 => true                                                  
3.0.0 :004 > 

 around_create(*args, &block)
Registers a callback to be called around the creation of a record. 
3.0.0 :011 > exit
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)             
3.0.0 :001 > a = Author.new
 => #<Author:0x00007f476096e200 id: nil, name: nil, dob: nil, gender: nil, country: nil, created_at: nil, updated_at: nil, lock_version: 0, email_address: nil> 
3.0.0 :002 > a.name = "Ken Follet"
 => "Ken Follet" 
3.0.0 :003 > a.email_address = "kenfollet@gmail.com"
 => "kenfollet@gmail.com" 
3.0.0 :004 > a.country = "British"
 => "British" 
3.0.0 :005 > a.dob = "1950/06/05"
 => "1950/06/05" 
3.0.0 :006 > a
 => #<Author:0x00007f476096e200 id: nil, name: "Ken Follet", dob: Mon, 05 Jun 1950, gender: nil, country: "British", created_at: nil, updated_at: nil, lock_version: 0, email_address: "kenfollet@gmail.com">                                           
3.0.0 :007 > a.save
before create
in around create                                          
  TRANSACTION (0.2ms)  BEGIN                              
  Author Create (0.5ms)  INSERT INTO "authors" ("name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["name", "Ken Follet"], ["dob", "1950-06-05"], ["gender", nil], ["country", "British"], ["created_at", "2022-06-15 12:49:03.238926"], ["updated_at", "2022-06-15 12:49:03.238926"], ["lock_version", 0], ["email_address", "kenfollet@gmail.com"]]                  
out around create                                         
after create                                              
  TRANSACTION (6.8ms)  COMMIT                             
 => true      
 
 
 Destroying an Object
 
 before_destroy - 
 1.Registers a callback to be called before a record is destroyed. 
 3.0.0 :004 > a.destroy
  TRANSACTION (0.4ms)  BEGIN
  Appointment Destroy (0.8ms)  DELETE FROM "appointments" WHERE "appointments"."id" = $1  [["id", 3]]
  TRANSACTION (1.0ms)  COMMIT                            
 =>                                                      
#<Appointment:0x0000559b732d3890                         
 id: 3,                                                  
 date: Mon, 20 Jun 2022,                                 
 created_at: Wed, 15 Jun 2022 13:04:27.886654000 UTC +00:00,
 updated_at: Wed, 15 Jun 2022 13:04:27.886654000 UTC +00:00,
 status: 0,                                              
 physician_id: 1>                                        
3.0.0 :005 > a.valid?
 => true 
3.0.0 :006 > a
 => 

around_destroy - 
3.0.0 :002 > author = Author.find(499)
  Author Load (0.8ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 499], ["LIMIT", 1]]          
 =>                                               
#<Author:0x00007f8fe099ae90 
... 
3.0.0 :003 > author.destroy
in around delete
  TRANSACTION (0.4ms)  BEGIN                                   
  Author Destroy (1.9ms)  DELETE FROM "authors" WHERE "authors"."id" = $1 AND "authors"."lock_version" IS NULL  [["id", 499]]                  
out around delete                                              
  TRANSACTION (6.9ms)  COMMIT                                  
 =>                                                            
#<Author:0x00007f8fe099ae90                                    
 id: 499,                                                      
 name: "Author #492",                                          
 dob: nil,                                                     
 gender: nil,                                                  
 country: nil,                                                 
 created_at: Wed, 25 May 2022 18:02:11.581671000 UTC +00:00,   
 updated_at: Wed, 25 May 2022 18:02:11.581671000 UTC +00:00,   
 lock_version: 0,
 email_address: nil> 
3.0.0 :004 > 

after_destroy(*args, &block)
Registers a callback to be called after a record is destroyed - 

3.0.0 :001 > author = Author.find(496)
  Author Load (0.1ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 496], ["LIMIT", 1]]                               
 =>                                                                    
#<Author:0x000055598308b948                                            
...                                                                    
3.0.0 :002 > author.destroy
  TRANSACTION (0.4ms)  BEGIN
  Author Destroy (2.0ms)  DELETE FROM "authors" WHERE "authors"."id" = $1 AND "authors"."lock_version" IS NULL  [["id", 496]]                          
Author 496 was destroyed.                                              
  TRANSACTION (6.8ms)  COMMIT                                          
 =>                                                                    
#<Author:0x000055598308b948                                    
 id: 496,                                                      
 name: "Author #489",                                          
 dob: nil,                                                     
 gender: nil,                                                  
 country: nil,                                                 
 created_at: Wed, 25 May 2022 18:02:11.575720000 UTC +00:00,   
 updated_at: Wed, 25 May 2022 18:02:11.575720000 UTC +00:00,   
 lock_version: 0,                                              
 email_address: nil> 
3.0.0 :003 > 


after_commit/after_rollback
Actions that trigger it: :create, :update, :destroy
This callback is called after an object has been created, updated or destroyed. It can replace the after_save, after_update, after_update or after_destroy callbacks. You use this method when you want to run the same method when any of these 3 actions are executed.

3.0.0 :002 > author.destroy
  TRANSACTION (0.4ms)  BEGIN
  Author Destroy (1.0ms)  DELETE FROM "authors" WHERE "authors"."id" = $1 AND "authors"."lock_version" IS NULL  [["id", 489]]                  
  TRANSACTION (6.9ms)  COMMIT                                  
Author was destroyed.                                          
 =>                                                            
#<Author:0x00007f6058807450                                    
 id: 489,                                                      
 name: "Author #482",                                          
 dob: nil,                                                     
 gender: nil,                                                  
 country: nil,                                                 
 created_at: Wed, 25 May 2022 18:02:11.563702000 UTC +00:00,   
 updated_at: Wed, 25 May 2022 18:02:11.563702000 UTC +00:00,   
 lock_version: 0,                                              
 email_address: nil> 


4after_initialize and after_find

The after_initialize callback will be called whenever an Active Record object is instantiated, either by directly using new or when a record is loaded from the database. It can be useful to avoid the need to directly override your Active Record initialize method.
The after_find callback will be called whenever Active Record loads a record from the database. after_find is called before after_initialize if both are defined.
The after_initialize and after_find callbacks have no before_* counterparts, but they can be registered just like the other Active Record callbacks.

Loading development environment (Rails 7.0.3)
3.0.0 :001 > book = Book.new
You have initialized an object book!
 =>                                                                
#<Book:0x000055f392657440                                          
...      

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                      
3.0.0 :001 > author = Author.find(10017)
  Author Load (6.9ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]
You have found the author.!                                            
 =>                                                                    
#<Author:0x000055cf39d947d0                                            
...                                                                    
3.0.0 :

after_touch
The after_touch callback will be called whenever an Active Record object is touched.

3.0.0 :016 > book.touch
  TRANSACTION (0.4ms)  BEGIN
  Book Update (0.9ms)  UPDATE "books" SET "updated_at" = $1 WHERE "books"."id" = $2  [["updated_at", "2022-06-21 12:19:44.949363"], ["id", 20]]
You have touched an object!                                 
  TRANSACTION (2.0ms)  COMMIT                               
 => true                                                    
3.0.0 :017 

It can be used along with belongs_to:

#<Appointment:0x00007feb40743398                                               
...                                                                            
3.0.0 :002 > appointment.touch
  TRANSACTION (0.4ms)  BEGIN
  Appointment Update (1.2ms)  UPDATE "appointments" SET "updated_at" = $1 WHERE "appointments"."id" = $2  [["updated_at", "2022-06-21 12:46:28.572274"], ["id", 2]]                                                                          
  Physician Load (0.6ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]                            
An Appointment was touched.                                                    
  Physician Update (0.1ms)  UPDATE "physicians" SET "updated_at" = $1 WHERE "physicians"."id" = $2  [["updated_at", "2022-06-21 12:46:28.601580"], ["id", 1]] 
Appointment/Physician was touched.                                 
  TRANSACTION (0.4ms)  COMMIT                                      
 => true                                                           
3.0.0 :003 

Halting Execution

As you start registering new callbacks for your models, they will be queued for execution. This queue will include all your model's validations, the registered callbacks, and the database operation to be executed.
The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use.

3.0.0 :004 > Physician.create!(name: "Arun")
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/persistence.rb:648:in `save!': Failed to save the record (ActiveRecord::RecordNotSaved)

Relational Callbacks

Callbacks work through model relationships, and can even be defined by them. Suppose an example where a user has many articles. A user's articles should be destroyed if the user is destroyed. Let's add an after_destroy callback to the User model by way of its relationship to the Article model.

3.0.0 :003 > p.appointments.create!(date: "2022/07/07")
  TRANSACTION (0.3ms)  BEGIN
  Appointment Create (0.6ms)  INSERT INTO "appointments" ("date", "created_at", "updated_at", "status", "physician_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["date", "2022-07-07"], ["created_at", "2022-06-21 13:30:54.672435"], ["updated_at", "2022-06-21 13:30:54.672435"], ["status", 0], ["physician_id", 1]]    
  Physician Update (0.6ms)  UPDATE "physicians" SET "updated_at" = $1 WHERE "physicians"."id" = $2  [["updated_at", "2022-06-21 13:30:54.674782"], ["id", 1]]   
Appointment/Physician was touched.                                              
  TRANSACTION (1.8ms)  COMMIT                                                   
 =>                                                                             
#<Appointment:0x00005632dbaef330                                                
 id: 5,
 date: Thu, 07 Jul 2022,
 created_at: Tue, 21 Jun 2022 13:30:54.672435000 UTC +00:00,
 updated_at: Tue, 21 Jun 2022 13:30:54.672435000 UTC +00:00,
 status: 0,
 physician_id: 1> 
 
 3.0.0 :004 > p.destroy
  TRANSACTION (0.2ms)  BEGIN
  Appointment Load (0.3ms)  SELECT "appointments".* FROM "appointments" WHERE "appointments"."physician_id" = $1  [["physician_id", 1]]     
  Appointment Destroy (0.3ms)  DELETE FROM "appointments" WHERE "appointments"."id" = $1  [["id", 1]]                                       
  Physician Load (0.1ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]          
Article destroyed                                           
  Appointment Destroy (0.1ms)  DELETE FROM "appointments" WHERE "appointments"."id" = $1  [["id", 2]]                                       
  Physician Load (0.1ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]          
Article destroyed                                           
  Appointment Destroy (0.1ms)  DELETE FROM "appointments" WHERE "appointments"."id" = $1  [["id", 4]]                                       
  Physician Load (0.3ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
Article destroyed
  Appointment Destroy (0.1ms)  DELETE FROM "appointments" WHERE "appointments"."id" = $1  [["id", 5]]
  Physician Load (0.1ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
Article destroyed
  Physician Destroy (0.2ms)  DELETE FROM "physicians" WHERE "physicians"."id" = $1  [["id", 1]]
  TRANSACTION (6.4ms)  COMMIT
 => 
#<Physician:0x00007f3074a40d48
 id: 1,
 name: "arun",
 created_at: Tue, 14 Jun 2022 15:10:48.711381000 UTC +00:00,
 updated_at: Tue, 21 Jun 2022 13:31:15.282567000 UTC +00:00,
 patient_type: "sdr",
 patient_id: 1,
 head_id: nil> 
3.0.0 :005 > 

Transaction Callbacks - 

There are two additional callbacks that are triggered by the completion of a database transaction: after_commit and after_rollback. These callbacks are very similar to the after_save callback except that they don't execute until after database changes have either been committed or rolled back. They are most useful when your active record models need to interact with external systems which are not part of the database transaction.

Callback Classes

Sometimes the callback methods that you'll write will be useful enough to be reused by other models. Active Record makes it possible to create classes that encapsulate the callback methods, so they can be reused.


Loading development environment (Rails 7.0.3)
3.0.0 :001 > author = Author.new
 => 
#<Author:0x00007fe1347b71a0 
...                         
  TRANSACTION (0.4ms)  BEGIN
  Author Create (0.9ms)  INSERT INTO "authors" ("name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["name", nil], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-22 07:20:08.101962"], ["updated_at", "2022-06-22 07:20:08.101962"], ["lock_version", 0], ["email_address", nil]]
Author Name is blank!  TRANSACTION (6.7ms)  COMMIT
 => true 
3.0.0 :003 > 
