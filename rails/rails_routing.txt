The Rails router recognizes URLs and dispatches them to a controller's action.It also generate paths and URLs. Rails router deals URLs in a different way from other language routers. It determines controller, parameters and action for the request.
Basically a router is a way to redirect incoming requests to controllers and actions. It replaces mod_rewrite rules. One best thing is that, in Rails routing works with any web server.
Rails handles routing via config/routes.rb file rather than relying on the web server to control URL routing. This file controls every single aspect of your URLs, like rules that try to match the URL path for a request and decides where to direct that request.

Main purpose of Rails routers is explained below:
Connecting URLs to code
Generating paths and URLs from code

Action Controller is the C in MVC. After the router has determined which controller to use for a request, the controller is responsible for making sense of the request and producing the appropriate output.
A controller can thus be thought of as a middleman between models and views. It makes the model data available to the view, so it can display that data to the user, and it saves or updates user data to the model.

Controller Naming Convention-
The naming convention of controllers in Rails favors pluralization of the last word in the controller's name, although it is not strictly required (e.g. ApplicationController). For example, ClientsController is preferable to ClientController, SiteAdminsController is preferable to SiteAdminController or SitesAdminsController, and so on.

Methods and Actions -
A controller is a Ruby class which inherits from ApplicationController and has methods just like any other class. When your application receives a request, the routing will determine which controller and action to run, then Rails creates an instance of that controller and runs the method with the same name as the action.

ApplicationController inherits from ActionController::Base, which defines a number of helpful methods.
Only public methods are callable as actions. It is a best practice to lower the visibility of methods (with private or protected) which are not intended to be actions, like auxiliary methods or filters.

Parameters - 
You will probably want to access data sent in by the user or other parameters in your controller actions. There are two kinds of parameters possible in a web application. The first are parameters that are sent as part of the URL, called query string parameters. The query string is everything after "?" in the URL. The second type of parameter is usually referred to as POST data. This information usually comes from an HTML form which has been filled in by the user. It's called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the params hash in your controller.

Types of HTTP request methods

The application receives an HTTP request which carries along with it a method which could be:

GET - Retrieve a resource. To navigate directly to a page or by using Google, get HTTP method is used.a search page should use GET to get data

POST - Create a resource. form that changes your password should use POST.POST is used to insert/update remote data.POST is used to send data to a server to create/update a resource.

PUT - Completely update a resource. Updating user profile on a website uses patch with web frameworks that support it.

PATCH - Partially update a resource. It is used to only update the password for a user profile on a website.
 Fields that need to be updated by the client, only that field is updated without modifying the other field.

DELETE - Delete a resource. The HTTP DELETE method is used to delete a resource from the server.

These methods determine which controller action method is called.


A web server accepts and fulfills requests from clients for static content (i.e., HTML pages, files, images, and videos) from a website. Web servers handle HTTP requests and responses only.

An application server exposes business logic to the clients, which generates dynamic content. It is a software framework that transforms data to provide the specialized functionality offered by a business, service, or application. Application servers enhance the interactive parts of a website that can appear differently depending on the context of the request.

Web Server ->

Deliver static content.
Content is delivered using the HTTP protocol only.
Serves only web-based applications.
No support for multi-threading.
Facilitates web traffic that is not very resource intensive.

Application Server ->

Delivers dynamic content.
Provides business logic to application programs using several protocols (including HTTP).
Can serve web and enterprise-based applications.
Uses multi-threading to support multiple requests in parallel.
Facilitates longer running processes that are very resource-intensive​.

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails s
=> Booting Puma
=> Rails 7.0.3 application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.4 (ruby 3.0.0-p0) ("Birdie's Version")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 6468
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
Started GET "/" for 127.0.0.1 at 2022-06-22 18:45:08 +0530
  ActiveRecord::SchemaMigration Pluck (0.5ms)  SELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC
Processing by HomePageController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering home_page/index.html.erb within layouts/application
  Book Count (0.8ms)  SELECT COUNT(*) FROM "books" WHERE "books"."rating" = $1  [["rating", 1.0]]
  ↳ app/views/home_page/index.html.erb:2
  Author Count (2.2ms)  SELECT COUNT(*) FROM "authors"
  ↳ app/views/home_page/index.html.erb:3
  Rendered home_page/index.html.erb within layouts/application (Duration: 7.1ms | Allocations: 3290)
  Rendered layout layouts/application.html.erb (Duration: 37.3ms | Allocations: 37804)
Completed 200 OK in 58ms (Views: 35.0ms | ActiveRecord: 6.1ms | Allocations: 51830)

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails g controller SignInPage index
      create  app/controllers/sign_in_page_controller.rb
       route  get 'sign_in_page/index'
      invoke  erb
      create    app/views/sign_in_page
      create    app/views/sign_in_page/index.html.erb
      invoke  test_unit
      create    test/controllers/sign_in_page_controller_test.rb
      invoke  helper
      create    app/helpers/sign_in_page_helper.rb
      invoke    test_unit


Different type of routes - 
1.Simple match route
2.Default route
3.Root route
4.Resourceful routes

Rails link - 
<%= link_to(text, target) %>


