The Rails router recognizes URLs and dispatches them to a controller's action.It also generate paths and URLs. Rails router deals URLs in a different way from other language routers. It determines controller, parameters and action for the request.
Basically a router is a way to redirect incoming requests to controllers and actions. It replaces mod_rewrite rules. One best thing is that, in Rails routing works with any web server.
Rails handles routing via config/routes.rb file rather than relying on the web server to control URL routing. This file controls every single aspect of your URLs, like rules that try to match the URL path for a request and decides where to direct that request.

Main purpose of Rails routers is explained below:
Connecting URLs to code
Generating paths and URLs from code

Action Controller is the C in MVC. After the router has determined which controller to use for a request, the controller is responsible for making sense of the request and producing the appropriate output.
A controller can thus be thought of as a middleman between models and views. It makes the model data available to the view, so it can display that data to the user, and it saves or updates user data to the model.

Controller Naming Convention-
The naming convention of controllers in Rails favors pluralization of the last word in the controller's name, although it is not strictly required (e.g. ApplicationController). For example, ClientsController is preferable to ClientController, SiteAdminsController is preferable to SiteAdminController or SitesAdminsController, and so on.

Methods and Actions -
A controller is a Ruby class which inherits from ApplicationController and has methods just like any other class. When your application receives a request, the routing will determine which controller and action to run, then Rails creates an instance of that controller and runs the method with the same name as the action.

ApplicationController inherits from ActionController::Base, which defines a number of helpful methods.
Only public methods are callable as actions. It is a best practice to lower the visibility of methods (with private or protected) which are not intended to be actions, like auxiliary methods or filters.

Parameters - 
You will probably want to access data sent in by the user or other parameters in your controller actions. There are two kinds of parameters possible in a web application. The first are parameters that are sent as part of the URL, called query string parameters. The query string is everything after "?" in the URL. The second type of parameter is usually referred to as POST data. This information usually comes from an HTML form which has been filled in by the user. It's called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the params hash in your controller.

Types of HTTP request methods

The application receives an HTTP request which carries along with it a method which could be:

GET - Retrieve a resource. To navigate directly to a page or by using Google, get HTTP method is used.a search page should use GET to get data

POST - Create a resource. form that changes your password should use POST.POST is used to insert/update remote data.POST is used to send data to a server to create/update a resource.

PUT - Completely update a resource. Updating user profile on a website uses patch with web frameworks that support it.

PATCH - Partially update a resource. It is used to only update the password for a user profile on a website.
 Fields that need to be updated by the client, only that field is updated without modifying the other field.

DELETE - Delete a resource. The HTTP DELETE method is used to delete a resource from the server.

These methods determine which controller action method is called.


A web server accepts and fulfills requests from clients for static content (i.e., HTML pages, files, images, and videos) from a website. Web servers handle HTTP requests and responses only.

An application server exposes business logic to the clients, which generates dynamic content. It is a software framework that transforms data to provide the specialized functionality offered by a business, service, or application. Application servers enhance the interactive parts of a website that can appear differently depending on the context of the request.

Web Server ->

Deliver static content.
Content is delivered using the HTTP protocol only.
Serves only web-based applications.
No support for multi-threading.
Facilitates web traffic that is not very resource intensive.

Application Server ->

Delivers dynamic content.
Provides business logic to application programs using several protocols (including HTTP).
Can serve web and enterprise-based applications.
Uses multi-threading to support multiple requests in parallel.
Facilitates longer running processes that are very resource-intensive​.

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails s
=> Booting Puma
=> Rails 7.0.3 application starting in development 
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.4 (ruby 3.0.0-p0) ("Birdie's Version")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 6468
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop
Started GET "/" for 127.0.0.1 at 2022-06-22 18:45:08 +0530
  ActiveRecord::SchemaMigration Pluck (0.5ms)  SELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC
Processing by HomePageController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering home_page/index.html.erb within layouts/application
  Book Count (0.8ms)  SELECT COUNT(*) FROM "books" WHERE "books"."rating" = $1  [["rating", 1.0]]
  ↳ app/views/home_page/index.html.erb:2
  Author Count (2.2ms)  SELECT COUNT(*) FROM "authors"
  ↳ app/views/home_page/index.html.erb:3
  Rendered home_page/index.html.erb within layouts/application (Duration: 7.1ms | Allocations: 3290)
  Rendered layout layouts/application.html.erb (Duration: 37.3ms | Allocations: 37804)
Completed 200 OK in 58ms (Views: 35.0ms | ActiveRecord: 6.1ms | Allocations: 51830)

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails g controller SignInPage index
      create  app/controllers/sign_in_page_controller.rb
       route  get 'sign_in_page/index'
      invoke  erb
      create    app/views/sign_in_page
      create    app/views/sign_in_page/index.html.erb
      invoke  test_unit
      create    test/controllers/sign_in_page_controller_test.rb
      invoke  helper
      create    app/helpers/sign_in_page_helper.rb
      invoke    test_unit


Different type of routes - 
1.Simple match route
2.Default route
3.Root route
4.Resourceful routes

Rails link - 
<%= link_to(text, target) %>


Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. A single call to resources can declare all of the necessary routes for your index , show , new , edit , create , update , and destroy actions.


Scaffolding in Ruby on Rails refers to the auto-generation of a set of a model, views and a controller usually used for a single database table.

it refers to the auto-generation of a set of a model, views and a controller usually used for a single database tabl

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails g scaffold vendor name:string address:text
      invoke  active_record
      create    db/migrate/20220623084417_create_vendors.rb
      create    app/models/vendor.rb
      invoke    test_unit
      create      test/models/vendor_test.rb
      create      test/fixtures/vendors.yml
      invoke  resource_route
       route    resources :vendors
      invoke  scaffold_controller
      create    app/controllers/vendors_controller.rb
      invoke    erb
      create      app/views/vendors
      create      app/views/vendors/index.html.erb
      create      app/views/vendors/edit.html.erb
      create      app/views/vendors/show.html.erb
      create      app/views/vendors/new.html.erb
      create      app/views/vendors/_form.html.erb
      create      app/views/vendors/_vendor.html.erb
      invoke    resource_route
      invoke    test_unit
      create      test/controllers/vendors_controller_test.rb
      create      test/system/vendors_test.rb
      invoke    helper
      create      app/helpers/vendors_helper.rb
      invoke      test_unit
      invoke    jbuilder
      create      app/views/vendors/index.json.jbuilder
      create      app/views/vendors/show.json.jbuilder
      create      app/views/vendors/_vendor.json.jbuilder
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails db:migrate
== 20220623084417 CreateVendors: migrating ====================================
-- create_table(:vendors)
   -> 0.0121s
== 20220623084417 CreateVendors: migrated (0.0122s) ===========================

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ 

REST refers to manipulating data through HTTP commands, and an ideology for how to streamline the relationship between the data that a user is manipulating on screen and the information that is saved on the server. A programmer can create a REST API that handles basic CRUD functions, but building a CRUD application in no way insinuates the use of RESTful programming.
CRUD describes an application's functions, not the relationship between web services, web applications, or APIs. 
In its base form, CRUD is a way of manipulating information, describing the function of an application. REST is controlling data through HTTP commands. It is a way of creating, modifying, and deleting information for the user. CRUD functions can exist in a REST API, but REST APIs are not limited to CRUD functions.

CRUD is an acronym for Create, Read, Update, and Delete, the four fundamental operations of data storage. Computer scientists use CRUD as a measure of an application's completion state. If an application can't perform CRUD operations, it is incomplete. 

A RESTful API is an acronym for Representational State Transfer. REST is an architectural style which defines a set of architectural constraints for stateless communication between Application Programming Interfaces, or APIs. It is not a standard, so it allows developers some flexibility, but it acts as a mediator between users, clients, and resources. REST has become ubiquitous in API programming because it emphasizes scalability and greater interoperability.

A REST API sends HTTP requests to endpoints, and receives JSON files in return. The most common requests (or HTTP verbs) are:
    GET request - This request reads information from a record in the database.
    PUT request - This request changes a record's information in the database.  
    POST request - This request creates a new record in the database.  
    DELETE request - This request removes a record from the database.
    
Helpers are methods that allow you to encapsulate tasks for reuse throughout your views. 

Partial templates help you package chunks of code for reuse in your views.
 _form - convention to tell ruby that this is a partial template  
 
 
 Delete and Destroy - 
 1.Delete and destroy require and ID and an existing record.
 2.Delete uses #find
 3.Destroy uses #find and #destroy
 
 Started GET "/books" for 127.0.0.1 at 2022-06-24 15:21:50 +0530
Processing by BooksController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering books/index.html.erb within layouts/application
  Book Load (0.4ms)  SELECT "books".* FROM "books" ORDER BY title
  ↳ app/views/books/index.html.erb:11
  Rendered books/index.html.erb within layouts/application (Duration: 4.4ms | Allocations: 5515)
  Rendered layout layouts/application.html.erb (Duration: 10.5ms | Allocations: 19358)
Completed 200 OK in 20ms (Views: 11.0ms | ActiveRecord: 2.9ms | Allocations: 25832)


Started GET "/books/6/delete" for 127.0.0.1 at 2022-06-24 15:21:56 +0530
Processing by BooksController#delete as HTML
  Parameters: {"id"=>"6"}
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 6], ["LIMIT", 1]]
  ↳ app/controllers/books_controller.rb:37:in `delete'
  Rendering layout layouts/application.html.erb
  Rendering books/delete.html.erb within layouts/application
  Rendered books/delete.html.erb within layouts/application (Duration: 1.2ms | Allocations: 848)
  Rendered layout layouts/application.html.erb (Duration: 3.2ms | Allocations: 3033)
Completed 200 OK in 6ms (Views: 3.5ms | ActiveRecord: 0.2ms | Allocations: 4477)


Started DELETE "/books/6" for 127.0.0.1 at 2022-06-24 15:22:03 +0530
Processing by BooksController#destroy as TURBO_STREAM
  Parameters: {"authenticity_token"=>"[FILTERED]", "commit"=>"Delete Book", "id"=>"6"}
  Book Load (0.2ms)  SELECT "books".* FROM "books" WHERE "books"."id" = $1 LIMIT $2  [["id", 6], ["LIMIT", 1]]
  ↳ app/controllers/books_controller.rb:41:in `destroy'
  TRANSACTION (0.1ms)  BEGIN
  ↳ app/controllers/books_controller.rb:42:in `destroy'
  Book Destroy (8.3ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 6]]
  ↳ app/controllers/books_controller.rb:42:in `destroy'
Book destroyed
  TRANSACTION (0.4ms)  COMMIT
  ↳ app/controllers/books_controller.rb:42:in `destroy'
.Redirected to http://127.0.0.1:3000/books
Completed 302 Found in 12ms (ActiveRecord: 8.9ms | Allocations: 2374)


Started GET "/books" for 127.0.0.1 at 2022-06-24 15:22:03 +0530
Processing by BooksController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering books/index.html.erb within layouts/application
  Book Load (0.3ms)  SELECT "books".* FROM "books" ORDER BY title
  ↳ app/views/books/index.html.erb:11
  Rendered books/index.html.erb within layouts/application (Duration: 2.5ms | Allocations: 2832)
  Rendered layout layouts/application.html.erb (Duration: 4.1ms | Allocations: 5202)
Completed 200 OK in 5ms (Views: 4.1ms | ActiveRecord: 0.3ms | Allocations: 5603)


A member route will require an ID, because it acts on a member. A collection route doesn't because it acts on a collection of objects. Preview is an example of a member route, because it acts on (and displays) a single object. Search is an example of a collection route, because it acts on (and displays) a collection of objects.
index,create,new - collection methods

If do not provide member or collection action by default it is member action.

 bookcollection
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails routes | grep authors
                           delete_author GET    /authors/:id/delete(.:format)                                                                     authors#delete
                            name_authors GET    /authors/name(.:format)                                                                           authors#name
                                 authors GET    /authors(.:format)                                                                                authors#index
                                         POST   /authors(.:format)                                                                                authors#create
                              new_author GET    /authors/new(.:format)                                                                            authors#new
                             edit_author GET    /authors/:id/edit(.:format)                                                                       authors#edit
                                  author GET    /authors/:id(.:format)                                                                            authors#show
                                         PATCH  /authors/:id(.:format)                                                                            authors#update
                                         PUT    /authors/:id(.:format)                                                                            authors#update
                                         DELETE /authors/:id(.:format)                                                                            authors#destroy
itsacheckmate@itscheckmate:~/Training/rails/book_collection$ 

