Why Associations?
In Rails, an association is a connection between two Active Record models. Why do we need associations between models? Because they make common operations simpler and easier in your code. 

,total_page: "320",date_published: "2016/05/11",author: author)
  TRANSACTION (0.2ms)  BEGIN
 total_page: 320,        
 rating: 5.0,            
 price: 0.4556e3,        
rd/validations.rb:80:in `raise_validation_error': Validation failed: Total page can't be blank (ActiveRecord::RecordInvalid)                                    
3.0.0 :032 > book2 = Book.create!(title: "Who will cry when you die",total_page:
 300,author: author)
  TRANSACTION (0.2ms)  BEGIN
  Book Create (0.2ms)  INSERT INTO "books" ("title", "total_page", "rating", "price", "created_at", "updated_at", "date_published", "publisher_id", "author_id") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"  [["title", "Who will cry when you die"], ["total_page", 300], ["rating", nil], ["price", nil], ["created_at", "2022-06-03 14:08:45.128004"], ["updated_at", "2022-06-03 14:08:45.128004"], ["date_published", nil], ["publisher_id", nil], ["author_id", 10016]]
  TRANSACTION (1.6ms)  COMMIT                                       
 =>                                                                 
#<Book:0x000055eaa7a918b0
... 
3.0.0 :033 > book
 => 
#<Book:0x000055eaa7e3c6e0
 id: 10,                 
 title: "5am club",      
 total_page: 320,        
 rating: 5.0,            
 price: 0.4556e3,        
 created_at: Fri, 03 Jun 2022 14:04:10.308863000 UTC +00:00,
 updated_at: Fri, 03 Jun 2022 14:04:10.308863000 UTC +00:00,
 date_published: Wed, 11 May 2016,
 publisher_id: nil,
 author_id: 10016> 


3.0.0 :034 > author.books
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10016]]
 =>                                                           
[#<Book:0x00007fb480e06ac8                                    
  id: 10,                                                     
  title: "5am club",                                          
  total_page: 320,                                            
  rating: 5.0,                                                
  price: 0.4556e3,                                            
  created_at: Fri, 03 Jun 2022 14:04:10.308863000 UTC +00:00, 
  updated_at: Fri, 03 Jun 2022 14:04:10.308863000 UTC +00:00, 
  date_published: Wed, 11 May 2016,                           
  publisher_id: nil,                                          
  author_id: 10016>,                                          
 #<Book:0x00007fb480e06488                                    
  id: 11,                                                     
  title: "Who will cry when you die",
  total_page: 300,
  rating: nil,
  price: nil,
  created_at: Fri, 03 Jun 2022 14:08:45.128004000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 14:08:45.128004000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: 10016>] 
  
  #<Author:0x000055eaa7d07dd8                                 
 id: 10016,                                                 
 name: "Robin Sharma",                                      
 dob: Thu, 01 May 1980,                                     
 gender: "Male",                                            
 country: "india",                                          
 created_at: Fri, 03 Jun 2022 13:35:15.005491000 UTC +00:00,
 updated_at: Fri, 03 Jun 2022 13:35:15.005491000 UTC +00:00,
 lock_version: 0,                                           
 email_address: "Sector 10 Delhi"> 
 
 3.0.0 :036 > author.destroy
  TRANSACTION (0.4ms)  BEGIN
  Book Destroy (0.7ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 10]]
  Book Destroy (0.5ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 11]]
  Author Destroy (0.7ms)  DELETE FROM "authors" WHERE "authors"."id" = $1 AND "authors"."lock_version" = $2  [["id", 10016], ["lock_version", 0]]
  TRANSACTION (6.8ms)  COMMIT                                 
 =>                                                           
#<Author:0x000055eaa7d07dd8                                   
 id: 10016,                                                   
 name: "Robin Sharma",                                        
 dob: Thu, 01 May 1980,                                       
 gender: "Male",                                              
 country: "india",                                            
 created_at: Fri, 03 Jun 2022 13:35:15.005491000 UTC +00:00,  
 updated_at: Fri, 03 Jun 2022 13:35:15.005491000 UTC +00:00,  
 lock_version: 0,                                             
 email_address: "Sector 10 Delhi"> 
3.0.0 :037 > 

The has_one Association

A has_one association indicates that one other model has a reference to this model. That model can be fetched through this association.


Deleting the associations only-
3.0.0 :073 > author.books.delete(13)
  Book Load (0.7ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1 AND "books"."id" = $2 LIMIT $3  [["author_id", 10017], ["id", 13], ["LIMIT", 1]]
  TRANSACTION (0.3ms)  BEGIN                                                       
  Book Destroy (0.4ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 13]]  
  TRANSACTION (6.6ms)  COMMIT                                                      
 =>                                                                                
[#<Book:0x00007fb480b186b8                                                         
  id: 13,                                                                          
  title: "The Shining",                                                            
  total_page: 235,                                                                 
  rating: 4.5,                                                                     
  price: 0.5234e3,                                                                 
  created_at: Fri, 03 Jun 2022 17:35:46.462362000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:46.462362000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>] 

3 Tips, Tricks, and Warnings
know to make efficient use of Active Record associations

Controlling caching
Avoiding name collisions
Updating the schema
Controlling association scope
Bi-directional associations
 Controlling Caching
association methods are built around caching, which keeps the result of the most recent query available for further operations. 
The cache is even shared across methods.

If there some changes int he database but the data we have asscessed have been cached we want to get the latest cope instead of cached one we will use 
reload option

3.0.0 :076 > author.books.load
 => 
[#<Book:0x00007fb480d52c80                                                         
  id: 12,                                                                          
  title: "IT",                                                                     
  total_page: 235,                                                                 
  rating: 4.5,                                                                     
  price: 0.5234e3,                                                                 
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                      
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                      
  date_published: Fri, 22 Jan 1999,                                                
  publisher_id: nil,                                                               
  author_id: 10017>,                                                               
 #<Book:0x00007fb480d52938                                                         
  id: 14,                                                                          
  title: "The Shining",                                                            
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>] 

adding a new object                                                                                           
3.0.0 :078 > author.books.create(:title => "Creature")
 => #<Book:0x000055eaa7ba7a88 id: nil, title: "The Stand", total_page: nil, rating: nil, price: nil, created_at: nil, updated_at: nil, date_published: nil, publisher_id: nil, author_id: 10017> 
3.0.0 :079 > 

3.0.0 :089 > author.books.load
 => 
[#<Book:0x00007fb480d5bb00                              
  id: 12,                                               
  title: "IT",                                          
  total_page: 235,                                      
  rating: 4.5,                                          
  price: 0.5234e3,                                      
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,                     
  publisher_id: nil,                                    
  author_id: 10017>,                                  
 #<Book:0x00007fb480d5b8f8                            
  id: 14,                                             
  title: "The Shining",                               
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055eaa89d4020
  id: 15,
  title: "Creature",
  total_page: 324,
  rating: 3.4,
  price: 0.3455e3,
  created_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  date_published: Thu, 01 Mar 1990,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :090 > author.books.reload
  Book Load (0.7ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 =>                                                     
[#<Book:0x000055eaa896cd30                              
  id: 12,                                               
  title: "IT",                                          
  total_page: 235,                                      
  rating: 4.5,                                          
  price: 0.5234e3,                                      
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,                     
  publisher_id: nil,                                  
  author_id: 10017>,                                  
 #<Book:0x000055eaa896cba0                            
  id: 14,                                             
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055eaa896ca10
  id: 15,
  title: "Creature",
  total_page: 324,
  rating: 3.4,
  price: 0.3455e3,
  created_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  date_published: Thu, 01 Mar 1990,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :091 > 

3.0.0 :091 > author.books.size
 => 3 
3.0.0 :097 > author.books.empty?
 => false
 
 2 Avoiding Name Collisions

You are not free to use just any name for your associations. Because creating an association adds a method with that name to the model, it is a bad idea to give an association a name that is already used for an instance method of ActiveRecord::Base. The association method would override the base method and break things. For instance, attributes or connection are bad names for associations.

3 Updating the Schema

Associations are extremely useful, but they are not magic. You are responsible for maintaining your database schema to match your associations. In practice, this means two things, depending on what sort of associations you are creating. For belongs_to associations you need to create foreign keys, and for has_and_belongs_to_many associations you need to create the appropriate join table.
1 Creating Foreign Keys for belongs_to Associations
When you declare a belongs_to association, you need to create foreign keys as appropriate.

2 Creating Join Tables for has_and_belongs_to_many Associations

If you create a has_and_belongs_to_many association, you need to explicitly create the joining table. Unless the name of the join table is explicitly specified by using the :join_table option, Active Record creates the name by using the lexical order of the class names. So a join between author and book models will give the default join table name of "authors_books" because "a" outranks "b" in lexical ordering. 

4 Controlling Association Scope

By default, associations look for objects only within the current module's scope. This can be important when you declare Active Record models within a module.


5 Bi-directional Associations

It's normal for associations to work in two directions, requiring declaration on two different models:
3.0.0 :127 > a
 => 
#<Author:0x00007fb4809a0718                                       
 id: 10017,                                                       
 name: "Stephen King",                                            
 dob: Sun, 21 Sep 1947,                                           
 gender: "Male",                   
 country: "UK",                    
 created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 lock_version: 0,                  
 email_address: "stephen@gmail.com"> 
3.0.0 :128 > b = a.books.first
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1 ORDER BY "books"."id" ASC LIMIT $2  [["author_id", 10017], ["LIMIT", 1]]
 =>                                                                               
#<Book:0x000055eaa6dcc698                                                         
...                                                                               
3.0.0 :129 > a.name == b.author.name
 => true 
3.0.0 :130 > a.name = "Stephen King"
 => "Stephen King" 
3.0.0 :131 > a.name == b.author.name
 => true 
 
=>The has_one :through Association
A has_one :through association sets up a one-to-one connection with another model. This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model. For example, if each supplier has one account, and each account is associated with one account history, then the supplier model could look like this:

When you declare a belongs_to association, the declaring class automatically gains 8 methods related to the association:

    association
    association=(associate)
    build_association(attributes = {})
    create_association(attributes = {})
    create_association!(attributes = {})
    reload_association
    association_changed?
    association_previously_changed?
In all of these methods, association is replaced with the symbol passed as the first argument to belongs_to. so in case of  belongs_to :author
the methods becomes 

author
author=
build_author
create_author
create_author!
reload_author
author_changed?
author_previously_changed?

1 association- 
The association method returns the associated object
3.0.0 :018 > author.books
 => 
[#<Book:0x00007f6eb884a7a0
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x00007f6eb884a070
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x00007f6eb8849e40
  id: 15,
  title: "Creature",
  total_page: 324,
  rating: 3.4,
  price: 0.3455e3,
  created_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
  date_published: Thu, 01 Mar 1990,
  publisher_id: nil,
  author_id: 10017>] 

2 association=(associate)
3.0.0 :023 > book.author = author
 => 
#<Author:0x000055ae405ff610
... 

#<Author:0x000055ae405ff610
... 
3.0.0 :024 > book.author
 => 
#<Author:0x000055ae405ff610                                 
 id: 10017,                                                 
 name: "Stephen King",                                      
 dob: Sun, 21 Sep 1947,                                     
 gender: "Male",                                            
 country: "UK",                                             
 created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 lock_version: 0,                                           
 email_address: "stephen@gmail.com">  
 
3 build_association(attributes = {})
The build_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object's foreign key will be set, but the associated object will not yet be saved.
3.0.0 :025 > author = book.build_author(id:10018, name: "Chetan Bhagat")
 => #<Author:0x00007f6eb84863f8 id: 10018, name: "Chetan Bhagat", dob: nil, gender: nil, country: nil, created_at: nil, updated_at: nil, lock_version: 0, email_address: nil> 

4 create_association(attributes = {})

The create_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through this object's foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object will be saved.

 => #<Author:0x000055ae40c2d230 id: 10019, name: "Sam", dob: nil, gender: nil, country: nil, created_at: nil, updated_at: nil, lock_version: 0, email_address: nil> 
3.0.0 :027 > author = book.create_author(id:10019, name: "Sam")
  TRANSACTION (0.2ms)  BEGIN
  Author Create (7.4ms)  INSERT INTO "authors" ("id", "name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"  [["id", 10019], ["name", "Sam"], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-07 11:37:52.111172"], ["updated_at", "2022-06-07 11:37:52.111172"], ["lock_version", 0], ["email_address", nil]]                                                                
Age cannot be calculated without date of birth                                           
  TRANSACTION (0.8ms)  COMMIT                                                 
 =>                                                                           
#<Author:0x000055ae403e8188                                                   
... 

5 create_association!(attributes = {})

Does the same as create_association above, but raises ActiveRecord::RecordInvalid if the record is invalid.
3.0.0 :028 > author = book.create_author!(id:10019, name: "Sam")
  TRANSACTION (0.2ms)  BEGIN
  Author Create (0.5ms)  INSERT INTO "authors" ("id", "name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"  [["id", 10019], ["name", "Sam"], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-07 11:38:41.167230"], ["updated_at", "2022-06-07 11:38:41.167230"], ["lock_version", 0], ["email_address", nil]]                                            
  TRANSACTION (0.3ms)  ROLLBACK                                      
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:768:in `exec_params': PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "authors_pkey" (ActiveRecord::RecordNotUnique)
DETAIL:  Key (id)=(10019) already exists.
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:768:in `exec_params': ERROR:  duplicate key value violates unique constraint "authors_pkey" (PG::UniqueViolation)
DETAIL:  Key (id)=(10019) already exists.

6 association_changed?

The association_changed? method returns true if a new associated object has been assigned and the foreign key will be updated in the next save.
#<Author:0x00007f6eb8a57098                                 
 id: 10017,                                                 
 name: "Stephen King",                                      
 dob: Sun, 21 Sep 1947,                                     
 gender: "Male",                                            
 country: "UK",                                             
 created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
 lock_version: 0,                                           
 email_address: "stephen@gmail.com">                        
3.0.0 :036 > book.author_changed?
 => false 
3.0.0 :037 

3.0.0 :037 > book.author = Author.second
  Author Load (7.1ms)  SELECT "authors".* FROM "authors" ORDER BY "authors"."id" ASC LIMIT $1 OFFSET $2  [["LIMIT", 1], ["OFFSET", 1]]
 =>                                                                         
#<Author:0x000055ae4094e398                                                 
...                                                                         
3.0.0 :038 > book.author_changed?
 => true 
 
 7 association_previously_changed?

The association_previously_changed? method returns true if the previous save updated the association to reference a new associate object.
3.0.0 :041 > book.author_previously_changed?
 => false 

3.0.0 :042 > book.author = Author.second
  Author Load (0.6ms)  SELECT "authors".* FROM "authors" ORDER BY "authors"."id" ASC LIMIT $1 OFFSET $2  [["LIMIT", 1], ["OFFSET", 1]]
 =>                                                                               
#<Author:0x000055ae408a72f0                                                       
...                                                                               
3.0.0 :043 > book.save!
  TRANSACTION (0.4ms)  BEGIN
  Book Update (7.6ms)  UPDATE "books" SET "updated_at" = $1, "author_id" = $2 WHERE "books"."id" = $3  [["updated_at", "2022-06-07 11:44:34.090307"], ["author_id", 2], ["id", 15]]
  TRANSACTION (0.7ms)  COMMIT                                                     
 => true                                                                          
3.0.0 :044 > book.author_previously_changed?
 => true 

8 reload_Associations
It reloads the cache and get the latest data from the database .

=>Choosing Between belongs_to and has_one

If you want to set up a one-to-one relationship between two models, you'll need to add belongs_to to one, and has_one to the other.
The distinction is in where you place the foreign key (it goes on the table for the class declaring the belongs_to association), but you should give some thought to the actual meaning of the data as well. The has_one relationship says that one of something is yours - that is, that something points back to you. For example, it makes more sense to say that a supplier owns an account than that an account owns a supplier

has_one -> This method should only be used if the other class contains the foreign key.

belongs_to -> This method should only be used if the current class contains the foreign key.

The belongs_to association supports these options:
1. autosave ->
If you set the :autosave option to true, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting :autosave to false is not the same as not setting the :autosave option. If the :autosave option is not present, then new associated objects will be saved, but updated associated objects will not be saved.

2.class_name ->
If the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name


counter_cache
The :counter_cache option can be used to make finding the number of belonging objects more efficient.
3.0.0 :048 > author.books.size
  Book Count (8.3ms)  SELECT COUNT(*) FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 => 2                                                                             
3.0.0 

dependent

If you set the :dependent option to:
    :destroy, when the object is destroyed, destroy will be called on its associated objects.
    :delete, when the object is destroyed, all its associated objects will be deleted directly from the database without calling their destroy method.
    :destroy_async: when the object is destroyed, an ActiveRecord::DestroyAssociationAsyncJob job is enqueued which will call destroy on its associated objects. Active Job must be set up for this to work.
                                                                
3.0.0 :049 > book.delete
  Book Destroy (7.2ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 15]]
 =>                                                                               
#<Book:0x000055ae4065a268   
 id: 15,                                                                          
 title: "Creature",                                                               
 total_page: 324,                                                                 
 rating: 3.4,                                                                     
 price: 0.3455e3,                                           
 created_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
 updated_at: Tue, 07 Jun 2022 11:44:34.090307000 UTC +00:00,
 date_published: Thu, 01 Mar 1990,                          
 publisher_id: nil,                                         
 author_id: 2>                                              
3.0.0 :050 > book

#<Book:0x000055ae4065a268                                   
 id: 15,                                                    
 title: "Creature",                                         
 total_page: 324,                                           
 rating: 3.4,                                               
 price: 0.3455e3,                                           
 created_at: Fri, 03 Jun 2022 17:44:41.604123000 UTC +00:00,
 updated_at: Tue, 07 Jun 2022 11:44:34.090307000 UTC +00:00,
 date_published: Thu, 01 Mar 1990,                          
 publisher_id: nil,                                         
 author_id: 2>  
 
 6. :primary_key
By convention, Rails assumes that the id column is used to hold the primary key of its tables. The :primary_key option allows you to specify a different column.

7. :inverse_of
The :inverse_of option specifies the name of the has_many or has_one association that is the inverse of this association.

8.:touch

If you set the :touch option to true, then the updated_at or updated_on timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:
3.0.0 :082 > book.save
  TRANSACTION (0.1ms)  BEGIN
  Book Update (0.2ms)  UPDATE "books" SET "updated_at" = $1, "date_published" = $2 WHERE "books"."id" = $3  [["updated_at", "2022-06-07 14:17:37.171378"], ["date_published", "2010-01-03"], ["id", 16]]
  TRANSACTION (6.5ms)  COMMIT                               
 => true       
 
Polymorphic
Passing true to the :polymorphic option indicates that this is a polymorphic association. 
Polymorphic Associations
With polymorphic associations, a model can belong to more than one other model, on a single association
to connect to many different model from single belongs_to command
The database representation of this polymorphism consists of two columns, which represent the ID and the type

Scope - 
      
 There may be times when you wish to customize the query used by belongs_to. Such customizations can be achieved via a scope block. 
 
where - The where method lets you specify the conditions that the associated object must meet.

includes -
You can use the includes method to specify second-order associations that should be eager-loaded when this association is used. 

readonly -
If you use readonly, then the associated object will be read-only when retrieved via the association.
select

select - 
The select method lets you override the SQL SELECT clause that is used to retrieve data about the associated object. By default, Rails retrieves all columns.

When are Objects Saved?
Assigning an object to a belongs_to association does not automatically save the object. It does not save the associated object either.


 Methods Added by has_many

When you declare a has_many association, the declaring class automatically gains 17 methods related to the association:

    collection
    collection<<(object, ...)
    collection.delete(object, ...)
    collection.destroy(object, ...)
    collection=(objects)
    collection_singular_ids
    collection_singular_ids=(ids)
    collection.clear
    collection.empty?
    collection.size
    collection.find(...)
    collection.where(...)
    collection.exists?(...)
    collection.build(attributes = {})
    collection.create(attributes = {})
    collection.create!(attributes = {})
    collection.reload

In all of these methods, collection is replaced with the symbol passed as the first argument to has_many, and collection_singular is replaced with the singularized version of that symbol. 


1.collection

The collection method returns a Relation of all of the associated objects. If there are no associated objects, it returns an empty Relation.
3.0.0 :011 > books = author.books
 => 
[#<Book:0x000055cc7f665a70                                            
...                                                                   
3.0.0 :012 > books
 => 
[#<Book:0x000055cc7f665a70                                            
  id: 12,                                                             
  title: "IT",                                                        
  total_page: 235,                                                    
  rating: 4.5,                                                        
  price: 0.5234e3,                                                    
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,         
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,         
  date_published: Fri, 22 Jan 1999,                                   
  publisher_id: nil,                                                  
  author_id: 10017>,
 #<Book:0x000055cc7f6657f0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cc7f665660
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Tue, 07 Jun 2022 14:17:37.171378000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>] 
 

2 collection<<(object, ...)

The collection<< method adds one or more objects to the collection by setting their foreign keys to the primary key of the calling model.
3.0.0 :006 > author.books << book
  TRANSACTION (0.1ms)  BEGIN
  Book Update (7.0ms)  UPDATE "books" SET "updated_at" = $1, "author_id" = $2 WHERE "books"."id" = $3  [["updated_at", "2022-06-08 07:42:38.607283"], ["author_id", 10017], ["id", 1]]
  TRANSACTION (0.8ms)  COMMIT                                 
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 =>                                                           
[#<Book:0x000055cc7f665a70                                    
  id: 12,                                                     
  title: "IT",                                                
  total_page: 235,                                            
  rating: 4.5,                                                
  price: 0.5234e3,                                            
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00, 
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00, 
  date_published: Fri, 22 Jan 1999,                           
  publisher_id: nil,                                          
  author_id: 10017>,
 #<Book:0x000055cc7f6657f0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cc7f665660
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Tue, 07 Jun 2022 14:17:37.171378000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x00007f941c709948
  id: 1,
  title: "Cant Hurt Me",
  total_page: 398,
  rating: 4.5,
  price: 0.345e4,
  created_at: Wed, 25 May 2022 11:43:51.567798000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 07:42:38.607283000 UTC +00:00,
  date_published: Thu, 15 Nov 2018,
  publisher_id: 1,
  author_id: 10017>] 
  
  3 collection.delete(object, ...)

The collection.delete method removes one or more objects from the collection by setting their foreign keys to NULL.

3.0.0 :008 > author.books.delete(book)
  TRANSACTION (0.4ms)  BEGIN
  Book Update All (0.7ms)  UPDATE "books" SET "author_id" = $1 WHERE "books"."author_id" = $2 AND "books"."id" = $3  [["author_id", nil], ["author_id", 10017], ["id", 1]]
  TRANSACTION (7.0ms)  COMMIT                                                      
 =>                                                                                
[#<Book:0x00007f941c709948                                                         
  id: 1,                                                                           
  title: "Cant Hurt Me",                                                           
  total_page: 398,                                                                 
  rating: 4.5,                                                                     
  price: 0.345e4,                                                                  
  created_at: Wed, 25 May 2022 11:43:51.567798000 UTC +00:00,                      
  updated_at: Wed, 08 Jun 2022 07:42:38.607283000 UTC +00:00,                      
  date_published: Thu, 15 Nov 2018,
  publisher_id: 1,
  author_id: 10017>] 
3.0.0 :009 > 

The collection.destroy method removes one or more objects from the collection by running destroy on each object.
3.0.0 :010 > author.books.destroy(book)
  TRANSACTION (0.4ms)  BEGIN
  Book Destroy (0.6ms)  DELETE FROM "books" WHERE "books"."id" = $1  [["id", 1]]   
  TRANSACTION (6.8ms)  COMMIT                                                      
 =>                                                                                
[#<Book:0x00007f941c709948                                                         
  id: 1,                                                                           
  title: "Cant Hurt Me",                                                           
  total_page: 398,                                                                 
  rating: 4.5,                                                                     
  price: 0.345e4,                                                                  
  created_at: Wed, 25 May 2022 11:43:51.567798000 UTC +00:00,                      
  updated_at: Wed, 08 Jun 2022 07:42:38.607283000 UTC +00:00,                      
  date_published: Thu, 15 Nov 2018,                                                
  publisher_id: 1,                                                                 
  author_id: 10017>]     
  
collection=(objects)
The collection= method makes the collection contain only the supplied objects, by adding and deleting as appropriate. The changes are persisted to the database.

3.0.0 :013 > author = books
 => 
[#<Book:0x000055cc7f665a70        
...                               
3.0.0 :014 > author
 => 
[#<Book:0x000055cc7f665a70        
  id: 12,                         
  title: "IT",                    
  total_page: 235,     
  rating: 4.5,         
  price: 0.5234e3,     
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cc7f6657f0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cc7f665660
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Tue, 07 Jun 2022 14:17:37.171378000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>] 

6 collection_singular_ids
The collection_singular_ids method returns an array of the ids of the objects in the collection.

3.0.0 :037 > author.books
  Book Load (0.7ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 =>                                                                   
[#<Book:0x000055cc7df1e768                                            
  id: 12,                                                             
  title: "IT",                                                        
  total_page: 235,                                                    
  rating: 4.5,                                                        
  price: 0.5234e3,                                                    
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,         
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,         
  date_published: Fri, 22 Jan 1999,                           
  publisher_id: nil,                                          
  author_id: 10017>,                                          
 #<Book:0x000055cc7df1e358                                    
  id: 14,                                                     
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cc7df1df48
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Tue, 07 Jun 2022 14:17:37.171378000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :038 > author.book_ids
 => [12, 14, 16] 
 
collection.clear
The collection.clear method removes all objects from the collection according to the strategy specified by the dependent option. If no option is given, it follows the default strategy. The default strategy for has_many :through associations is delete_all, and for has_many associations is to set the foreign keys to NULL.

3.0.0 :039 > author.books.clear
  Book Update All (1.9ms)  UPDATE "books" SET "author_id" = $1 WHERE "books"."author_id" = $2  [["author_id", nil], ["author_id", 10017]]
 => []                                                                             
3.0.0 :040 > author
 => 
#<Author:0x000055cc7f0b0260                                                        
 id: 10017,                                                                        
 name: "Stephen King",                                                             
 dob: Sun, 21 Sep 1947,                                                            
 gender: "Male",                                                                   
 country: "UK",                                                                    
 created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                       
 updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                       
 lock_version: 0,                                                                  
 email_address: "stephen@gmail.com">                                               
3.0.0 :041 > author.books
 => [] 

collection.empty?

The collection.empty? method returns true if the collection does not contain any associated objects.
3.0.0 :042 > author.books.empty?
 => true 
 
 collection.size

The collection.size method returns the number of objects in the collection.
3.0.0 :061 > author.books.size
 => 1 
 
collection.find(...)

The collection.find method finds objects within the collection's table.
3.0.0 :059 > author = Author.find(10017)
  Author Load (0.6ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]
 =>  
 
collection.where(...)

The collection.where method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed. 

3.0.0 :073 > available_book = author.books.where(author_id: 10017)
  Book Load (0.6ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1 AND "books"."author_id" = $2  [["author_id", 10017], ["author_id", 10017]]  
3.0.0 :074 > available_book = author.books.first
 => 
#<Book:0x000055cc7ef79900                                                      
... 0 :074 > availab                                                           
3.0.0 :075 > available_book = author.books.where(author_id: 10017)
  Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1 AND "books"."author_id" = $2  [["author_id", 10017], ["author_id", 10017]]
 =>                                                                            
[#<Book:0x00007f941ca13aa8                                                     
...                                                                            
3.0.0 :076 > available_book = author.books.first
 => 
#<Book:0x000055cc7ef79900                                                      
...                                                                            
3.0.0 :077 > available_book 
 => 
#<Book:0x000055cc7ef79900                                                                           
 id: 16,                                                                                            
 title: "Harry Potter",                                                                             
 total_page: 342,                                                                                   
 rating: 4.7,                                                                                       
 price: 0.42e3,                                                                                     
 created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,                                        
 updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,                                        
 date_published: Sun, 03 Jan 2010,                                                                  
 publisher_id: nil,                                                                                 
 author_id: 10017>     
 
collection.exists?(...)

The collection.exists? method checks whether an object meeting the supplied conditions exists in the collection's table. 

3.0.0 :081 > Author.exists?(1)
  Author Exists? (0.6ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
 => true   
 
 3.0.0 :101 > Author.exists?(name: "Stephen King")
  Author Exists? (0.5ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "Stephen King"], ["LIMIT", 1]]
 => true                                                                                  
3.0.0 :102 

collection.build(attributes = {})

The collection.build method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, and the link through their foreign key will be created, but the associated objects will not yet be saved.  

3.0.0 :103 > author.books.build(:title => "The Road Not Taken")
 => #<Book:0x000055cc7f191210 id: nil, title: "The Road Not Taken", total_page: nil, rating: nil, price: nil, created_at: nil, updated_at: nil, date_published: nil, publisher_id: nil, author_id: 10017> 
3.0.0 :104 > author.books.build(:title => "The Road Not Taken", :total_page => 330, :rating => 4.2, :price => "500")

collection.create(attributes = {})

The collection.create method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, the link through its foreign key will be created, and, once it passes all of the validations specified on the associated model, the associated object will be saved.
3.0.0 :109 > author.books
 => 
[#<Book:0x000055cc7ef79900                                                                                                             
  id: 16,                                                                                                                              
  title: "Harry Potter",                                                                                                               
  total_page: 342,                                                                                                                     
  rating: 4.7,                                                                                                                         
  price: 0.42e3,                                              
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00, 
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00, 
  date_published: Sun, 03 Jan 2010,                           
  publisher_id: nil,                                          
  author_id: 10017>,                                          

  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :110 > 

collection.create!(attributes = {})

Does the same as collection.create above, but raises ActiveRecord::RecordInvalid if the record is invalid.

collection.reload

The collection.reload method returns a Relation of all of the associated objects, forcing a database read. If there are no associated objects, it returns an empty Relation.
3.0.0 :111 > author.books.reload
  Book Load (0.6ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 =>                                                                                
[#<Book:0x000055cc80a18dd8                                                         
  id: 16,                                                                          
  title: "Harry Potter",                                                           
  total_page: 342,                                                                 
  rating: 4.7,                                                                     
  price: 0.42e3,                                                                   
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,                      
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,                      
  date_published: Sun, 03 Jan 2010,                                                
  publisher_id: nil,                                                               
  author_id: 10017>,                                                               
 #<Book:0x000055cc80a18bf8                                                         
  id: 17,                                                                          
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :112 > author.books


has_and_belongs_to_many

A has_and_belongs_to_many association creates a direct many-to-many connection with another model, with no intervening model. This association indicates that each instance of the declaring model refers to zero or more instances of another model.For example, if your application includes assemblies and parts, with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:

4.2.1 Methods Added by has_one

When you declare a has_one association, the declaring class automatically gains 6 methods related to the association:

    association
    association=(associate)
    build_association(attributes = {})
    create_association(attributes = {})
    create_association!(attributes = {})
    reload_association

association

The association method returns the associated object, if any. If no associated object is found, it returns nil.
3.0.0 :026 > room = cust.room_hotel
 => 
#<RoomHotel:0x000055fb9cf21078                                       
...                                                                  
3.0.0 :027 > room
 => 
#<RoomHotel:0x000055fb9cf21078                                       
 id: 1,                                                              
 name: "1 bedroom",                                                  
 price: 2345,                                                        
 created_at: Wed, 08 Jun 2022 10:06:21.109113000 UTC +00:00,         
 updated_at: Wed, 08 Jun 2022 10:06:21.109113000 UTC +00:00,         
 customer_id: 1>                                                     
3.0.0 :028 > 

If the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), call #reload_association on the parent object.
3.0.0 :028 > room = cust.reload_room_hotel
  RoomHotel Load (0.7ms)  SELECT "room_hotels".* FROM "room_hotels" WHERE "room_hotels"."customer_id" = $1 LIMIT $2  [["customer_id", 1], ["LIMIT", 1]]
 =>                                                                  
#<RoomHotel:0x000055fb9cdc8a00                            
...                 

association=(associate)

The association= method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from this object and setting the associated object's foreign key to the same value.

3.0.0 :029 > cust.room_hotel = room
 => 
#<RoomHotel:0x000055fb9cdc8a00                                
...                                                           
3.0.0 :030 > room
 => 
#<RoomHotel:0x000055fb9cdc8a00                                
 id: 1,                                                       
 name: "1 bedroom",                                           
 price: 2345,                                                 
 created_at: Wed, 08 Jun 2022 10:06:21.109113000 UTC +00:00,  
 updated_at: Wed, 08 Jun 2022 10:06:21.109113000 UTC +00:00,  
 customer_id: 1> 
 
 build_association(attributes = {})

The build_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through its foreign key will be set, but the associated object will not yet be saved.

3.0.0 :038 > room_hotel = cust.build_room_hotel(name: "2 bedroom")

create_association(attributes = {})

The create_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through its foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object will be saved.

3.0.0 :039 > room_hotel = cust.create_room_hotel(name: "3 bedroom")
  TRANSACTION (0.4ms)  BEGIN
  RoomHotel Create (0.8ms)  INSERT INTO "room_hotels" ("name", "price", "created_at", "updated_at", "customer_id") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["name", "3 bedroom"], ["price", nil], ["created_at", "2022-06-08 18:10:37.022296"], ["updated_at", "2022-06-08 18:10:37.022296"], ["customer_id", 1]]  
  TRANSACTION (6.9ms)  COMMIT  
  
  Choosing between has_and_belongs_to_many and has_many through
 Has_belongs_to_many gives you a simple lookup table which references your two models.For example,stories can belong to many categories and categories can have many stories.
 Has_many:through gives you a third model which can be used to store various other pieces of information which don't belong to either of the original models.
  For example

Person can subscribe to many magazines. Magazines can have many subscribers.
Thus, we can have a subscription model in the middle, which gives us a similar table to the earlier example, but with additional properties.
The simplest rule of thumb is that you should set up a has_many :through relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a has_and_belongs_to_many relationship (though you will need to to create the joining table in the database).
You should use has_many :through if you need validations, callbacks, or extra attributes on the join model.


In Single-Table Inheritance (STI), many subclasses inherit from one superclass with all the data in the same table in the database. The superclass has a “type” column to determine which subclass an object belongs to.
STI won't work without a "type" field in the table.

STI PROS:
1.Simple to implement
2.DRY — saves replicated code using inheritance and shared attributes
3.Allows subclasses to have own behavior as necessary

STI CONS:
1.Doesn’t scale well: as data grows, table can become large and possibly difficult to maintain/query
2.Requires care when adding new models or model fields that deviate from the shared fields
3.(conditional) Allows creation of invalid objects if validations are not in place
4.(conditional) Can be difficult to validate or query if many null values exist in table.

itsacheckmate@itscheckmate:~/Training/rails/dms$ rails g model car --parent=Vehicle
      invoke  active_record
      create    app/models/car.rb
      invoke    test_unit
      create      test/models/car_test.rb
      create      test/fixtures/cars.yml
itsacheckmate@itscheckmate:~/Training/ra

itsacheckmate@itscheckmate:~/Training/rails/dms$ rails g model bicycle --parent=Vehicle
      invoke  active_record
      create    app/models/bicycle.rb
      invoke    test_unit
      create      test/models/bicycle_test.rb
      create      test/fixtures/bicycles.yml

itsacheckmate@itscheckmate:~/Training/rails/dms$ rails g model motorcycle --parent=Vehicle
      invoke  active_record
      create    app/models/motorcycle.rb
      invoke    test_unit
      create      test/models/motorcycle_test.rb
      create      test/fixtures/motorcycles.yml

3.0.0 :003 > mustang = Car.new(price: 5000, color: "red")
 => #<Car:0x00007faf0c2eac80 id: nil, type: "Car", color: "red", price: 0.5e4, created_at: nil, updated_at: nil> 
3.0.0 :005 > harley = Motorcycle.new(price: 3000, color: "black")
 => #<Motorcycle:0x000055a0c8289b78 id: nil, type: "Motorcycle", color: "black", price: 0.3e4, created_at: nil, updated_at: nil> 
3.0.0 :006 > harley.save
  TRANSACTION (0.3ms)  BEGIN
  Motorcycle Create (0.3ms)  INSERT INTO "vehicles" ("type", "color", "price", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["type", "Motorcycle"], ["color", "black"], ["price", "3000.0"], ["created_at", "2022-06-09 08:55:23.618427"], ["updated_at", "2022-06-09 08:55:23.618427"]]
  TRANSACTION (0.5ms)  COMMIT                                              
 => true                                                                   
3.0.0 :007 > mustang.price
 => 0.5e4 
3.0.0 :008 > harley.price
 => 0.3e4 
3.0.0 :009 > Car.all
  Car Load (0.2ms)  SELECT "vehicles".* FROM "vehicles" WHERE "vehicles"."type" = $1  [["type", "Car"]]
 => [#<Car:0x00007faf0c351700 id: 1, type: "Car", color: "red", price: 0.5e4, created_at: Thu, 09 Jun 2022 08:54:45.594006000 UTC +00:00, updated_at: Thu, 09 Jun 2022 08:54:45.594006000 UTC +00:00>] 
3.0.0 :010 > 


creating controller

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails g controller home_page
      create  app/controllers/home_page_controller.rb
      invoke  erb
      create    app/views/home_page
      invoke  test_unit
      create    test/controllers/home_page_controller_test.rb
      invoke  helper
      create    app/helpers/home_page_helper.rb
      invoke    test_unit

A self-join is a join in which a table is joined with itself using a FOREIGN KEY which references its own PRIMARY KEY. This can be viewed as a join of two copies of the same table.
