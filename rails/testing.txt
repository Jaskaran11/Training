BDD(Behaviour driven development) - is a development technique which focuses more on a software application's behaviour.It creates an executable specification that fails because the respective feature dosen't exist, then writing the simplest code that can make the specification pass and as a result we get the required behaviour implemented in the system.It is a team methodology where developer,customer,qas are involved.

process - 
1.write behaviour of application
2.write automated scripts
3.implement the functional code.
4.check behaviour is succesful if not fix it
5.organize code.
6.repeat steps for another behaviour

TDD(test driven development) - is a development which focuses more on the implementation of a feature of a software application.It mainly refers to write a test case that fails because the specified functionality dosent exist and after that update the code can make the test case pass and as a result we get the feature implemented in it.
Process of TDD -
1.add test case
2.run the test case and watch test case fails
3.update the code
4.run the test case again
5.repeat steps for another test case

In both cases developer write test before writing code to make the test pass.
BDD is designed to test an application's behaviour from the end user's standpoint whereas TDD is focused on testinf smaller piece of functionality in isolation.


Testing in rails -
a collection of classes that do not affect or alter your existing application.
awareness of broken parts of your application
get the desired functionality

why write test - refactoring code more confidently
add new code
help architect the business logic
reduce client frustation

rails 5.1.0 + test-
model
helper
controller
system 
integration

model specs test-
validations,associations,scopes,business logic

controller specs - 
status code ?
content type?
layout/template rendered?
flash messages?
insert/update/deletes?
redirects?

helper specs-
specific to view helpers
desired output?
testing methods

integration tests-
feature testing(Searchin, adding to cart)

system tests-
browser testing
happy path

Frameworks - 
minitest
rspec
capybara
factorygirl
cucumber


interface b.w different controller


Generators

RSpec spec are normally generated alongside other application components.
For instance, rails generate model will also generate an RSpec spec file
for the model.

Note that the generators are there to help you get started, but they are no
substitute for writing your own examples, and they are only guaranteed to work
out of the box for with Rails' defaults.

RSpec generators can also be run independently. For instance,

rails generate rspec:model widget

will create a new spec file in spec/models/widget_spec.rb.

The same generator pattern is available for all specs:

    scaffold
    model
    controller
    helper
    view
    mailer
    integration
    feature
    job
    channel
    generator
    mailbox
    request
    system

Directory Structure

Specs are usually placed in a canonical directory structure that describes
their purpose:

    Model specs reside in the spec/models directory

    Controller specs reside in the spec/controllers directory

    Request specs reside in the spec/requests directory. The directory can also be named integration or api.

    Feature specs reside in the spec/features directory

    View specs reside in the spec/views directory

    Helper specs reside in the spec/helpers directory

    Mailer specs reside in the spec/mailers directory

    Routing specs reside in the spec/routing directory

    Job specs reside in the spec/jobs directory

    System specs reside in the spec/system directory

Application developers are free to use a different directory structure. In
order to include the correct rspec-rails support functions, the specs need
to have the appropriate corresponding metadata :type value:

    Model specs: type: :model
    Controller specs: type: :controller
    Request specs: type: :request
    Feature specs: type: :feature
    View specs: type: :view
    Helper specs: type: :helper
    Mailer specs: type: :mailer
    Routing specs: type: :routing
    Job specs: type: :job
    System specs: type: :system

Difference between create , build and build_stubbed in factorygirl(bot)

FactoryBot.create(:profile) will create profile object and all association for it.They will all be persisted in the database.Also, it will trigger both model and database validations.
 
On the other hand, factoryBot.build(:profile) wont save the object but will still make requests to a database if the factory has associations.It will trigger validation only for associated object.

FactoryBot.build_stubbed(:profile) does not call database at all.It creates and assigns attributes to an object to make it behave like an instantiated object.It provides fake id and created_at.It will mnot triggger any validations.


Using FactoryGirl.build(:factory_name) does not persist to the db and does not call save!, so your Active Record validations will not run. This is much faster, but validations might be important.

Using FactoryGirl.create(:factory_name) will persist to the db and will call Active Record validations. This is obviously slower but can catch validation errors (if you care about them in your tests).


Model specs test ActiveRecord model by themselves wherease the feature specs test the whole "stack" including model code,controller code and any html css js.
Advantage of model specs is that they're inexpensive.Compared to feature specs, model specs are relatively fast to run and relatively fast to write.
Disadvantage of model spec is that they dont tell you anything about whether your application works from user's perspective.If you have a rails application but dont have html/css/js plugged into model to make application work, in such case model specs could pass even though there's no working feature built on top of model code..

Feature specs tell you whether all parts of your application are working together.there's a cost to this, in that feature specs are relatively "expensive".they are time-consuming because you're running more stuff than in model spec also they're time-consuming to write, because feature spec has to exercise a whole feature at a time.for example, the creation of a hair salon appointment you first have to have a salon, a stylist, a client, and maybe more. This necessity makes the feature spec slower to write and slower to run than a model spec where you could test e.g. a method on a `Stylist` class all by itself.


End-to-end test is a test that tests all layers of an application stack under conditions that are very similar to production.
Integration test is often defined as a test that verifies that two or more parts of an application behave correctly not only in isloation but also when used together.
when rspec user says integration test, they mean feature spec.if we use rspec we can focus on feature spec and ignore system test.

What is Integration Testing? While unit tests make sure that individual parts of your application work, integration tests are used to test that different parts of your application work together. They are normally used to test at least the most important workflows of applications.

RSpec is a mature, feature-packed testing framework, but the documentation can be difficult to navigate. As an alternative to the official documentation, this cheat sheet contains short example code to demonstrate all the built-in expectation matchers.

These examples were created with RSpec 3.5. All of the examples are passing – there are no examples of failing tests. They cover the functionality in RSpec::Expectations – functionality for expressing assertions inside tests using expect. For examples of RSpec.describe, it, let, etc., see the previous post:

Rspec - Matchers 
1.Equality/Identity Matchers
matchers to test for object or value equality.
Matcher	          Description	                              Example
eq	          Passes when actual ==	   expect(actual).to eq 
       
eql	          Passes when actual.eql?(expected)	           expect(actual).to eql
eg-
describe "example for equality matcher" do 
  it "should show how quality matchers work" do 
  a = "test"
  b = a
  
  expect(a).to eq "test"
  expect(a).to be b
  expect(a). to equal a
  end 
  end
  
  
  2.Class/type marchers
  matchers for testing type or class of objects.
  Matchers for testing the type or class of objects.
Matcher	                         Description	                                                      Example
be_instance_of	        Passes when actual is an instance of the expected class.	 expect(actual).to be_instance_of(Expected)
be_kind_of	Passes when actual is an instance of the expected class or any of its parent classes.expect(actual).to be_kind_of(Expected)c
respond_to	Passes when actual responds to the specified method.	                   expect(actual).to respond_to(expected)

describe "example of type/class matchers" do 
it "should show how type/class matchers work" do 
x = 1
y = 2.3
z = 'test'

the following will pass
expect(x).to be_instance_of Fixnum
epxect(y).to be_kind_of Numeric
expect(z).to respond_to(:length)
end
end

3/True/false/nil

describe "example of true/false/nil matchers" dp
  it "show true/false/nil work" do
    x= true
    y = false
    z = nil
    a = "true string"
    
    #the following will pass
    expect(x).to be true
    expect(y).to be false
    expect(a).to be_truthy
    expect(z).to be_falsy
    end
    end
    
4.Error matchers
Matchers for testing, when a block of code raises an error.
Matcher	

describe "An example of the error Matchers" do 
   it "should show how the error Matchers work" do 

      # The following Expectations will all pass 
      expect { 1/0 }.to raise_error(ZeroDivisionError)
      expect { 1/0 }.to raise_error("divided by 0") 
      expect { 1/0 }.to raise_error("divided by 0", ZeroDivisionError) 
   end 
end

5.Comparison Matchers
Matchers for comparing to values.
example
describe "An example of the comparison Matchers" do
   it "should show how the comparison Matchers work" do
      a = 1
      b = 2
      c = 3		
      d = 'test string'

      # The following Expectations will all pass
      expect(b).to be > a
      expect(a).to be >= a 
      expect(a).to be < b 
      expect(b).to be <= b 
      expect(c).to be_between(1,3).inclusive 
      expect(b).to be_between(1,3).exclusive 
      expect(d).to match /TEST/i 
   end  
end



