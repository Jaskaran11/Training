BDD(Behaviour driven development) - is a development technique which focuses more on a software application's behaviour.It creates an executable specification that fails because the respective feature dosen't exist, then writing the simplest code that can make the specification pass and as a result we get the required behaviour implemented in the system.It is a team methodology where developer,customer,qas are involved.

process - 
1.write behaviour of application
2.write automated scripts
3.implement the functional code.
4.check behaviour is succesful if not fix it
5.organize code.
6.repeat steps for another behaviour

TDD(test driven development) - is a development which focuses more on the implementation of a feature of a software application.It mainly refers to write a test case that fails because the specified functionality dosent exist and after that update the code can make the test case pass and as a result we get the feature implemented in it.
Process of TDD -
1.add test case
2.run the test case and watch test case fails
3.update the code
4.run the test case again
5.repeat steps for another test case

In both cases developer write test before writing code to make the test pass.
BDD is designed to test an application's behaviour from the end user's standpoint whereas TDD is focused on testinf smaller piece of functionality in isolation.


Testing in rails -
a collection of classes that do not affect or alter your existing application.
awareness of broken parts of your application
get the desired functionality

why write test - refactoring code more confidently
add new code
help architect the business logic
reduce client frustation

rails 5.1.0 + test-
model
helper
controller
system 
integration

model specs test-
validations,associations,scopes,business logic

controller specs - 
status code ?
content type?
layout/template rendered?
flash messages?
insert/update/deletes?
redirects?

helper specs-
specific to view helpers
desired output?
testing methods

integration tests-
feature testing(Searchin, adding to cart)

system tests-
browser testing
happy path

Frameworks - 
minitest
rspec
capybara
factorygirl
cucumber


interface b.w different controller


Generators

RSpec spec are normally generated alongside other application components.
For instance, rails generate model will also generate an RSpec spec file
for the model.

Note that the generators are there to help you get started, but they are no
substitute for writing your own examples, and they are only guaranteed to work
out of the box for with Rails' defaults.

RSpec generators can also be run independently. For instance,

rails generate rspec:model widget

will create a new spec file in spec/models/widget_spec.rb.

The same generator pattern is available for all specs:

    scaffold
    model
    controller
    helper
    view
    mailer
    integration
    feature
    job
    channel
    generator
    mailbox
    request
    system

Directory Structure

Specs are usually placed in a canonical directory structure that describes
their purpose:

    Model specs reside in the spec/models directory

    Controller specs reside in the spec/controllers directory

    Request specs reside in the spec/requests directory. The directory can also be named integration or api.

    Feature specs reside in the spec/features directory

    View specs reside in the spec/views directory

    Helper specs reside in the spec/helpers directory

    Mailer specs reside in the spec/mailers directory

    Routing specs reside in the spec/routing directory

    Job specs reside in the spec/jobs directory

    System specs reside in the spec/system directory

Application developers are free to use a different directory structure. In
order to include the correct rspec-rails support functions, the specs need
to have the appropriate corresponding metadata :type value:

    Model specs: type: :model
    Controller specs: type: :controller
    Request specs: type: :request
    Feature specs: type: :feature
    View specs: type: :view
    Helper specs: type: :helper
    Mailer specs: type: :mailer
    Routing specs: type: :routing
    Job specs: type: :job
    System specs: type: :system

