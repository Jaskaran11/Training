If you're used to using raw SQL to find database records, then you will generally find that there are better ways to carry out the same operations in Rails. Active Record insulates you from the need to use SQL in most cases.

Active Record will perform queries on the database for you and is compatible with most database systems, including MySQL, MariaDB, PostgreSQL, and SQLite. Regardless of which database system you're using, the Active Record method format will always be the same.

To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.

1.annotate - Adds an SQL comment to queries generated from this relation. 
3.0.0 :004 > Book.annotate("Selecting Book  names").select(:title)
  Book Load (0.6ms)  SELECT "books"."title" FROM "books" /* Selecting Book  names */
 =>                                                                                                                   
[#<Book:0x00007f09a0b0de10 id: nil, title: "1234">,                                                                   
 #<Book:0x00007f09a0b0dd48 id: nil, title: "Rich Dad Poor Dad">,
 #<Book:0x00007f09a0b0dc80 id: nil, title: "3242334">,
 #<Book:0x00007f09a0b0dbb8 id: nil, title: nil>,    
 #<Book:0x00007f09a0b0daf0 id: nil, title: "">,     
 #<Book:0x00007f09a0b0da28 id: nil, title: "IT">,   
 #<Book:0x00007f09a0b0d960 id: nil, title: "The Shining">,
 #<Book:0x00007f09a0b0d898 id: nil, title: "Harry Potter">,
 #<Book:0x00007f09a0b0d7d0 id: nil, title: "Firestarter">] 

2.find - 3.0.0 :005 > Author.find(1)
  Author Load (0.8ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
 =>                                                           
#<Author:0x0000556624fd7700                                   
 id: 1,                                                       
 name: "David Goggins",                                       
 dob: Tue, 05 May 1970,                                       
 gender: "Male",                                              
 country: "America",                                          
 created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,  
 updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,  
 lock_version: 1,                                             
 email_address: "david@gmail.com">  
 
 3. create_with(value)
Sets attributes to be used when creating new records from a relation object.
3.0.0 :017 > author = Author.where(name: "Robin Sharma")
  Author Load (1.3ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1  [["name", "Robin Sharma"]]
 => []                                                                 
3.0.0 :018 > author.new.name
 => "Robin Sharma" 
3.0.0 :019 > author = authors.create_with(name: "Steve")
(irb):19:in `<main>': undefined local variable or method `authors' for main:Object (NameError)
Did you mean?  author                                                                  
3.0.0 :020 > author = author.create_with(name: "Steve")
  Author Load (0.4ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1  [["name", "Robin Sharma"]]
 => []                                                                                 
3.0.0 :021 > author.new.name
 => "Steve" 

4. distinct
Specifies whether the records should be unique or not

3.0.0 :024 > Book.select(:title).distinct
  Book Load (1.0ms)  SELECT DISTINCT "books"."title" FROM "books"
 =>                                                                                
[#<Book:0x000055662441d540 id: nil, title: nil>,                                   
 #<Book:0x000055662441d478 id: nil, title: "The Shining">,       
 #<Book:0x000055662441d3b0 id: nil, title: "3242334">,           
 #<Book:0x000055662441d2e8 id: nil, title: "Harry Potter">,      
 #<Book:0x000055662441d220 id: nil, title: "">,                  
 #<Book:0x000055662441d158 id: nil, title: "Rich Dad Poor Dad">, 
 #<Book:0x000055662441d090 id: nil, title: "Firestarter">,       
 #<Book:0x000055662441cfc8 id: nil, title: "IT">,                
 #<Book:0x000055662441cf00 id: nil, title: "1234">]  
 
  eager_load(*args)-
Forces eager loading by performing a LEFT OUTER JOIN on args:
3.0.0 :044 > Author.eager_load(:books)
  SQL (1.1ms)  SELECT "authors"."id" AS t0_r0, "authors"."name" AS t0_r1, "authors"."dob" AS t0_r2, "authors"."gender" AS t0_r3, "authors"."country" AS t0_r4, "authors"."created_at" AS t0_r5, "authors"."updated_at" AS t0_r6, "authors"."lock_version" AS t0_r7, "authors"."email_address" AS t0_r8, "books"."id" AS t1_r0, "books"."title" AS t1_r1, "books"."total_page" AS t1_r2, "books"."rating" AS t1_r3, "books"."price" AS t1_r4, "books"."created_at" AS t1_r5, "books"."updated_at" AS t1_r6, "books"."date_published" AS t1_r7, "books"."publisher_id" AS t1_r8, "books"."author_id" AS t1_r9 FROM "authors" LEFT OUTER JOIN "authors_books" ON "authors_books"."author_id" = "authors"."id" LEFT OUTER JOIN "books" ON "books"."id" = "authors_books"."book_id"

 extract_associated(association) - 
Extracts a named association from the relation. The named association is first preloaded, then the individual association records are collected from the relation. Like so:

 from - Specifies the table from which the records will be fetched. For example:
 3.0.0 :009 > Book.select('title').from('books')
  Book Load (0.6ms)  SELECT "books"."title" FROM books
 =>                                                                                       
[#<Book:0x00007f18e869cd20 id: nil, title: "1234">,                                       
 #<Book:0x00007f18e88bd2a8 id: nil, title: "Rich Dad Poor Dad">,
 #<Book:0x00007f18e88bd168 id: nil, title: "3242334">,
 #<Book:0x00007f18e88bd0a0 id: nil, title: nil>,
 #<Book:0x00007f18e88bcfd8 id: nil, title: "">,
 #<Book:0x00007f18e88bce98 id: nil, title: "IT">,
 #<Book:0x00007f18e88bcd80 id: nil, title: "The Shining">,
 #<Book:0x00007f18e88bcab0 id: nil, title: "Harry Potter">,
 #<Book:0x00007f18e88bc998 id: nil, title: "Firestarter">] 
3.0.0 :010 > 

 where
Returns a new relation, which is the result of filtering the current relation according to the conditions in the arguments.

where accepts conditions in one of several formats. In the examples below, the resulting SQL is given as an illustration; the actual query generated may be different depending on the database adapter.
3.0.0 :019 > Book.where("id = '14'")
  Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE (id = '14')
 => 
[#<Book:0x00007efda445e9f0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>] 
  
  3.0.0 :022 > Author.where(["name = ?","David Goggins"])
  Author Load (0.6ms)  SELECT "authors".* FROM "authors" WHERE (name = 'David Goggins')
 =>                                                           
[#<Author:0x000055f005d1d760                                  
  id: 1,                                                      
  name: "David Goggins",                                      
  dob: Tue, 05 May 1970,                                      
  gender: "Male",
  country: "America",
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,
  lock_version: 1,
  email_address: "david@gmail.com">] 

 select(*fields) - 
Works in two unique ways.
First: takes a block so it can be used just like Array#select.


 reverse_order() - 
Reverse the existing order clause on the relation.
3.0.0 :028 > Book.order('title ASC').reverse_order
  Book Load (0.7ms)  SELECT "books".* FROM "books" ORDER BY title DESC
 =>                                                         
[#<Book:0x000055f006affdb0                                  
  id: 8,                                                    
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000055f006affce8
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000055f006affc20
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: -1,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:21:36.689545000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>,
 #<Book:0x000055f006affb58
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000055f006affa90
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055f006aff9c8
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055f006aff900
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000055f006aff838
  id: 6,
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000055f006aff770
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>] 
3.0.0 :029 > 

 reselect(*args) - 
Allows you to change a previously set select statement.

3.0.0 :030 > Book.select(:title).reselect(:total_page)
  Book Load (0.4ms)  SELECT "books"."total_page" FROM "books"
 =>                                                                                                 
[#<Book:0x000055f006a1e108 id: nil, total_page: 238>,                                               
 #<Book:0x000055f006a1e018 id: nil, total_page: -1>,                                                
 #<Book:0x000055f006a1df28 id: nil, total_page: nil>,                                               
 #<Book:0x000055f006a1de10 id: nil, total_page: nil>,                                               
 #<Book:0x000055f006a1dd20 id: nil, total_page: nil>,                                               
 #<Book:0x000055f006a1dc30 id: nil, total_page: 235>,                                               
 #<Book:0x000055f006a1db18 id: nil, total_page: 235>,                                               
 #<Book:0x000055f006a1da28 id: nil, total_page: 342>,                                               
 #<Book:0x000055f006a1d938 id: nil, total_page: 400>]   
 
 readonly - Sets readonly attributes for the returned relation. If value is true (default), attempting to update a record will result in an error.
 
 3.0.0 :034 > book = Book.readonly
  Book Load (0.8ms)  SELECT "books".* FROM "books"
 =>                                                                
[#<Book:0x00005
 3.0.0 :036 > book.first.save
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/persistence.rb:1123:in `_raise_readonly_record_error': Book is marked as readonly (ActiveRecord::ReadOnlyRecord)

 preload(*args) - Preload loads the association data in a separate query.
   Customer Load (0.7ms)  SELECT "customers".* FROM "customers"
  RoomHotel Load (1.4ms)  SELECT "room_hotels".* FROM "room_hotels" WHERE "room_hotels"."customer_id" IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)  [["customer_id", 1], ["customer_id", 2], ["customer_id", 13], ["customer_id", 14], ["customer_id", 15], ["customer_id", 16], ["customer_id", 17], ["customer_id", 18], ["customer_id", 19], ["customer_id", 20], ["customer_id", 21], ["customer_id", 22], ["customer_id", 27], ["customer_id", 31], ["customer_id", 32], ["customer_id", 35]]
 => 
[#<Customer:0x00007f9e00a39fa8
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  check_in: Sun, 01 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e00a39e90
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e00a39c38
  id: 13,
  name: "Customer Name 1",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a39a80
  id: 14,
  name: "Customer Name 2",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a398c8
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a39508
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a390f8
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a38d38
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a389c8
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a386d0
  id: 20,
  name: "Customer Name 8",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a383b0
  id: 21,
  name: "Customer Name 9",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a33f90
  id: 22,
  name: "Customer Name 10",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a33c98
  id: 27,
  name: "John Doe",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  updated_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00a33b30
  id: 31,
  name: "Sam",
  address: "Faridabad",
  gender: nil,
  mobile: "9876573100",
  check_in: Tue, 10 May 2022,
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e00a339f0
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>] 

 Includes

Includes loads the association data in a separate query just like preload.
 3.0.0 :018 >  Customer.includes(:room_hotel).references(:room_hotel).to_a
  SQL (1.5ms)  SELECT "customers"."id" AS t0_r0, "customers"."name" AS t0_r1, "customers"."address" AS t0_r2, "customers"."gender" AS t0_r3, "customers"."mobile" AS t0_r4, "customers"."check_in" AS t0_r5, "customers"."check_out" AS t0_r6, "customers"."created_at" AS t0_r7, "customers"."updated_at" AS t0_r8, "customers"."country" AS t0_r9, "customers"."email" AS t0_r10, "room_hotels"."id" AS t1_r0, "room_hotels"."name" AS t1_r1, "room_hotels"."price" AS t1_r2, "room_hotels"."created_at" AS t1_r3, "room_hotels"."updated_at" AS t1_r4, "room_hotels"."customer_id" AS t1_r5 FROM "customers" LEFT OUTER JOIN "room_hotels" ON "room_hotels"."customer_id" = "customers"."id"                                                            
 =>                                                                                                                          
[#<Customer:0x00007f9e008936b8                                                                                               
  id: 1,                                                                                                                     
  name: "Jaskaran Singh",                                                                                                    
  address: "#Sector 20-A Chandigarh",                                                                                        
  gender: "Male",                                                                                                            
  mobile: "9876573100",                                                                                                      
  check_in: Sun, 01 May 2022,                                                                                                
  check_out: Tue, 10 May 2022,                                                                                               
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,                                                                
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,                                                                
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e008919a8
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e00890ad0
  id: 20,
  name: "Customer Name 8",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e008906c0
  id: 27,
  name: "John Doe",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  updated_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00890148
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098fb98
  id: 31,
  name: "Sam",
  address: "Faridabad",
  gender: nil,
  mobile: "9876573100",
  check_in: Tue, 10 May 2022,
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e0098ee50
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098e248
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098d8e8
  id: 13,
  name: "Customer Name 1",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098d3c0
  id: 21,
  name: "Customer Name 9",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098d0a0
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098cec0
  id: 32,
  name: "Uchiha",
  address: "chd",
  gender: nil,
  mobile: "9876573100",
  check_in: Thu, 05 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  country: "india",
  email: nil>,
 #<Customer:0x00007f9e0098cbc8
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098c9e8
  id: 22,
  name: "Customer Name 10",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098c7b8
  id: 14,
  name: "Customer Name 2",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0098c3f8
  id: 35,
  name: "Jas",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>] 
3.0.0 :019 > 

 order(*args)
Applies an ORDER BY clause to a query.
order accepts arguments in one of several formats.
3.0.0 :022 > Customer.order(:name)
  Customer Load (1.3ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."name" ASC
 =>                                                                                   
[#<Customer:0x00007f9e00842470                                                        
  id: 13,                                                                             
  name: "Customer Name 1",                                                            
  address: nil,                                                                       
  gender: nil,                                                                        
  mobile: nil,                                                                        
  check_in: nil,                                                                      
  check_out: nil,                                                                     
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,                         
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,                         
  country: nil,                                                                       
  email: nil>,                                                                        
 #<Customer:0x00007f9e008423a8                                                        
  id: 22,
  name: "Customer Name 10",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e008422e0
  id: 14,
  name: "Customer Name 2",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00842218
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00842150
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00842088
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841fc0
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841ef8
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841e30
  id: 20,
  name: "Customer Name 8",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841d68
  id: 21,
  name: "Customer Name 9",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841ca0
  id: 35,
  name: "Jas",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841bd8
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  updated_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00841a48
  id: 31,
  name: "Sam",
  address: "Faridabad",
  gender: nil,
  mobile: "9876573100",
  check_in: Tue, 10 May 2022,
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e00841980
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e008418b8
  id: 32,
  name: "Uchiha",
  address: "chd",
  gender: nil,
  mobile: "9876573100",
  check_in: Thu, 05 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  country: "india",
  email: nil>] 
3.0.0 :023 > Customer.order(name: :desc)
  Customer Load (0.8ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."name" DESC
 =>                                                                                         
[#<Customer:0x00007f9e0083a568                                                              
  id: 32,                                                                                   
  name: "Uchiha",                                                                           
  address: "chd",                                                                           
  gender: nil,                                                                              
  mobile: "9876573100",                                                                     
  check_in: Thu, 05 May 2022,                                                               
  check_out: Tue, 10 May 2022,                                                              
  created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,                               
  updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,                               
  country: "india",                                                                         
  email: nil>,                                                                              
 #<Customer:0x00007f9e0083a478                                                              
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e0083a388
  id: 31,
  name: "Sam",
  address: "Faridabad",
  gender: nil,
  mobile: "9876573100",
  check_in: Tue, 10 May 2022,
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e0083a270
  id: 27,
  name: "John Doe",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  updated_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e0083a130
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  check_in: Sun, 01 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007f9e0083a018
  id: 35,
  name: "Jas",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839f28
  id: 21,
  name: "Customer Name 9",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839e60
  id: 20,
  name: "Customer Name 8",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839d70
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839c80
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839b90
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839aa0
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e008399b0
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e008398e8
  id: 14,
  name: "Customer Name 2",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e008397f8
  id: 22,
  name: "Customer Name 10",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00007f9e00839708
  id: 13,
  name: "Customer Name 1",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  country: nil,
  email: nil>] 
3.0.0 :024 > 


Retrieving a Single Object
1.find -
3.0.0 :001 > customer = Customer.find(1)
  Customer Load (0.9ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]                             
 =>                                                                        
#<Customer:0x00007fe21c77fd20                                              
...   

3.0.0 :007 > customer = Customer.find([1, 35])
  Customer Load (0.8ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" IN ($1, $2)  [["id", 1], ["id", 35]]             
 =>                                                    
[#<Customer:0x00005625059da3e8
... 

2.take -
The take method retrieves a record without any implicit ordering. 
3.0.0 :012 > customer = Customer.take
  Customer Load (0.7ms)  SELECT "customers".* FROM "customers" LIMIT $1  [["LIMIT", 1]]                               
 => 
#<Customer:0x00005625053c20a0
... 
3.0.0 :013 > customer
 => 
#<Customer:0x00005625053c20a0         
 id: 1,
 name: "Jaskaran Singh",
 address: "#Sector 20-A Chandigarh",
 gender: "Male",
 mobile: "9876573100",
 check_in: Sun, 01 May 2022,
 check_out: Tue, 10 May 2022,
 created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
 updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
 country: "India",
 email: nil>
 
 3.0.0 :017 > customer = Customer.take(3)
  Customer Load (0.6ms)  SELECT "customers".* FROM "customers" LIMIT $1  [["LIMIT", 3]]
 => 
[#<Customer:0x0000562505ae8578
... 
3.0.0 :018 > customer
 => 
[#<Customer:0x0000562505ae8578
  id: 1,                      
  name: "Jaskaran Singh",     
  address: "#Sector 20-A Chandigarh",
  gender: "Male",             
  mobile: "9876573100",       
  check_in: Sun, 01 May 2022, 
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",           
  email: nil>,                
 #<Customer:0x0000562505ae84b0
  id: 2,                      
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x0000562505ae83e8
  id: 13,
  name: "Customer Name 1",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  country: nil,
  email: nil>] 

3 first
The first method finds the first record ordered by primary key (default). 
 3.0.0 :019 > customer = Customer.first
  Customer Load (0.6ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."id" ASC LIMIT $1  [["LIMIT", 1]]                                      
 =>                                                                        
#<Customer:0x0000562505bdbf20                                              
...                                                                        
3.0.0 :020 > customer
 => 
#<Customer:0x0000562505bdbf20                                              
 id: 1,                                                                    
 name: "Jaskaran Singh",                                                   
 address: "#Sector 20-A Chandigarh",                                       
 gender: "Male",                                                           
 mobile: "9876573100",                                                     
 check_in: Sun, 01 May 2022,                                               
 check_out: Tue, 10 May 2022,                                              
 created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
 updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
 country: "India",            
 email: nil> 
 
 3.0.0 :021 > customer = Customer.first(3)
  Customer Load (0.4ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."id" ASC LIMIT $1  [["LIMIT", 3]]               
 =>                                                 
[#<Customer:0x00007fe21ca64400                      
...         
0.0 :022 > customer
 => 
[#<Customer:0x00007fe21ca64400
  id: 1,                      
  name: "Jaskaran Singh",     
  address: "#Sector 20-A Chandigarh",
  gender: "Male",             
  mobile: "9876573100",       
  check_in: Sun, 01 May 2022, 
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",           
  email: nil>,                
 #<Customer:0x00007fe21ca64338
  id: 2,                      
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00007fe21ca64248
  id: 13,
  name: "Customer Name 1",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  country: nil,
  email: nil>] 
  
  4.last - The last method finds the last record ordered by primary key (default). 
  3.0.0 :028 > customer = Customer.last
  Customer Load (0.7ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."id" DESC LIMIT $1  [["LIMIT", 1]]
 =>                                                                        
#<Customer:0x0000562505aeb1b0                                              
...                                                                        
3.0.0 :029 > customer
 => 
#<Customer:0x0000562505aeb1b0                                              
 id: 35,                                                                   
 name: "Jas",  
 
 3.0.0 :030 > customer = Customer.last(3)
  Customer Load (0.7ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."id" DESC LIMIT $1  [["LIMIT", 3]]
 =>                                   
[#<Customer:0x00005625053c2de8
... 
3.0.0 :031 > customer
 => 
[#<Customer:0x00005625053c2de8
  id: 31,                     
  name: "Sam",                
  address: "Faridabad",       
  gender: nil,                
  mobile: "9876573100",       
  check_in: Tue, 10 May 2022, 
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",           
  email: nil>,                
 #<Customer:0x00005625053c2eb0
  id: 32,                     
  name: "Uchiha",
  address: "chd",
  gender: nil,
  mobile: "9876573100",
  check_in: Thu, 05 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  country: "india",
  email: nil>,
 #<Customer:0x00005625053c2f78
  id: 35,
  name: "Jas",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>] 

3.0.0 :032 > customer = Customer.order(:name).last
  Customer Load (0.2ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."name" DESC LIMIT $1  [["LIMIT", 1]]
 =>                                                                                              
#<Customer:0x00005625056a2900                                                                    
...                                                                                              
3.0.0 :033 > customer
 => 
#<Customer:0x00005625056a2900                                                                    
 id: 32,                                                                                         
 name: "Uchiha",                                                                                 
 address: "chd",                                                                                 
 gender: nil,                                                                                    
 mobile: "9876573100",                                                                           
 check_in: Thu, 05 May 2022,                                                                     
 check_out: Tue, 10 May 2022,                                                                    
 created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,                                     
 updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
 country: "india",            
 email: nil>                  
3.0.0 :034 > customer = Customer.order(:name).first
  Customer Load (0.7ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."name" ASC LIMIT $1  [["LIMIT", 1]]
 =>       
 
 5.find_by ->
 3.0.0 :038 > Customer.find_by name: 'Jaskaran Singh'
  Customer Load (0.8ms)  SELECT "customers".* FROM "customers" WHERE "customers"."name" = $1 LIMIT $2  [["name", "Jaskaran Singh"], ["LIMIT", 1]]
 =>                                                               
#<Customer:0x0000562505b518c0                                     
 id: 1,                                                           
 name: "Jaskaran Singh",                                          
 address: "#Sector 20-A Chandigarh",                              
 gender: "Male",                                                  
 mobile: "9876573100",                                            
 check_in: Sun, 01 May 2022,                                      
 check_out: Tue, 10 May 2022,                                     
 created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,      
 updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
 country: "India",
 email: nil>
 
 3.0.0 :039 > Customer.find_by name: 'Ram'
  Customer Load (0.4ms)  SELECT "customers".* FROM "customers" WHERE "customers"."name" = $1 LIMIT $2  [["name", "Ram"], ["LIMIT", 1]]
 => nil 
 
 Retrieving Multiple Objects in Batches - 
 
 When you call #each, all records will be loaded into memory. When you call #find_each, records will be loaded into memory in batches of the given batch size.

So when your query returns a number of records that would be too much memory for the server's available resources, then using #find_each would be a great choice.

ActiveRecord::Batches provides public methods like find_each, find_in_batches and in_batches to work with the records in batches which helps in reducing memory consumption.

1.find_Each - 

3.0.0 :004 > Book.find_each do |book|
3.0.0 :005 >   puts "#{book.title}"
3.0.0 :006 > end
  Book Load (0.5ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 1000]]
Rich Dad Poor Dad
IT
The Shining
Harry Potter
Firestarter
 => nil 

Options for find_Each - 
1.batch_size : The :batch_size option allows you to specify the number of records to be retrieved in each batch, before being passed individually to the block.
3.0.0 :086 > Customer.find_each(batch_size: 5) do |customer|
3.0.0 :087 >   puts "#{customer.name}"
3.0.0 :088 > end
  Customer Load (0.3ms)  SELECT "customers".* FROM "customers" ORDER BY "customers"."id" ASC LIMIT $1  [["LIMIT", 5]]
Jaskaran Singh                                                              
Sam Sharma                                                                  
Customer Name 1                                                             
Customer Name 2                                                             
Customer Name 3                                                             
  Customer Load (0.2ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" > $1 ORDER BY "customers"."id" ASC LIMIT $2  [["id", 15], ["LIMIT", 5]]
Customer Name 4                                                             
Customer Name 5                                                             
Customer Name 6                                                             
Customer Name 7                                                             
Customer Name 8                                                             
  Customer Load (0.2ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" > $1 ORDER BY "customers"."id" ASC LIMIT $2  [["id", 20], ["LIMIT", 5]]
Customer Name 9                                                             
Customer Name 10
John Doe
Sam
Uchiha
  Customer Load (0.2ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" > $1 ORDER BY "customers"."id" ASC LIMIT $2  [["id", 32], ["LIMIT", 5]]
Jas
 => nil 

2.start:
By default, records are fetched in ascending order of the primary key. The :start option allows you to configure the first ID of the sequence whenever the lowest ID is not the one you need.

3.0.0 :098 > Customer.find_each(start:30) do |customer|
3.0.0 :099 >   puts "#{customer.name}"
3.0.0 :100 > end
  Customer Load (0.2ms)  SELECT "customers".* FROM "customers" WHERE "customers"."id" >= $1 ORDER BY "customers"."id" ASC LIMIT $2  [["id", 30], ["LIMIT", 1000]]
Sam
Uchiha
Jas
 => nil 

3.finish - 
3.0.0 :016 > Book.find_each(start:2, finish: 10) do |book|
3.0.0 :017 >   puts "#{book.title}"
3.0.0 :018 > end
  Book Load (0.7ms)  SELECT "books".* FROM "books" WHERE "books"."id" >= $1 AND "books"."id" <= $2 ORDER BY "books"."id" ASC LIMIT $3  [["id", 2], ["id", 10], ["LIMIT", 1000]]                                                       
Rich Dad Poor Dad                                                     
1234                                                                  
3242334                                                               
                                                                      
                                                                      
 => nil   
 
 4.error_on_ignore - 
 Overrides the application config to specify if an error should be raised when an order is present in the relation.
 
Ordering

To retrieve records from the database in a specific order, you can use the order method.
3.0.0 :002 > Book.order(:created_at)
  Book Load (1.5ms)  SELECT "books".* FROM "books" ORDER BY "books"."created_at" ASC                                                                            
 =>                                                                             
[#<Book:0x0000556ac05518a8                                                      
  id: 5,                                                                        
  title: "Rich Dad Poor Dad",                                                   
  total_page: 300,                                                              
  rating: nil,                                                                  
  price: 0.499e3,                                                               
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,                   
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,                   
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>,
 #<Book:0x0000556ac05a27d0
  id: 6,
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a26e0
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a25f0
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a2500
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a23e8
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a22f8
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac05a2208
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac05a20f0
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>] 

  author_id: 10017>] 
3.0.0 :003 > Book.order(created_at: :desc)
  Book Load (0.8ms)  SELECT "books".* FROM "books" ORDER BY "books"."created_at" DESC
 =>                                                                             
[#<Book:0x0000556ac04f8cd0                                                      
  id: 17,                                                                       
  title: "Firestarter",                                                         
  total_page: 400,                                                              
  rating: 3.9,                                                                  
  price: 0.5005e3,                                                              
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                   
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                   
  date_published: Sun, 02 May 1999,                                             
  publisher_id: nil,                                                            
  author_id: 10017>,                                                            
 #<Book:0x0000556ac04f8c08                                                      
  id: 16,                                                                       
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac04f8b40
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac04f8a78

Or ordering by multiple fields:
3.0.0 :004 > Book.order(:title, created_at: :desc)
  Book Load (1.4ms)  SELECT "books".* FROM "books" ORDER BY "books"."title" ASC, "books"."created_at" DESC
 =>                                                                                                   
[#<Book:0x0000556ac00ba218                                                                            
  id: 9,                                                                                              
  title: "",                                                                                          
  total_page: nil,                                                                                    
  rating: nil,                                                                                        
  price: nil,                                                                                         
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,                                         
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,                                         
  date_published: nil,                                                                                
  publisher_id: nil,                                                                                  
  author_id: nil>,                                                                                    
 #<Book:0x0000556ac00ba150                                                                            
  id: 6,                                                                                              
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac00ba088
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac00b9fc0
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac00b9ef8
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac00b9e30
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac00b9d68
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>,
 #<Book:0x0000556ac00b9ca0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac00b9bd8
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>] 

If you want to call order multiple times, subsequent orders will be appended to the first:
3.0.0 :005 > Book.order("title ASC").order("created_at DESC")
  Book Load (0.8ms)  SELECT "books".* FROM "books" ORDER BY title ASC, created_at DESC
 =>                                                                 
[#<Book:0x0000556ac0252418                                          
  id: 9,                                                            
  title: "",                                                        
  total_page: nil,                                                  
  rating: nil,                                                      
  price: nil,                                                       
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,       
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,                                      
  publisher_id: nil,                                        
  author_id: nil>,                                          
 #<Book:0x0000556ac0252350                                  
  id: 6,                                                    
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac0252288
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac02521c0
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac02520f8
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac0252030
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac0251f68
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>,
 #<Book:0x0000556ac0251ea0
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>.
  
Selecting Specific Fields-
3.0.0 :010 > Book.select(:title, :author_id)
  Book Load (0.7ms)  SELECT "books"."title", "books"."author_id" FROM "books"
 => 
[#<Book:0x0000556ac02bb530 id: nil, title: "1234", author_id: nil>,
 #<Book:0x0000556ac02bb2d8 id: nil, title: "3242334", author_id: nil>,
 #<Book:0x0000556ac02bb0a8 id: nil, title: nil, author_id: nil>,
 #<Book:0x0000556ac02bae50 id: nil, title: "", author_id: nil>,
 #<Book:0x0000556ac02bad38 id: nil, title: "IT", author_id: nil>,
 #<Book:0x0000556ac02bac70 id: nil, title: "The Shining", author_id: nil>,
 #<Book:0x0000556ac02baa40 id: nil, title: "Harry Potter", author_id: 10017>,
 #<Book:0x0000556ac02ba978 id: nil, title: "Firestarter", author_id: 10017>,
 #<Book:0x0000556ac02ba8b0 id: nil, title: "Rich Dad Poor Dad", author_id: nil>] 


3.0.0 :104 > Customer.select(:name).distinct
  Customer Load (0.8ms)  SELECT DISTINCT "customers"."name" FROM "customers"
 =>                                                                                    
[#<Customer:0x0000562505a31b70 id: nil, name: "Customer Name 3">,                      
 #<Customer:0x0000562505a31a58 id: nil, name: "Jaskaran Singh">,                       
 #<Customer:0x0000562505a31968 id: nil, name: "Customer Name 1">,                      
 #<Customer:0x0000562505a31878 id: nil, name: "Jas">,                                  
 #<Customer:0x0000562505a31788 id: nil, name: "Customer Name 6">,                      
 #<Customer:0x0000562505a31670 id: nil, name: "Uchiha">,                               
 #<Customer:0x0000562505a31558 id: nil, name: "Customer Name 8">,                      
 #<Customer:0x0000562505a31468 id: nil, name: "Sam Sharma">,                           
 #<Customer:0x0000562505a31378 id: nil, name: "Customer Name 7">,                      
 #<Customer:0x0000562505a31260 id: nil, name: "Customer Name 2">,                      
 #<Customer:0x0000562505a31170 id: nil, name: "Customer Name 5">,                      
 #<Customer:0x0000562505a31080 id: nil, name: "John Doe">,                             
 #<Customer:0x0000562505a30f90 id: nil, name: "Sam">,                                  
 #<Customer:0x0000562505a30e78 id: nil, name: "Customer Name 9">,
 #<Customer:0x0000562505a30d88 id: nil, name: "Customer Name 10">,
 #<Customer:0x0000562505a30c98 id: nil, name: "Customer Name 4">] 


3.0.0 :106 > query.distinct(false)
  Customer Load (0.7ms)  SELECT "customers"."name" FROM "customers"
 =>                                                  
[#<Customer:0x0000562505b395b8 id: nil, name: "Jaskaran Singh">,
 #<Customer:0x0000562505b394f0 id: nil, name: "Sam Sharma">,
 #<Customer:0x0000562505b39428 id: nil, name: "Customer Name 1">,
 #<Customer:0x0000562505b39360 id: nil, name: "Customer Name 2">,
 #<Customer:0x0000562505b39298 id: nil, name: "Customer Name 3">,
 #<Customer:0x0000562505b391d0 id: nil, name: "Customer Name 4">,
 #<Customer:0x0000562505b39108 id: nil, name: "Customer Name 5">,
 #<Customer:0x0000562505b39040 id: nil, name: "Customer Name 6">,
 #<Customer:0x0000562505b38f78 id: nil, name: "Customer Name 7">,
 #<Customer:0x0000562505b38eb0 id: nil, name: "Customer Name 8">,
 #<Customer:0x0000562505b38de8 id: nil, name: "Customer Name 9">,
 #<Customer:0x0000562505b38d20 id: nil, name: "Customer Name 10">,
 #<Customer:0x0000562505b38c58 id: nil, name: "John Doe">,
 #<Customer:0x0000562505b38b90 id: nil, name: "Sam">,
 #<Customer:0x0000562505b38ac8 id: nil, name: "Uchiha">,
 #<Customer:0x0000562505b38a00 id: nil, name: "Jas">]
 
 Limit and Offset- 
 3.0.0 :107 > Customer.limit(3)
[#<Customer:0x0000562505dc0bb0                    
  id: 1,                                          
  name: "Jaskaran Singh",                         
  address: "#Sector 20-A Chandigarh",             
  gender: "Male",                                 
  mobile: "9876573100",                           
  check_in: Sun, 01 May 2022,                     
  check_out: Tue, 10 May 2022,                    
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",                               
  email: nil>,                                    
 #<Customer:0x0000562505dc0ae8                    
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>] 

OFFSET is used to skip the number of records from the results.
3.0.0 :135 > Customer.limit(5).offset(3)
  Customer Load (0.7ms)  SELECT "customers".* FROM "customers" LIMIT $1 OFFSET $2  [["LIMIT", 5], ["OFFSET", 3]]
 => 
[#<Customer:0x0000562504fca0d8
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x0000562504fc9f70
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x0000562504fc9e08
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x0000562504fc9ca0
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x0000562504fc9ae8
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>] 
3.0.0 :136 > 

3.0.0 :019 > Book.select(:created_at).group(:created_at)
  Book Load (0.9ms)  SELECT "books"."created_at" FROM "books" GROUP BY "books"."created_at"
 =>                                                                                                   
[#<Book:0x0000556ac00e39d8 id: nil, created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00>,      
 #<Book:0x0000556ac00e3910 id: nil, created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00>,      
 #<Book:0x0000556ac00e3848 id: nil, created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00>,      
 #<Book:0x0000556ac00e3780 id: nil, created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00>,      
 #<Book:0x0000556ac00e36b8 id: nil, created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00>,      
 #<Book:0x0000556ac00e35f0 id: nil, created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00>,      
 #<Book:0x0000556ac00e3528 id: nil, created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00>,      
 #<Book:0x0000556ac00e3460 id: nil, created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00>,      
 #<Book:0x0000556ac00e3398 id: nil, created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00>]      
3.0.0 :020 > 
3.0.0 :140 > Customer.select(:name).group(:name).count
  Customer Count (0.5ms)  SELECT COUNT("customers"."name") AS "count_name", "customers"."name" AS "customers_name" FROM "customers" GROUP BY "customers"."name"
 =>                                                                                                 
{"Jas"=>1,                                                                                          
 "Customer Name 6"=>1,                                                                              
 "Uchiha"=>1,                                                                                       
 "Customer Name 8"=>1,                                                                              
 "Sam Sharma"=>1,                                                                                   
 "Customer Name 7"=>1,                                                                              
 "Customer Name 2"=>1,                                                                              
 "Customer Name 5"=>1,                                                                              
 "John Doe"=>1,                                                                                     
 "Sam"=>1,                                                                                          
 "Henry Cavill"=>1,                                                                                 
 "Customer Name 9"=>1,                                                                              
 "Customer Name 10"=>1,                                                                             
 "Customer Name 4"=>1,
 "Customer Name 3"=>1,
 "Jaskaran Singh"=>1} 
3.0.0 :141 > Customer.select(:name).count
  Customer Count (0.7ms)  SELECT COUNT("customers"."name") FROM "customers"
 => 16       
 
 Having
SQL uses the HAVING clause to specify conditions on the GROUP BY fields. You can add the HAVING clause to the SQL fired by the Model.find by adding the having method to the find.
3.0.0 :034 > Book.select("price").group("price").having("sum(price) > ? ", 200)
  Book Load (1.0ms)  SELECT "books"."price" FROM "books" GROUP BY "books"."price" HAVING (sum(price) > 200 )
 =>                                                                                          
[#<Book:0x0000556ac3e5a320 id: nil, price: 0.5234e3>,                                        
 #<Book:0x0000556ac3e5a258 id: nil, price: 0.5005e3>,                                        
 #<Book:0x0000556ac3e5a190 id: nil, price: 0.499e3>,                                         
 #<Book:0x0000556ac3e5a0c8 id: nil, price: 0.42e3>]                                          
3.0.0 :035 > 
                                                                                             
Overriding Conditions-
1 unscope-
3.0.0 :037 > Book.where('id>5').limit(5).order('id desc').unscope(:order)
  Book Load (0.5ms)  SELECT "books".* FROM "books" WHERE (id>5) LIMIT $1  [["LIMIT", 5]]
 => 
[#<Book:0x0000556ac4292ac8
  id: 6,
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac4292a00
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac4292938
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac4292870
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac42927a8
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>] 

3.0.0 :038 > Book.order('id desc').merge(Book.unscope(:order))
  Book Load (0.3ms)  SELECT "books".* FROM "books"
 =>                                                                                                             
[#<Book:0x0000556ac1a836e0                                                                                      
  id: 6,                                                                                                        
  title: "1234",                                                                                                
  total_page: 238,                                                                                              
  rating: nil,                                                                                                  
  price: nil,                                                                                                   
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,                                                   
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,                                                   
  date_published: nil,                                                                                          
  publisher_id: nil,                                                                                            
  author_id: nil>,                                                                                              
 #<Book:0x0000556ac1a835c8                                                                                      
  id: 7,                                                                                                        
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac1a83168
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac1a82da8
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac1a82b78
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac1a828a8
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac1a82718
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac1a82628
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac1a823d0
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>] 

only - 
3.0.0 :039 > Book.where('id>5').limit(10).order('id desc').only(:order)
  Book Load (0.5ms)  SELECT "books".* FROM "books" ORDER BY id desc
 =>                                                                                                                       
[#<Book:0x0000556ac3a6a9e0                                                                                                
  id: 17,                                                                                                                 
  title: "Firestarter",                                                                                                   
  total_page: 400,                                                                                                        
  rating: 3.9,                                                                                                            
  price: 0.5005e3,                                                                                                        
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                                                             
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                                                             
  date_published: Sun, 02 May 1999,                                                                                       
  publisher_id: nil,                                                                                                      
  author_id: 10017>,                                                                                                      
 #<Book:0x0000556ac3a6a918                                                                                                
  id: 16,                                                                                                                 
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x0000556ac3a6a850
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a788
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a6c0
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a5f8
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a530
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a468
  id: 6,
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x0000556ac3a6a3a0
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>] 

3.reselect-
3.0.0 :040 > Book.select(:title).reselect(:rating)
  Book Load (0.7ms)  SELECT "books"."rating" FROM "books"
 =>                                                                                                 
[#<Book:0x0000556ac19da6a8 id: nil, rating: nil>,                                                   
 #<Book:0x0000556ac19da5e0 id: nil, rating: nil>,                                                   
 #<Book:0x0000556ac19da518 id: nil, rating: nil>,                                                   
 #<Book:0x0000556ac19da450 id: nil, rating: nil>,                                                   
 #<Book:0x0000556ac19da388 id: nil, rating: 4.5>,                                                   
 #<Book:0x0000556ac19da2c0 id: nil, rating: 4.5>,                                                   
 #<Book:0x0000556ac19da1f8 id: nil, rating: 4.7>,                                                   
 #<Book:0x0000556ac19da130 id: nil, rating: 3.9>,                                                   
 #<Book:0x0000556ac19da068 id: nil, rating: nil>]      
 
 4 reorder-
 3.0.0 :023 > Book.order('title desc').reorder('title asc')
  Book Load (0.6ms)  SELECT "books".* FROM "books" ORDER BY title asc
 =>                                                                                            
[#<Book:0x000056366e62fa98                                                                     
  id: 9,                                                                                       
  title: "",                                                                                   
  total_page: nil,                                                                             
  rating: nil,                                                                                 
  price: nil,                                                                                  
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,                                  
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,                                  
  date_published: nil,                                                                         
  publisher_id: nil,                                                                           
  author_id: nil>,                                                                             
 #<Book:0x000056366e62f9d0                                                                     
  id: 6,                                                                                       
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000056366e62f908
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000056366e62f818
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 0.5005e3,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000056366e62f750
  id: 16,
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000056366e62f688
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000056366e62f5c0
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 0.499e3,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 10:07:59.793704000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: nil>,
 #<Book:0x000056366e62f4f8
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000056366e62f430
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>] 

5 reverse_order
The reverse_order method reverses the ordering clause if specified. 

3.0.0 :024 > Book.where('id > 5').reverse_order
  Book Load (1.3ms)  SELECT "books".* FROM "books" WHERE (id > 5) ORDER BY "books"."id" DESC
 =>                                                                                        
[#<Book:0x00007f6b20729240                                                                 
  id: 17,                                                                                  
  title: "Firestarter",                                                                    
  total_page: 400,                                                                         
  rating: 3.9,                                                                             
  price: 0.5005e3,                                                                         
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                              
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,                              
  date_published: Sun, 02 May 1999,                                                        
  publisher_id: nil,                                                                       
  author_id: 10017>,                                                                       
 #<Book:0x00007f6b20729178                                                                 
  id: 16,                                                                                  
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 0.42e3,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x00007f6b20729060
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x00007f6b20728f48
  id: 12,
  title: "IT",
  total_page: 235,
  rating: 4.5,
  price: 0.5234e3,
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x00007f6b20728e08
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x00007f6b20728cf0
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x00007f6b20728c00
  id: 7,
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x00007f6b20728a98
  id: 6,
  title: "1234",
  total_page: 238,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>] 

6 rewhere
The rewhere method overrides an existing, named where condition.     
3.0.0 :027 > Book.where(price: 1000).rewhere(price: nil)
  Book Load (0.8ms)  SELECT "books".* FROM "books" WHERE "books"."price" IS NULL
 =>                                                                                           
[#<Book:0x000056366e36df58                                                                    
  id: 6,                                                                                      
  title: "1234",                                                                              
  total_page: 238,                                                                            
  rating: nil,                                                                                
  price: nil,                                                                                 
  created_at: Fri, 27 May 2022 08:52:13.257238000 UTC +00:00,                            
  updated_at: Fri, 27 May 2022 08:54:06.162250000 UTC +00:00,                            
  date_published: nil,                                                                   
  publisher_id: nil,                                                                     
  author_id: nil>,                                                                       
 #<Book:0x000056366e36de90                                                               
  id: 7,                                                                                 
  title: "3242334",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  updated_at: Fri, 27 May 2022 09:48:18.925743000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000056366e36ddc8
  id: 8,
  title: nil,
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:56:24.649145000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>,
 #<Book:0x000056366e36dd00
  id: 9,
  title: "",
  total_page: nil,
  rating: nil,
  price: nil,
  created_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  updated_at: Fri, 27 May 2022 16:57:48.367344000 UTC +00:00,
  date_published: nil,
  publisher_id: nil,
  author_id: nil>] 

Calculations

This section uses count as an example method in this preamble, but the options described apply to all sub-sections.
1.count - 
3.0.0 :004 > Author.count
  Author Count (12.8ms)  SELECT COUNT(*) FROM "authors"
 => 10016     
 
 2.3.0.0 :005 > Author.where(name: "David Goggins").count
  Author Count (0.7ms)  SELECT COUNT(*) FROM "authors" WHERE "authors"."name" = $1  [["name", "David Goggins"]]                                              
 => 1     
 
2 Average - 
3.0.0 :006 > Book.average("rating")
  Book Average (8.0ms)  SELECT AVG("books"."rating") FROM "books"
 => 4.4 
 
 3.Minimum - 
 3.0.0 :007 > Book.minimum("rating")
  Book Minimum (0.8ms)  SELECT MIN("books"."rating") FROM "books"
 => 3.9   
 
 4.maximum -
 3.0.0 :001 > Book.maximum("price")
  Book Maximum (0.5ms)  SELECT MAX("books"."price") FROM "books"
 => 523                                                     
3.0.0 :0

5.3.0.0 :002 > Book.sum("price")
  Book Sum (0.8ms)  SELECT SUM("books"."price") FROM "books"
 => 2466 
 
Existence of Objects-
If you simply want to check for the existence of the object there's a method called exists?. This method will query the database using the same query as find, but instead of returning an object or collection of objects it will return either true or false.

1.3.0.0 :003 > Author.exists?(10017)
  Author Exists? (2.0ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]                    
 => true 
 
 3.0.0 :005 > Author.exists?(id: [1,2,3])
  Author Exists? (1.0ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."id" IN ($1, $2, $3) LIMIT $4  [["id", 1], ["id", 2], ["id", 3], ["LIMIT", 1]]         
 => true 
 
 3.0.0 :006 > Author.where(name: "Stephen KIng").exists?
  Author Exists? (1.2ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "Stephen KIng"], ["LIMIT", 1]]                         
 => false                                                                       
3.0.0 :007 > Author.where(name: "Stephen King").exists?
  Author Exists? (0.7ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "Stephen King"], ["LIMIT", 1]]                         
 => true    
 
 3.0.0 :008 > Author.exists?
  Author Exists? (0.8ms)  SELECT 1 AS one FROM "authors" LIMIT $1  [["LIMIT", 1]]                                                             
 => true      
 
 The above returns false if the customers table is empty and true otherwise.

You can also use any? and many? to check for existence on a model or relation. many? will use SQL count to determine if the item exists.

3.0.0 :009 > Author.any?
  Author Exists? (0.7ms)  SELECT 1 AS one FROM "authors" LIMIT $1  [["LIMIT", 1]]                                                             
 => true                                                      
3.0.0 :010 > Author.many?
  Author Count (0.9ms)  SELECT COUNT(*) FROM (SELECT 1 AS one FROM "authors" LIMIT $1) subquery_for_count  [["LIMIT", 2]]                     
 => true                                                      
3.0.0 :011 >


3.0.0 :013 > Author.where(name: true).any?
  Author Exists? (0.8ms)  SELECT 1 AS one FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "t"], ["LIMIT", 1]]                                    
 => false 
 
 
 3.0.0 :014 > Author.first.books.any?
  Author Load (0.7ms)  SELECT "authors".* FROM "authors" ORDER BY "authors"."id" ASC LIMIT $1  [["LIMIT", 1]]                                                   
  Book Exists? (0.5ms)  SELECT 1 AS one FROM "books" WHERE "books"."author_id" = $1 LIMIT $2  [["author_id", 1], ["LIMIT", 1]]                                  
 => false                                                                       
3.0.0 :015 > Author.first.books.many?
  Author Load (0.5ms)  SELECT "authors".* FROM "authors" ORDER BY "authors"."id" ASC LIMIT $1  [["LIMIT", 1]]                                                   
  Book Count (0.4ms)  SELECT COUNT(*) FROM (SELECT 1 AS one FROM "books" WHERE "books"."author_id" = $1 LIMIT $2) subquery_for_count  [["author_id", 1], ["LIMIT", 2]]                                                                          
 => false   
        
        
10 Null Relation
The none method returns a chainable relation with no records. Any subsequent conditions chained to the returned relation will continue generating empty relations. This is useful in scenarios where you need a chainable response to a method or a scope that could return zero results.      

3.0.0 :002 > Book.none
 => [] 
3.0.0 :

12 Locking Records for Update

Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.

Active Record provides two locking mechanisms:

    Optimistic Locking
    Pessimistic Locking

3.0.0 :001 > p1 = Publisher.find(1)
  Publisher Load (0.1ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
 =>                                           
#<Publisher:0x000055ebaf1054c8                
...                                           
3.0.0 :002 > p2 = Publisher.find(1)
  Publisher Load (0.6ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
 =>                                           
#<Publisher:0x00007f30e44c34b8                
...                                           
3.0.0 :003 > p1.name
 => "Lioncrest Publisher" 
3.0.0 :004 > p1.name = "Then Lioncrest"
 => "Then Lioncrest" 
3.0.0 :005 > p1.save
  TRANSACTION (0.2ms)  BEGIN
  Publisher Update (0.3ms)  UPDATE "publishers" SET "name" = $1, "updated_at" = $2, "lock_version" = $3 WHERE "publishers"."id" = $4 AND "publishers"."lock_version" = $5  [["name", "Then Lioncrest"], ["updated_at", "2022-06-13 10:05:34.307749"], ["lock_version", 3], ["id", 1], ["lock_version", 2]]
  TRANSACTION (6.8ms)  COMMIT                             
 => true                                                  
3.0.0 :006 > p2.name  = "Lioncrest"
 => "Lioncrest" 
3.0.0 :007 > p2.save
  TRANSACTION (0.2ms)  BEGIN
  Publisher Update (0.5ms)  UPDATE "publishers" SET "name" = $1, "updated_at" = $2, "lock_version" = $3 WHERE "publishers"."id" = $4 AND "publishers"."lock_version" = $5  [["name", "Lioncrest"], ["updated_at", "2022-06-13 10:05:47.739064"], ["lock_version", 3], ["id", 1], ["lock_version", 2]]
  TRANSACTION (0.3ms)  ROLLBACK                           
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/locking/optimistic.rb:108:in `_update_row': Attempted to update a stale object: Publisher. (ActiveRecord::StaleObjectError)    


Pessimistic Locking
Pessimistic locking uses a locking mechanism provided by the underlying database. Using lock when building a relation obtains an exclusive lock on the selected rows. Relations using lock are usually wrapped inside a transaction for preventing deadlock conditions.   

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c                               
Loading development environment (Rails 7.0.3)                                                      
3.0.0 :001 > Publisher.transaction do
3.0.0 :002 >   publisher = Publisher.lock.first
3.0.0 :003 >   publisher.name = "The Lioncrest"
3.0.0 :004 >   publisher.save!
3.0.0 :005 > end
  TRANSACTION (0.2ms)  BEGIN
  Publisher Load (1.1ms)  SELECT "publishers".* FROM "publishers" ORDER BY "publishers"."id" ASC LIMIT $1 FOR UPDATE  [["LIMIT", 1]]
  Publisher Update (0.5ms)  UPDATE "publishers" SET "name" = $1, "updated_at" = $2, "lock_version" = $3 WHERE "publishers"."id" = $4 AND "publishers"."lock_version" = $5  [["name", "The Lioncrest"], ["updated_at", "2022-06-13 10:08:28.408210"], ["lock_version", 4], ["id", 1], ["lock_version", 3]]    
  TRANSACTION (6.7ms)  COMMIT                                                                      
 => true                                                                                           
3.0.0 :006 > publisher.name
(irb):6:in `<main>': undefined local variable or method `publisher' for main:Object (NameError)
Did you mean?  public_send                                                                         
3.0.0 :007 > Publisher.first
  Publisher Load (0.5ms)  SELECT "publishers".* FROM "publishers" ORDER BY "publishers"."id" ASC LIMIT $1  [["LIMIT", 1]]
 => #<Publisher:0x000055c1e1706a90 id: 1, name: "The Lioncrest", created_at: Wed, 20 Oct 0010 00:00:00.000000000 UTC +00:00, updated_at: Mon, 13 Jun 2022 10:08:28.408210000 UTC +00:00, lock_version: 4> 

If you already have an instance of your model, you can start a transaction and acquire the lock in one go using the following code:

itsacheckmate@itscheckmate:~/Training/rails/book_collection$ rails c
Loading development environment (Rails 7.0.3)                                   
3.0.0 :001 > publisher = Publisher.first
  Publisher Load (0.3ms)  SELECT "publishers".* FROM "publishers" ORDER BY "publishers"."id" ASC LIMIT $1  [["LIMIT", 1]]
 => #<Publisher:0x00007f74349e7820 id: 1, name: "The Lioncrest", created_at: Wed, 20 Oct 0010 00:00:00.000000000 UTC +00:00, updated_at: Mon, 13 Jun 2022 10:08:28.408210000 UTC +00:00, lock_versio... 
3.0.0 :002 > publisher.with_lock do
3.0.0 :003 >   publisher.name = "Lioncrest"
3.0.0 :004 > end
  TRANSACTION (0.2ms)  BEGIN
  Publisher Load (0.4ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."id" = $1 LIMIT $2 FOR UPDATE  [["id", 1], ["LIMIT", 1]]
  TRANSACTION (6.7ms)  COMMIT                                      
 => "Lioncrest" 
 
 Dynamic Finders

For every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called first_name on your Customer model for example, you get the instance method find_by_first_name for free from Active Record. If you also have a locked field on the Customer model, you also get find_by_locked method.

You can specify an exclamation point (!) on the end of the dynamic finders to get them to raise an ActiveRecord::RecordNotFound error if they do not return any records, like Customer.find_by_name!("Ryan")

If you want to find both by first_name and orders_count, you can chain these finders together by simply typing "and" between the fields. For example, Customer.find_by_first_name_and_orders_count("Ryan", 5).

3.0.0 :017 > Author.find_by_name!("Ryan")
  Author Load (0.9ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "Ryan"], ["LIMIT", 1]]              
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/relation/finder_methods.rb:378:in `raise_record_not_found_exception!': Couldn't find Author with [WHERE "authors"."name" = $1] (ActiveRecord::RecordNotFound) 

3.0.0 :022 > Author.find_by_name_and_gender("David Goggins", "Male")
  Author Load (0.6ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1 AND "authors"."gender" = $2 LIMIT $3  [["name", "David Goggins"], ["gender", "Male"], ["LIMIT", 1]]             
 =>                                    
#<Author:0x000055ec7b424df8            
 id: 1,
 name: "David Goggins",
 dob: Tue, 05 May 1970,
 gender: "Male",
 country: "America",
 created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,
 updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,
 lock_version: 1,
 email_address: "david@gmail.com"> 


Find or Build a New Object

It's common that you need to find a record or create it if it doesn't exist. You can do that with the find_or_create_by and find_or_create_by! methods.

1 find_or_create_by

The find_or_create_by method checks whether a record with the specified attributes exists. If it doesn't, then create is called.

3.0.0 :023 > Author.find_or_create_by(name: "Dan Brown")
  Author Load (0.7ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "Dan Brown"], ["LIMIT", 1]]          
  TRANSACTION (0.1ms)  BEGIN                                   
  Author Create (7.5ms)  INSERT INTO "authors" ("name", "dob", "gender", "country", "created_at", "updated_at", "lock_version", "email_address") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["name", "Dan Brown"], ["dob", nil], ["gender", nil], ["country", nil], ["created_at", "2022-06-13 10:53:46.700881"], ["updated_at", "2022-06-13 10:53:46.700881"], ["lock_version", 0], ["email_address", nil]]                                                
  TRANSACTION (0.8ms)  COMMIT                                  
 =>                                                            
#<Author:0x000055ec7b91dcd8                                    
 id: 10018,                                                    
 name: "Dan Brown",                                            
 dob: nil,                                                     
 gender: nil,
 country: nil,
 created_at: Mon, 13 Jun 2022 10:53:46.700881000 UTC +00:00,
 updated_at: Mon, 13 Jun 2022 10:53:46.700881000 UTC +00:00,
 lock_version: 0,
 email_address: nil> 
3.0.0 :024 > 

find_or_create_by returns either the record that already exists or the new record.

Suppose we want to set the 'locked' attribute to false if we're creating a new record, but we don't want to include it in the query. So we want to find the customer named "Andy", or if that customer doesn't exist, create a customer named "Andy" which is not locked.

We can achieve this in two ways. The first is to use create_with:

3.0.0 :015 > Publisher.create_with(lock_version: false).find_or_create_by(name: "Penguin Random House")
  Publisher Load (0.6ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."name" = $1 LIMIT $2  [["name", "Penguin Random House"], ["LIMIT", 1]]
  TRANSACTION (0.3ms)  BEGIN                                     
  Publisher Create (7.8ms)  INSERT INTO "publishers" ("name", "created_at", "updated_at", "lock_version") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "Penguin Random House"], ["created_at", "2022-06-13 11:06:10.926594"], ["updated_at", "2022-06-13 11:06:10.926594"], ["lock_version", 0]]
  TRANSACTION (0.6ms)  COMMIT                                    
 =>                                                              
#<Publisher:0x000055c70eae6f20                                   
 id: 5,                                                          
 name: "Penguin Random House",                                   
 created_at: Mon, 13 Jun 2022 11:06:10.926594000 UTC +00:00,     
 updated_at: Mon, 13 Jun 2022 11:06:10.926594000 UTC +00:00,     
 lock_version: 0>    
 
 3.0.0 :022 > Publisher.find_or_create_by(name: "Jon Doe") do |name|
3.0.0 :023 >   name.lock_version = false
3.0.0 :024 > end
  Publisher Load (0.3ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."name" = $1 LIMIT $2  [["name", "Jon Doe"], ["LIMIT", 1]]
 => #<Publisher:0x00007f4a4ca9bb98 id: 6, name: "Jon Doe", created_at: Mon, 13 Jun 2022 11:18:45.595332000 UTC +00:00, updated_at: Mon, 13 Jun 2022 11:18:45.595332000 UTC +00:00, lock_version: 0> 


2 find_or_create_by!
You can also use find_or_create_by! to raise an exception if the new record is invalid. 
  Author Load (2.1ms)  SELECT "authors".* FROM "authors" WHERE "authors"."dob" = $1 LIMIT $2  [["dob", "1230-04-09"], ["LIMIT", 1]]
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Name can't be blank (ActiveRecord::RecordInvalid)

3.19.3 find_or_initialize_by

The find_or_initialize_by method will work just like find_or_create_by but it will call new instead of create. This means that a new model instance will be created in memory but won't be saved to the database.
3.0.0 :005 > Author.find_or_initialize_by(name: "William Shakespeare")
  Author Load (0.2ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1 LIMIT $2  [["name", "William Shakespeare"], ["LIMIT", 1]]
 => #<Author:0x000055ec06ea5d38 id: nil, name: "William Shakespeare", dob: nil, gender: nil, country: nil, created_at: nil, updated_at: nil, lock_version: 0, email_address: nil> 

3.0.0 :012 > William_Shakespeare.persisted?
 => false 
3.0.0 :013 > William_Shakespeare.new_record?
 => true 

 Finding by SQL

If you'd like to use your own SQL to find records in a table you can use find_by_sql. The find_by_sql method will return an array of objects even if the underlying query returns just a single record.
3.0.0 :028 > Author.find_by_sql("SELECT * FROM authors inner join books on aut
hors.id = books.author_id")
  Author Load (1.7ms)  SELECT * FROM authors inner join books on authors.id = books.author_id                                                               
 =>                                                                           
[#<Author:0x000055ec06c44648                                                  
  id: 16,                                                                     
  name: "Stephen King",                                                       
  dob: Sun, 21 Sep 1947,                                                      
  gender: "Male",                                                             
  country: "UK",                                                              
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,                 
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,                 
  lock_version: 0,                                                            
  email_address: "stephen@gmail.com">,                                        
 #<Author:0x000055ec06c44580                                                  
  id: 17,                                                                
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">,
 #<Author:0x000055ec06c444b8
  id: 14,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 

1 select_all

find_by_sql has a close relative called connection.select_all. select_all will retrieve objects from the database using custom SQL just like find_by_sql but will not instantiate them. This method will return an instance of ActiveRecord::Result class and calling to_a on this object would return you an array of hashes where each hash indicates a record.

3.0.0 :109 > Author.connection.select_all("SELECT name,created_at from authors where id = '1'").to_a
   (0.7ms)  SELECT name,created_at from authors where id = '1'
 => [{"name"=>"David Goggins", "created_at"=>2022-05-25 11:47:49.986085 UTC}]                               
3.0.0 :110 > 

2 pluck

pluck can be used to query single or multiple columns from the underlying table of a model. It accepts a list of column names as an argument and returns an array of values of the specified columns with the corresponding data type.

3.0.0 :113 > Book.where(price: 523).pluck(:id)
  Book Pluck (0.4ms)  SELECT "books"."id" FROM "books" WHERE "books"."price" = $1  [["price", 523]]                                                     
 => [12, 14] 
 
 3.0.0 :114 > Book.distinct.pluck(:title)
  Book Pluck (1.1ms)  SELECT DISTINCT "books"."title" FROM "books"
 =>                                                                         
[nil,                                                                       
 "The Shining",                                                             
 "3242334",                                                                 
 "Harry Potter",                                                            
 "",                                                                        
 "Rich Dad Poor Dad",                                                       
 "Firestarter",                                                             
 "IT",                                                                      
 "1234"]
 
 3.0.0 :116 > Book.pluck(:id, :price)
  Book Pluck (0.7ms)  SELECT "books"."id", "books"."price" FROM "books"
 =>                                                                         
[[6, nil],                                                                  
 [7, nil],                                                                  
 [8, nil],                                                                  
 [9, nil],                                                                  
 [12, 523],                                                                 
 [16, 420],                                                                 
 [17, 501],                                                                 
 [5, 499],                                                                  
 [14, 523]]  
 
 Unlike select, pluck directly converts a database result into a Ruby Array, without constructing ActiveRecord objects. This can mean better performance for a large or frequently-run query. However, any model method overrides will not be available. For example:
 
 class Customer < ApplicationRecord
  def name
    "I am #{first_name}"
  end
end

irb> Customer.select(:first_name).map &:name
=> ["I am David", "I am Jeremy", "I am Jose"]

irb> Customer.pluck(:first_name)
=> ["David", "Jeremy", "Jose"]

Furthermore, unlike select and other Relation scopes, pluck triggers an immediate query, and thus cannot be chained with any further scopes, although it can work with scopes already constructed earlier:

3.0.0 :129 > Book.limit(1).pluck(:title)
  Book Pluck (0.7ms)  SELECT "books"."title" FROM "books" LIMIT $1  [["LIMIT", 1]]                                                                      
 => ["1234"] 
 
 3.0.0 :134 > assoc = Author.includes(:books)
  Author Load (7.1ms)  SELECT "authors".* FROM "authors"

3.0.0 :139 > assoc.unscope(:includes).pluck(:id)

3 ids
ids can be used to pluck all the IDs for the relation using the table's primary key.

3.0.0 :140 > Book.ids
  Book Pluck (0.7ms)  SELECT "books"."id" FROM "books"
 => [6, 7, 8, 9, 12, 16, 17, 5, 14] 
 
Joining Tables

Active Record provides two finder methods for specifying JOIN clauses on the resulting SQL: joins and left_outer_joins. While joins should be used for INNER JOIN or custom queries, left_outer_joins is used for queries using LEFT OUTER JOIN.

1 Using a String SQL Fragment
You can just supply the raw SQL specifying the JOIN clause to joins:
Loading development environment (Rails 7.0.3)               
3.0.0 :001 > Author.joins("INNER JOIN books ON books.author_id = authors.id
")
  Author Load (0.4ms)  SELECT "authors".* FROM "authors" INNER JOIN books ON books.author_id = authors.id                                             
 =>                                                                        
[#<Author:0x000055dd41bebaa8                                               
  id: 10017,                                                               
  name: "Stephen King",                                                    
  dob: Sun, 21 Sep 1947,                                                   
  gender: "Male",                                                          
  country: "UK",                                                           
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,              
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,              
  lock_version: 0,                                                         
  email_address: "stephen@gmail.com">,                                     
 #<Author:0x000055dd41b89e98                                               
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">,
 #<Author:0x000055dd41b89dd0
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 

find_in_batches

The find_in_batches method is similar to find_each, since both retrieve batches of records. The difference is that find_in_batches yields batches to the block as an array of models, instead of individually. 

3.0.0 :005 > Book.find_in_batches do |book| 
3.0.0 :006 >   print book.size
3.0.0 :007 > end
  Book Load (0.7ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 1000]]                                            9 => nil 
  
  Options for find_in_batches

The find_in_batches method accepts the same options as find_each:

:batch_size

.0.0 :011 > Book.find_in_batches(batch_size:5) do |book|
3.0.0 :012 >   book.size
3.0.0 :013 > end
  Book Load (0.3ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 5]]
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."id" > $1 ORDER BY "books"."id" ASC LIMIT $2  [["id", 9], ["LIMIT", 5]]
 => nil       
 
 :start

The start option allows specifying the beginning ID from where records will be selected. As mentioned before, by default records are fetched in ascending order of the primary key. 

3.0.0 :011 > Book.find_in_batches(batch_size:5) do |book|
3.0.0 :012 >   book.size
3.0.0 :013 > end
  Book Load (0.3ms)  SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT $1  [["LIMIT", 5]]
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."id" > $1 ORDER BY "books"."id" ASC LIMIT $2  [["id", 9], ["LIMIT", 5]]
 => nil                                                                   
3.0.0 :014 > Author.find_in_batches(batch_size: 2500, start:5000) do
3.0.0 :015 >   |authors|
3.0.0 :016 >   authors.size
3.0.0 :017 > end
  Author Load (11.7ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" >= $1 ORDER BY "authors"."id" ASC LIMIT $2  [["id", 5000], ["LIMIT", 2500]]
  Author Load (1.3ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" >= $1 AND "authors"."id" > $2 ORDER BY "authors"."id" ASC LIMIT $3  [["id", 5000], ["id", 7499], ["LIMIT", 2500]]
  Author Load (0.3ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" >= $1 AND "authors"."id" > $2 ORDER BY "authors"."id" ASC LIMIT $3  [["id", 5000], ["id", 9999], ["LIMIT", 2500]]

3.0.0 :018 > Author.find_in_batches(finish:10) do |authors|
3.0.0 :019 >   authors.size
3.0.0 :020 > end
  Author Load (0.5ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" <= $1 ORDER BY "authors"."id" ASC LIMIT $2  [["id", 10], ["LIMIT", 1000]]
 => nil                                                                          
3.0.0 :0

:error_on_ignore

The error_on_ignore option overrides the application config to specify if an error should be raised when a specific order is present in the relation.

Running EXPLAIN

You can run explain on a relation. EXPLAIN output varies for each database.
3.0.0 :003 > Author.where(id: 10017).joins(:books).explain
  Author Load (0.8ms)  SELECT "authors".* FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id" WHERE "authors"."id" = $1  [["id", 10017]]          
 =>                                                           
EXPLAIN for: SELECT "authors".* FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id" WHERE "authors"."id" = $1 [["id", 10017]]                     
                                    QUERY PLAN                
-----------------------------------------------------------------------------------
 Nested Loop  (cost=0.29..9.43 rows=1 width=89)               
   ->  Index Scan using authors_pkey on authors  (cost=0.29..8.30 rows=1 width=89)
         Index Cond: (id = '10017'::bigint)                   
   ->  Seq Scan on books  (cost=0.00..1.11 rows=1 width=4)    
         Filter: (author_id = '10017'::bigint)                
(5 rows)                                                      
         
         
           Author Load (0.6ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1  [["id", 10017]]
  Book Load (0.3ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 =>                                                                                           
EXPLAIN for: SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 [["id", 10017]]      
                                 QUERY PLAN                                                   
-----------------------------------------------------------------------------                 
 Index Scan using authors_pkey on authors  (cost=0.29..8.30 rows=1 width=89)                  
   Index Cond: (id = '10017'::bigint)                                                         
(2 rows)                                                                                      
                                                                                              
EXPLAIN for: SELECT "books".* FROM "books" WHERE "books"."author_id" = $1 [["author_id", 10017]]
                      QUERY PLAN                                                              
------------------------------------------------------                                        
 Seq Scan on books  (cost=0.00..1.11 rows=1 width=84)                                         
   Filter: (author_id = 10017)                                                                
(2 rows)
 


Conditions

1.Array Conditions
[#<Book:0x000055cce83b70f8                                  
  id: 12,                                                   
  title: "IT",                                              
  total_page: 235,                                          
  rating: 4.5,                                              
  price: 523,                                               
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,
  date_published: Fri, 22 Jan 1999,                         
  publisher_id: nil,                                        
  author_id: nil>,                                          
 #<Book:0x000055cce83b7030                                  
  id: 17,                                                   
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 501,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cce83b6f68
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 523,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>] 
3.0.0 :006 > 


So based on above condition can also give multiple condition
3.0.0 :006 > Book.where("price > ? or title = ?", 500, "The Shining")
  Book Load (0.9ms)  SELECT "books".* FROM "books" WHERE (price > 500 or title = 'The Shining')
 =>                                                                           
[#<Book:0x000055cce7e3a990                                                    
  id: 12,                                                                     
  title: "IT",                                                                
  total_page: 235,                                                            
  rating: 4.5,                                                                
  price: 523,                                                                 
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                 
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                 
  date_published: Fri, 22 Jan 1999,                                           
  publisher_id: nil,                                                          
  author_id: nil>,                                                            
 #<Book:0x000055cce7e3a8c8                                                    
  id: 17,                                                                     
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 501,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cce7e3a800
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 523,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>] 

 The method below used should not be used in project as it makes system vunerable to sql injection.
  As Putting the variable directly into the conditions string will pass the variable to the database as-is.
  3.0.0 :007 > price = 10000
 => 10000 
3.0.0 :008 > Book.where("price < #{price}")
  Book Load (0.8ms)  SELECT "books".* FROM "books" WHERE (price < 10000)
 =>                                                                           
[#<Book:0x000055cce7f4c270                                                    
  id: 12,                                                                     
  title: "IT",                                                                
  total_page: 235,                                                            
  rating: 4.5,                                                                
  price: 523,                                                                 
  created_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                 
  updated_at: Fri, 03 Jun 2022 17:35:14.755240000 UTC +00:00,                 
  date_published: Fri, 22 Jan 1999,                                           
  publisher_id: nil,                                                          
  author_id: nil>,                                                            
 #<Book:0x000055cce7f4c1a8                                                    
  id: 16,                                                                     
  title: "Harry Potter",
  total_page: 342,
  rating: 4.7,
  price: 420,
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
  date_published: Sun, 03 Jan 2010,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cce7f4c0e0
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 501,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cce7f4c018
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 523,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 12:51:07.633126000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055cce7f47f18
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 499,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: 1>] 

1 Placeholder Conditions
The above method used is the (?) replacement style of params .
This can also be done using specifing keys in condition string along with corresponding key value pair.
This makes for clearer readability if you have a large number of variable conditions.

3.0.0 :020 > Book.where("price >:price_min", price_min:price) 
  Book Load (0.5ms)  SELECT "books".* FROM "books" WHERE (price >10000)
 =>                                                         
[#<Book:0x000055cce83ae6d8                                  
  id: 14,                                                   
  title: "The Shining",                                     
  total_page: 235,                                          
  rating: 4.5,                                    
  price: 10001,                                   
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 15:10:14.461971000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,               
  publisher_id: 1,                                
  author_id: 10017>]    
  
 2 Conditions That Use LIKE
 Using the like condition as in used in sql statement. 
 Although condition arguments are automatically escaped to prevent SQL injection, SQL LIKE wildcards (i.e., % and _) are not escaped.
 3.0.0 :021 > Author.where("name like ?","D"+ "%")
  Author Load (2.9ms)  SELECT "authors".* FROM "authors" WHERE (name like 'D%')
 =>                                                                                 
[#<Author:0x00007fef304f1d80                                                        
  id: 1,                                                                            
  name: "David Goggins",                                                            
  dob: Tue, 05 May 1970,                                                            
  gender: "Male",                                                                   
  country: "America",                                                               
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,                       
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,                       
  lock_version: 1,                                                                  
  email_address: "david@gmail.com">,                                                
 #<Author:0x00007fef304f1cb8                                                        
  id: 10018,                                                                        
  name: "Dan Brown",                                                                
  dob: nil,
  gender: nil,
  country: nil,
  created_at: Mon, 13 Jun 2022 10:53:46.700881000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 10:53:46.700881000 UTC +00:00,
  lock_version: 0,
  email_address: nil>] 
3.0.0 :022 > 

he intent is to match titles that start with a user-specified string. However, any occurrences of % or _ in params[:title] will be treated as wildcards, leading to surprising query results. In some circumstances, this may also prevent the database from using an intended index, leading to a much slower query.

To avoid these problems, use sanitize_sql_like to escape wildcard characters in the relevant portion of the argument:

3.0.0 :025 > Author.where("name like ?",Author.sanitize_sql_like("A%"))
  Author Load (0.5ms)  SELECT "authors".* FROM "authors" WHERE (name like 'A\%')
 => []
 
 Hash - Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. With hash conditions, you pass in a hash with keys of the fields you want qualified and the values of how you want to qualify them:
 3.0.0 :002 > Author.where(id: true)
  Author Load (2.3ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1  [["id", 1]]                                               
 =>                                                           
[#<Author:0x00007f5e6c258970                                  
  id: 1,                                                      
  name: "David Goggins",                                      
  dob: Tue, 05 May 1970,                                      
  gender: "Male",                                             
  country: "America",                                         
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00, 
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00, 
  lock_version: 1,                                            
  email_address: "david@gmail.com">] 
  
  3.0.0 :003 > Author.where(name: true)
  Author Load (7.2ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1  [["name", "t"]]                                   
 => []   
 The field name can also be a string:


3.0.0 :004 > Author.where("name" => true)
  Author Load (0.5ms)  SELECT "authors".* FROM "authors" WHERE "authors"."name" = $1  [["name", "t"]]                                         
 => []       
 3.0.0 :005 > a = Author.where(id: true)
  Author Load (0.7ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1  [["id", 1]]                                                   
 =>                                                               
[#<Author:0x000055e9f89cb430                                      
...     

3.0.0 :006 > Book.where(author: a)
  Book Load (7.9ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" IN (SELECT "authors"."id" FROM "authors" WHERE "authors"."id" = $1)  [["id", 1]]
 =>                                                               
[#<Book:0x000055e9f91bb500                                        
  id: 5,                                                          
  title: "Rich Dad Poor Dad",                                     
  total_page: 300,                                                
  rating: nil,                                                    
  price: 499,                                                     
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00, 
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00, 
  date_published: Fri, 08 May 2015,                           
  publisher_id: 2,                                            
  author_id: 1>]  
  
  3.0.0 :007 > Book.where(author_id: a)
  Book Load (1.0ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" IN (SELECT "authors"."id" FROM "authors" WHERE "authors"."id" = $1)  [["id", 1]]
 => 
[#<Book:0x000055e9f93cd140
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 499,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: 1>] 
  
 Range Conditions
 3.0.0 :008 > Book.where(price: 100..500)
  Book Load (0.6ms)  SELECT "books".* FROM "books" WHERE "books"."price" BETWEEN $1 AND $2  [["price", 100], ["price", 500]]                                    
 =>                                                                             
[#<Book:0x000055e9f94b7998                                                      
  id: 16,                                                                       
  title: "Harry Potter",                                                        
  total_page: 342,                                                              
  rating: 4.7,                                                                  
  price: 420,                                                                   
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,                   
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,                   
  date_published: Sun, 03 Jan 2010,                                             
  publisher_id: nil,                                                            
  author_id: 10017>,                                                            
 #<Book:0x000055e9f94b78d0                                                      
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 499,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: 1>] 
  
  3.3.3 Subset Conditions

If you want to find records using the IN expression you can pass an array to the conditions hash:

3.0.0 :009 > Book.where(id: [1,5,14])
  Book Load (1.0ms)  SELECT "books".* FROM "books" WHERE "books"."id" IN ($1, $2, $3)  [["id", 1], ["id", 5], ["id", 14]]                   
 =>                                                         
[#<Book:0x00007f5e6c253f10                                  
  id: 5,                                                    
  title: "Rich Dad Poor Dad",                               
  total_page: 300,                                          
  rating: nil,                                              
  price: 499,                                               
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
  date_published: Fri, 08 May 2015,                         
  publisher_id: 2,                                          
  author_id: 1>,                                            
 #<Book:0x00007f5e6c253d08                                  
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 10001,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 15:10:14.461971000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: 1,
  author_id: 10017>] 

NOT Conditions

NOT SQL queries can be built by where.not:
3.0.0 :010 > Book.where.not(price: [200,100,523])
  Book Load (0.9ms)  SELECT "books".* FROM "books" WHERE "books"."price" NOT IN ($1, $2, $3)  [["price", 200], ["price", 100], ["price", 523]]                  
 =>                                                                             
[#<Book:0x000055e9f8725320                                                      
  id: 16,                                                                       
  title: "Harry Potter",                                                        
  total_page: 342,                                                              
  rating: 4.7,                                                                  
  price: 420,                                                                   
  created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,                   
  updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,                   
  date_published: Sun, 03 Jan 2010,                                             
  publisher_id: nil,                                                            
  author_id: 10017>,                                                            
 #<Book:0x000055e9f8725258                                                      
  id: 17,
  title: "Firestarter",
  total_page: 400,
  rating: 3.9,
  price: 501,
  created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
  date_published: Sun, 02 May 1999,
  publisher_id: nil,
  author_id: 10017>,
 #<Book:0x000055e9f8725190
  id: 5,
  title: "Rich Dad Poor Dad",
  total_page: 300,
  rating: nil,
  price: 499,
  created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
  date_published: Fri, 08 May 2015,
  publisher_id: 2,
  author_id: 1>,
 #<Book:0x000055e9f87250c8
  id: 14,
  title: "The Shining",
  total_page: 235,
  rating: 4.5,
  price: 10001,
  created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
  updated_at: Mon, 13 Jun 2022 15:10:14.461971000 UTC +00:00,
  date_published: Thu, 22 Jun 2000,
  publisher_id: 1,
  author_id: 10017>] 

OR Conditions

OR conditions between two relations can be built by calling or on the first relation, and passing the second one as an argument.

3.0.0 :059 > Author.where(id: 1) or (Author.where(dob: "1990/05/11"))
  Author Load (0.4ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1  [["id", 1]]                                                                 
 =>                                                                             
[#<Author:0x000055e9f7b1b5c0                                                    
  id: 1,                                                                        
  name: "David Goggins",                                                        
  dob: Tue, 05 May 1970,                                                        
  gender: "Male",                                                               
  country: "America",                                                           
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,                   
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,                   
  lock_version: 1,                                                              
  email_address: "david@gmail.com">]                                            
3.0.0 :060 > 
                            
AND Conditions
  AND conditions can be built by chaining where conditions.
 3.0.0 :060 > Author.where(id: 10017).where(name: "Stephen King")
  Author Load (0.7ms)  SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 AND "authors"."name" = $2  [["id", 10017], ["name", "Stephen King"]]         
 =>                                                                             
[#<Author:0x00007f5e6c110590                                                    
  id: 10017,                                                                    
  name: "Stephen King",                                                         
  dob: Sun, 21 Sep 1947,                                                        
  gender: "Male",                                                               
  country: "UK",                                                                
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                   
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                   
  lock_version: 0,                                                              
  email_address: "stephen@gmail.com">] 
  
 Eager loading -
 Eager loading is the mechanism for loading the associated records of the objects returned by Model.find using as few queries as possible.

N + 1 queries problem

1.includes - With includes, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

Loading development environment (Rails 7.0.3)
3.0.0 :001 > Author.includes(:books).limit 2
  Author Load (1.0ms)  SELECT "authors".* FROM "authors" LIMIT $1  [["LIMIT", 2]]                                                                               
  Book Load (0.5ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" IN ($1, $2)  [["author_id", 2], ["author_id", 3]]                                  
 =>                                                                             
[#<Author:0x00005599f1dc1938                                                    
  id: 2,                                                                        
  name: "Customer 0",                                                           
  dob: Wed, 25 May 2022,                                                        
  gender: nil,                                                                  
  country: nil,                                                                 
  created_at: Wed, 25 May 2022 13:36:45.232174000 UTC +00:00,                   
  updated_at: Wed, 25 May 2022 13:36:45.232174000 UTC +00:00,                   
  lock_version: 0,                                                              
  email_address: nil>,                                                          
 #<Author:0x00005599f1e1bca8
  id: 3,
  name: "Customer 1",
  dob: Wed, 25 May 2022,
  gender: nil,
  country: nil,
  created_at: Wed, 25 May 2022 13:36:45.234744000 UTC +00:00,
  updated_at: Wed, 25 May 2022 13:36:45.234744000 UTC +00:00,
  lock_version: 0,
  email_address: nil>] 
3.0.0 :002 > 

Eager Loading Multiple Associations

Active Record lets you eager load any number of associations with a single Model.find call by using an array, hash, or a nested hash of array/hash with the includes method.

3.0.0 :007 > Author.includes(:books, :publishers)
This loads all the customers and the associated orders and reviews for each.

Specifying Conditions on Eager Loaded Associations

Even though Active Record lets you specify conditions on the eager loaded associations just like joins, the recommended way is to use joins instead.
However if you must do this, you may use where as you would normally.

3.0.0 :010 > Author.includes(:books).where(authors: { dob: "1947/09/21"})
  Author Load (0.9ms)  SELECT "authors".* FROM "authors" WHERE "authors"."dob" = $1  [["dob", "1947-09-21"]]
  Book Load (0.1ms)  SELECT "books".* FROM "books" WHERE "books"."author_id" = $1  [["author_id", 10017]]
 => 
[#<Author:0x000055eae732b3d8
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 
3.0.0 :011 > 

[#<Author:0x000055eae7ab4b18
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 
3.0.0 :013 > Author.includes(:books).where("authors.dob='1947/08/21'").reference
s(:books)
  SQL (1.0ms)  SELECT "authors"."id" AS t0_r0, "authors"."name" AS t0_r1, "authors"."dob" AS t0_r2, "authors"."gender" AS t0_r3, "authors"."country" AS t0_r4, "authors"."created_at" AS t0_r5, "authors"."updated_at" AS t0_r6, "authors"."lock_version" AS t0_r7, "authors"."email_address" AS t0_r8, "books"."id" AS t1_r0, "books"."title" AS t1_r1, "books"."total_page" AS t1_r2, "books"."rating" AS t1_r3, "books"."price" AS t1_r4, "books"."created_at" AS t1_r5, "books"."updated_at" AS t1_r6, "books"."date_published" AS t1_r7, "books"."publisher_id" AS t1_r8, "books"."author_id" AS t1_r9 FROM "authors" LEFT OUTER JOIN "books" ON "books"."author_id" = "
  
  
  .2 preload

With preload, Active Record loads each specified association using one query per association.

Revisiting the N + 1 queries problem, we could rewrite Book.limit(10) to preload authors:
3.0.0 :016 > books = Book.preload(:author).limit(2)
  Book Load (0.6ms)  SELECT "books".* FROM "books" LIMIT $1  [["LIMIT", 2]]
 => 
[#<Book:0x000055eae14cc328
... 

3 eager_load

With eager_load, Active Record loads all specified associations using a LEFT OUTER JOIN.

3.0.0 :037 > Author.joins(:books).eager_load(:books)
  SQL (0.4ms)  SELECT "authors"."id" AS t0_r0, "authors"."name" AS t0_r1, "authors"."dob" AS t0_r2, "authors"."gender" AS t0_r3, "authors"."country" AS t0_r4, "authors"."created_at" AS t0_r5, "authors"."updated_at" AS t0_r6, "authors"."lock_version" AS t0_r7, "authors"."email_address" AS t0_r8, "books"."id" AS t1_r0, "books"."title" AS t1_r1, "books"."total_page" AS t1_r2, "books"."rating" AS t1_r3, "books"."price" AS t1_r4, "books"."created_at" AS t1_r5, "books"."updated_at" AS t1_r6, "books"."date_published" AS t1_r7, "books"."publisher_id" AS t1_r8, "books"."author_id" AS t1_r9 FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id"
 =>                                                                                              
[#<Author:0x00007f39081ad1f8                                                                     
  id: 10017,                                                                                     
  name: "Stephen King",                                                                          
  dob: Sun, 21 Sep 1947,                                                                         
  gender: "Male",                                                                                
  country: "UK",                                                                                 
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                              
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                              
  lock_version: 0,                                                                         
  email_address: "stephen@gmail.com">,                                                     
 #<Author:0x00007f39081ac2a8
  id: 1,
  name: "David Goggins",
  dob: Tue, 05 May 1970,
  gender: "Male",
  country: "America",
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,
  lock_version: 1,
  email_address: "david@gmail.com">] 

 Joining Tables

Active Record provides two finder methods for specifying JOIN clauses on the resulting SQL: joins and left_outer_joins. While joins should be used for INNER JOIN or custom queries, left_outer_joins is used for queries using LEFT OUTER JOIN.
13.1 joins

There are multiple ways to use the joins method.
3.0.0 :057 > Author.joins("Inner join books on authors.id = books.author_id")
3.0.0 :058 >   
  Author Load (1.1ms)  SELECT "authors".* FROM "authors" Inner join books on authors.id = books.author_id                                                       
 =>                                                             
[#<Author:0x00007f39085116a0                                    
  id: 10017,                                                    
  name: "Stephen King",                                         
  dob: Sun, 21 Sep 1947,                                        
  gender: "Male",                                               
  country: "UK",                                                
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">,
 #<Author:0x00007f39085115d8
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">,
 #<Author:0x00007f3908511510
  id: 1,
  name: "David Goggins",
  dob: Tue, 05 May 1970,
  gender: "Male",
  country: "America",
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,
  lock_version: 1,
  email_address: "david@gmail.com">,
 #<Author:0x00007f3908511448
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 
3.0.0 :059 > 


2 Using Array/Hash of Named Associations
    use the names of the associations defined on the model as a shortcut for specifying JOIN clauses for those associations when using the joins method
    
3.0.0 :059 > Author.joins(:books).distinct
  Author Load (0.8ms)  SELECT DISTINCT "authors".* FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id"                                    
 =>                                                                             
[#<Author:0x000055e5143783f0                                                    
  id: 1,                                                                        
  name: "David Goggins",                                                        
  dob: Tue, 05 May 1970,                                                        
  gender: "Male",                                                               
  country: "America",                                                           
  created_at: Wed, 25 May 2022 11:47:49.986085000 UTC +00:00,                   
  updated_at: Tue, 31 May 2022 13:28:25.048096000 UTC +00:00,                   
  lock_version: 1,                                                              
  email_address: "david@gmail.com">,                                            
 #<Author:0x000055e514378328                                                    
  id: 10017,                                                                    
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 

3.
  3 Joining Multiple Associations
  
  3.0.0 :060 > Author.joins(:books, :publishers)
  Author Load (1.1ms)  SELECT "authors".* FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id" INNER JOIN "publishers" ON "publishers"."author_id" = "authors"."id"                                                        
 =>                                                                             
[#<Author:0x000055e5146354a8                                                    
  id: 10017,                                                                    
  name: "Stephen King",                                                         
  dob: Sun, 21 Sep 1947,                                                        
  gender: "Male",                                                               
  country: "UK",                                                                
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                   
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,                   
  lock_version: 0,                                                              
  email_address: "stephen@gmail.com">,                                          
 #<Author:0x000055e514635390                                                    
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">,
 #<Author:0x000055e514635278
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 

left_outer_joins  

If you want to select a set of records whether or not they have associated records you can use the left_outer_joins method.

.3.0.0 :004 > Customer.left_outer_joins(:room_hotel)
  Customer Load (3.6ms)  SELECT "customers".* FROM "customers" LEFT OUTER JOIN "room_hotels" ON "room_hotels"."customer_id" = "customers"."id"
 =>                                                  
[#<Customer:0x00005613f1126be0                       
  id: 1,                                             
  name: "Jaskaran Singh",                            
  address: "#Sector 20-A Chandigarh",                
  gender: "Male",                                    
  mobile: "9876573100",                              
  check_in: Sun, 01 May 2022,                        
  check_out: Tue, 10 May 2022,                       
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",                                  
  email: nil>,                                       
 #<Customer:0x00005613f0a97f18
  id: 2,
  name: "Sam Sharma",
  address: "Sector 30,Mumbai",
  gender: "Male",
  mobile: "21313241",
  check_in: Wed, 11 May 2022,
  check_out: Sun, 22 May 2022,
  created_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  updated_at: Tue, 24 May 2022 12:49:28.509835000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00005613f0a97c98
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  check_in: Sun, 01 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00005613f0a97b58
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  check_in: Sun, 01 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00005613f0a95dd0
  id: 1,
  name: "Jaskaran Singh",
  address: "#Sector 20-A Chandigarh",
  gender: "Male",
  mobile: "9876573100",
  check_in: Sun, 01 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Mon, 23 May 2022 10:03:11.423908000 UTC +00:00,
  updated_at: Mon, 23 May 2022 10:05:42.660282000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00005613f0a95ba0
  id: 20,
  name: "Customer Name 8",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.134360000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a95858
  id: 27,
  name: "John Doe",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  updated_at: Fri, 27 May 2022 10:14:19.192182000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a95510
  id: 17,
  name: "Customer Name 5",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130879000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a95380
  id: 31,
  name: "Sam",
  address: "Faridabad",
  gender: nil,
  mobile: "9876573100",
  check_in: Tue, 10 May 2022,
  check_out: Sat, 14 May 2022,
  created_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  updated_at: Tue, 31 May 2022 10:57:14.180986000 UTC +00:00,
  country: "India",
  email: nil>,
 #<Customer:0x00005613f0a951a0
  id: 18,
  name: "Customer Name 6",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.132452000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a95010
  id: 15,
  name: "Customer Name 3",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.129388000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a94f20
  id: 13,
  name: "Henry Cavill",
  address: "Sector 14",
  gender: "Male",
  mobile: "1234567890",
  check_in: Sat, 11 Jun 2022,
  check_out: Mon, 13 Jun 2022,
  created_at: Tue, 24 May 2022 17:16:06.127119000 UTC +00:00,
  updated_at: Fri, 10 Jun 2022 11:15:14.362509000 UTC +00:00,
  country: "America",
  email: "henry@gmail.com">,
 #<Customer:0x00005613f0a94e08
  id: 21,
  name: "Customer Name 9",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.135231000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a94cf0
  id: 19,
  name: "Customer Name 7",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.133470000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a94c00
  id: 32,
  name: "Uchiha",
  address: "chd",
  gender: nil,
  mobile: "9876573100",
  check_in: Thu, 05 May 2022,
  check_out: Tue, 10 May 2022,
  created_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:50:22.377050000 UTC +00:00,
  country: "india",
  email: nil>,
 #<Customer:0x00005613f0a94ae8
  id: 16,
  name: "Customer Name 4",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.130147000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a949d0
  id: 22,
  name: "Customer Name 10",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.136111000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a948e0
  id: 14,
  name: "Customer Name 2",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  updated_at: Tue, 24 May 2022 17:16:06.128563000 UTC +00:00,
  country: nil,
  email: nil>,
 #<Customer:0x00005613f0a947a0
  id: 35,
  name: "Jas",
  address: nil,
  gender: nil,
  mobile: nil,
  check_in: nil,
  check_out: nil,
  created_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  updated_at: Tue, 31 May 2022 12:58:41.611610000 UTC +00:00,
  country: nil,
  email: nil>] 

  Understanding Method Chaining

The Active Record pattern implements Method Chaining, which allow us to use multiple Active Record methods together in a simple and straightforward way.
You can chain methods in a statement when the previous method called returns an ActiveRecord::Relation, like all, where, and joins. Methods that return a single object (see Retrieving a Single Object Section) have to be at the end of the statement.
There are some examples below. This guide won't cover all the possibilities, just a few as examples. When an Active Record method is called, the query is not immediately generated and sent to the database. The query is sent only when the data is actually needed. So each example below generates a single query.
3.0.0 :074 > Author.select('authors.name').joins(:books).where('books.price > 10
0')
  Author Load (0.5ms)  SELECT "authors"."name" FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id" WHERE (books.price > 100)
 => 
[#<Author:0x000055e51944f620 id: nil, name: "Stephen King">,
 #<Author:0x000055e51944f4e0 id: nil, name: "Stephen King">,
 #<Author:0x000055e51944f418 id: nil, name: "David Goggins">,
 #<Author:0x000055e51944f350 id: nil, name: "Stephen King">] 
3.0.0 :075 > 

Retrieving specific data from multiple tables
3.0.0 :082 > Author.select("authors.id, authors.name,authors.dob").joins(:books).find(10017)
  Author Load (0.5ms)  SELECT authors.id, authors.name,authors.dob FROM "authors" INNER JOIN "books" ON "books"."author_id" = "authors"."id" WHERE "authors"."id" = $1 LIMIT $2  [["id", 10017], ["LIMIT", 1]]
 => #<Author:0x000055e515d874d0 id: 10017, name: "Stephen King", dob: Sun, 21 Sep 1947> 


extract_Associated - 
[],
 [],
 [],
 [],
 [],
 [],
 [],
 [#<Book:0x00005651e69276e0
   id: 5,
   title: "Rich Dad Poor Dad",
   total_page: 300,
   rating: nil,
   price: 499,
   created_at: Wed, 25 May 2022 18:30:27.231538000 UTC +00:00,
   updated_at: Mon, 13 Jun 2022 13:37:26.987371000 UTC +00:00,
   date_published: Fri, 08 May 2015,
   publisher_id: 2,
   author_id: 1>],
 [],
 [],
 [],
 [],
 [#<Book:0x00005651e672e050
   id: 16,
   title: "Harry Potter",
   total_page: 342,
   rating: 4.7,
   price: 420,
   created_at: Tue, 07 Jun 2022 14:17:24.855374000 UTC +00:00,
   updated_at: Wed, 08 Jun 2022 08:08:28.440667000 UTC +00:00,
   date_published: Sun, 03 Jan 2010,
   publisher_id: nil,
   author_id: 10017>,
  #<Book:0x00005651e69279b0
   id: 17,
   title: "Firestarter",
   total_page: 400,
   rating: 3.9,
   price: 501,
   created_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
   updated_at: Wed, 08 Jun 2022 08:37:17.462921000 UTC +00:00,
   date_published: Sun, 02 May 1999,
   publisher_id: nil,
   
  #<Book:0x00005651e6927410
   id: 14,
   title: "The Shining",
   total_page: 235,
   rating: 4.5,
   price: 10001,
   created_at: Fri, 03 Jun 2022 17:38:43.865831000 UTC +00:00,
   updated_at: Mon, 13 Jun 2022 15:10:14.461971000 UTC +00:00,
   date_published: Thu, 22 Jun 2000,
   publisher_id: 1,
   author_id: 10017>],
 [],
 [],
 []] 

 from(value, subquery_name = nil)
Specifies the table from which the records will be fetched. For example:

3.0.0 :019 > a = Author.select('title').from('books')
  Author Load (0.4ms)  SELECT title FROM books
 =>                                                                           
[#<Author:0x00005651e8c66e58 id: nil>,                                        
...                                                                           
3.0.0 :020 > 
3.0.0 :020 > a.first.title
 => "1234"
 

 references(*table_names)
Link

Use to indicate that the given table_names are referenced by an SQL string, and should therefore be JOINed in any query rather than loaded separately. This method only works in conjunction with includes. 

3.0.0 :023 > Author.includes(:books).where("books.title = 'The Shining'").references(:books)
  SQL (0.4ms)  SELECT "authors"."id" AS t0_r0, "authors"."name" AS t0_r1, "authors"."dob" AS t0_r2, "authors"."gender" AS t0_r3, "authors"."country" AS t0_r4, "authors"."created_at" AS t0_r5, "authors"."updated_at" AS t0_r6, "authors"."lock_version" AS t0_r7, "authors"."email_address" AS t0_r8, "books"."id" AS t1_r0, "books"."title" AS t1_r1, "books"."total_page" AS t1_r2, "books"."rating" AS t1_r3, "books"."price" AS t1_r4, "books"."created_at" AS t1_r5, "books"."updated_at" AS t1_r6, "books"."date_published" AS t1_r7, "books"."publisher_id" AS t1_r8, "books"."author_id" AS t1_r9 FROM "authors" LEFT OUTER JOIN "books" ON "books"."author_id" = "authors"."id" WHERE (books.title = 'The Shining')
 => 
[#<Author:0x00005651e35c02c0
  id: 10017,
  name: "Stephen King",
  dob: Sun, 21 Sep 1947,
  gender: "Male",
  country: "UK",
  created_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  updated_at: Fri, 03 Jun 2022 17:32:54.257818000 UTC +00:00,
  lock_version: 0,
  email_address: "stephen@gmail.com">] 


