What is a Database?
A database is information that is set up for easy access, management and updating.Databases are used for storing, maintaining and accessing any sort of data. They collect information on people, places or things. That information is gathered in one place so that it can be observed and analyzed. Databases can be thought of as an organized collection of information.

PostgreSql-
It is a powerful, open source object-relational database system.PostgreSQL runs on all major operating systems.PostgreSQL supports a large part of the SQL standard.
It is a highly stable database management system, backed by more than 20 years of community development which has contributed to its high levels of resilience, integrity, and correctness.
It uses the SQL language.


postgres=# select version();
                          version
------------------------------------------------------------
 PostgreSQL 14.2, compiled by Visual C++ build 1914, 64-bit
(1 row)

postgres-# \l
                                         List of databases
   Name    |  Owner   | Encoding |      Collate       |       Ctype        |   Access privileges
-----------+----------+----------+--------------------+--------------------+-----------------------
 postgres  | postgres | UTF8     | English_India.1252 | English_India.1252 |
 template0 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
 template1 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
(3 rows)


postgres=# create database test;
CREATE DATABASE

test-#
Here # shows I am Super User
test=>
" => " have rights to the database

postgres-# \?
General
  \copyright             show PostgreSQL usage and distribution terms
  \crosstabview [COLUMNS] execute query and display results in crosstab
  \errverbose            show most recent error message at maximum verbosity
  \g [(OPTIONS)] [FILE]  execute query (and send results to file or |pipe);
                         \g with no arguments is equivalent to a semicolon
  \gdesc                 describe result of query, without executing it
  \gexec                 execute query, then execute each value in its result
  \gset [PREFIX]         execute query and store results in psql variables
  \gx [(OPTIONS)] [FILE] as \g, but forces expanded output mode
  \q                     quit psql
  \watch [SEC]           execute query every SEC seconds

Help
  \? [commands]          show help on backslash commands
  \? options             show help on psql command-line options
  \? variables           show help on special variables
  \h [NAME]              help on syntax of SQL commands, * for all commands

Query Buffer
  \e [FILE] [LINE]       edit the query buffer (or file) with external editor
  \ef [FUNCNAME [LINE]]  edit function definition with external editor
  \ev [VIEWNAME [LINE]]  edit view definition with external editor
  \p                     show the contents of the query buffer
  \r                     reset (clear) the query buffer
  \w FILE                write query buffer to file

Input/Output
  \copy ...              perform SQL COPY with data stream to the client host
-- More  --


#To see current date
# select current_date;
 current_date
--------------
 2022-04-01


#running an arithmetic operation
postgres=# select 2+2;
 ?column?
----------
        4
(1 row)

#to permanently delete a database;
 drop database test1;
DROP DATABASE

#to change database
test=# \c test1;
You are now connected to database "test1" as user "postgres".


Table synatx - 

CREATE TABLE table_name(
Column name + data type + constraints if any
)

test=# create table person (
test(# id int not null primary key,
test(# first_name varchar(50) not null,
test(# last_name varchar(50) not null,
test(# gender varchar(7) not null,
test(# date_of_birth date not null,
test(# email varchar(150)  );
CREATE TABLE


#to view table
test=# \d
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | person | table | postgres
(1 row)



test=# \d person;
                          Table "public.person"
    Column     |          Type          | Collation | Nullable | Default
---------------+------------------------+-----------+----------+---------
 id            | integer                |           | not null |
 first_name    | character varying(50)  |           | not null |
 last_name     | character varying(50)  |           | not null |
 gender        | character varying(7)   |           | not null |
 date_of_birth | date                   |           | not null |
 email         | character varying(150) |           |          |
Indexes:
    "person_pkey" PRIMARY KEY, btree (id)


#to delete a table
test=# drop table person;
DROP TABLE


test=# \dt
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | person | table | postgres
(1 row)


#inserting values into table

test=# insert into person (id, first_name, last_name, gender, date_of_birth)
test-# values(1,'John','Smith','Male',date '2000-11-04');
INSERT 0 1
test=# insert into person (id, first_name,last_name, gender, date_of_birth, email)
test-# values(2,'Jessica','Jones','Female',date '1999-05-05','jessica@gmail.com');
INSERT 0 1
test=# insert into person (id,first_name,last_name,gender,date_of_birth,email)
test-# values(3,'David','Ayers','Male',date '1999=06-07','david@gmail.com');
INSERT 0 1
test=# insert into person (id,first_name,last_name,gender,date_of_birth,email)
test-# values(4,'Chris','Evans','Male',date '1998-07-11','chris@gmail.com');
INSERT 0 1
test=# insert into person (id,first_name,last_name,gender,date_of_birth,email)
test-# values(5,'Hela','Ray','Female',date '1996-09-12','hela@gmail.com');
INSERT 0 1


 SELECT statement is used to fetch the data from a database table,
test=# select * from person;
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  1 | John       | Smith     | Male   | 2000-11-04    | john@gmail.com
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
  3 | David      | Ayers     | Male   | 1999-06-07    | david@gmail.com
  4 | Chris      | Evans     | Male   | 1998-07-11    | chris@gmail.com
  5 | Hela       | Ray       | Female | 1996-09-12    | hela@gmail.com
(5 rows)


test=# select first_name, last_name from person;
 first_name | last_name
------------+-----------
 John       | Smith
 Jessica    | Jones
 David      | Ayers
 Chris      | Evans
 Hela       | Ray
(5 rows)


test=# select * from person order by first_name;
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  4 | Chris      | Evans     | Male   | 1998-07-11    | chris@gmail.com
  3 | David      | Ayers     | Male   | 1999-06-07    | david@gmail.com
  5 | Hela       | Ray       | Female | 1996-09-12    | hela@gmail.com
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
  1 | John       | Smith     | Male   | 2000-11-04    | john@gmail.com
(5 rows)



test=# select * from person order by id DESC;
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  5 | Hela       | Ray       | Female | 1996-09-12    | hela@gmail.com
  4 | Chris      | Evans     | Male   | 1998-07-11    | chris@gmail.com
  3 | David      | Ayers     | Male   | 1999-06-07    | david@gmail.com
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
  1 | John       | Smith     | Male   | 2000-11-04    | john@gmail.com
(5 rows)



test=# select * from person where gender='Female';
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
  5 | Hela       | Ray       | Female | 1996-09-12    | hela@gmail.com



test=# SELECT 1<2;
 ?column?
----------
 t
(1 row)

 Select * from person where last_name in ('Jones','Evans','Ray');
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
  4 | Chris      | Evans     | Male   | 1998-07-11    | chris@gmail.com
  5 | Hela       | Ray       | Female | 1996-09-12    | hela@gmail.com
(3 rows)




WHERE CLAUSE - used to specify a condition while fetching the data from single table or joining with multiple tables.

syntax:SELECT column1, column2, columnN
                             FROM table_name
                             WHERE [search_condition]
test=# select * from person where first_name like 'J%';
 id | first_name | last_name | gender | date_of_birth |       email
----+------------+-----------+--------+---------------+-------------------
  1 | John       | Smith     | Male   | 2000-11-04    | john@gmail.com
  2 | Jessica    | Jones     | Female | 1999-05-05    | jessica@gmail.com
(2 rows)



test=# create table company (
test(# id int not null primary key,
test(# name varchar(55) not null,
test(# age int not null,
test(# address varchar(55) not null,
test(# salary int not null,
test(# join_date date not null );
CREATE TABLE
test=# \d
          List of relations
 Schema |  Name   | Type  |  Owner
--------+---------+-------+----------
 public | company | table | postgres
 public | person  | table | postgres
 public | teacher | table | postgres
(3 rows)


test=# insert into company (id,name,age,address,salary,join_date)
test-# values(1,'Paul',23,'Texas',10000,'2001-07-13'),
test-# (2,'Rahul',34,'California',85000,'2007-08-11'),
test-# (3,'Nitin',33,'Rich-Mond',45000,'2010-12-13'),
test-# (4,'Joe',45,'Texas',90000,'2000-11-05');
INSERT 0 4
test=# select * from company;
 id | name  | age |  address   | salary | join_date
----+-------+-----+------------+--------+------------
  1 | Paul  |  23 | Texas      |  10000 | 2001-07-13
  2 | Rahul |  34 | California |  85000 | 2007-08-11
  3 | Nitin |  33 | Rich-Mond  |  45000 | 2010-12-13
  4 | Joe   |  45 | Texas      |  90000 | 2000-11-05
(4 rows)

select * from company where age>=25 or salary>=65000;
 id | name  | age |  address   | salary | join_date
----+-------+-----+------------+--------+------------
  2 | Rahul |  34 | California |  85000 | 2007-08-11
  3 | Nitin |  33 | Rich-Mond  |  45000 | 2010-12-13
  4 | Joe   |  45 | Texas      |  90000 | 2000-11-05
(3 rows)




#Update query with where clause;
                 
                  syntax:UPDATE table_name
                  SET column1 = value1, column2 = value2...., columnN = valueN
                  WHERE [condition];

update company set join_date = '2002-07-03' where id=3;
UPDATE 1
test=# select * from company;
 id | name  | age |  address   | salary | join_date
----+-------+-----+------------+--------+------------
  1 | Paul  |  23 | Texas      |  10000 | 2001-07-13
  2 | Rahul |  34 | California |  85000 | 2007-08-11
  4 | Joe   |  45 | Texas      |  90000 | 2000-11-05
  3 | Nitin |  33 | Rich-Mond  |  45000 | 2002-07-03
(4 rows)


 #Delete query 

          syntax: DELETE FROM table_name  WHERE condition;
           delete from company where id=2;

 id | name  | age |  address  | salary | join_date
----+-------+-----+-----------+--------+------------
  1 | Paul  |  23 | Texas     |  10000 | 2001-07-13
  4 | Joe   |  45 | Texas     |  90000 | 2000-11-05
  3 | Nitin |  33 | Rich-Mond |  45000 | 2002-07-03


#ORDER by:ORDER BY clause is used to sort the data in ascending or descending order.
              
                   syntax:SELECT column-list
                          FROM table_name
                          [WHERE condition]
                          [ORDER BY column1, column2, .. columnN] [ASC | DESC];

                    test=# select * from company order by name, salary asc;
 id | name  | age |  address  | salary | join_date
----+-------+-----+-----------+--------+------------
  4 | Joe   |  45 | Texas     |  90000 | 2000-11-05
  3 | Nitin |  33 | Rich-Mond |  45000 | 2002-07-03
  1 | Paul  |  23 | Texas     |  10000 | 2001-07-13


29.GROUP BY: GROUP BY clause is used in collaboration with the SELECT statement to group together those rows in a table that have identical data.

                                        syntax:SELECT column-list
                                               FROM table_name
                                               WHERE [ conditions ]
                                               GROUP BY column1, column2....columnN
                                               ORDER BY column1, column2....columnN
                                         test=# select address, count(*) from company group by address;
  address  | count
-----------+-------
 Rich-Mond |     1
 Texas     |     2
(2 rows)


#Views in SQL are kind of virtual tables. A view also has rows and columns as they are in a real table in the database.

The basic CREATE VIEW syntax is as follows −

CREATE [TEMP | TEMPORARY] VIEW view_name AS
SELECT column1, column2.....
FROM table_name
WHERE [condition];



test=# create VIEW myview as
test-# select name,age,address,salary
test-# from company;
CREATE VIEW

       ^
test=#  select * from myview;
 name  | age |  address  | salary
-------+-----+-----------+--------
 Paul  |  23 | Texas     |  10000
 Joe   |  45 | Texas     |  90000
 Nitin |  33 | Rich-Mond |  45000
(3 rows)


#to drop a view-
test=# drop view myview;
DROP VIEW
