PostgreSQL built-in functions, also called as Aggregate functions, are used for performing processing on string or numeric data. 

#To count the number of rows 

test=# select count(*) from company;
 count
-------
     4
(1 row)

                             ^
test=# select count(*) from capitals where name='chandigarh';
 count
-------
     1
(1 row)


test=#


                 ^
test=# select * from city where name = 'ambala';
  name  | population | elevation
--------+------------+-----------
 ambala |        123 |       221
(1 row)



# The PostgreSQL MAX aggregate function allows us to select the highest (maximum) value for a certain column.

test=# select max(salary) from company;
  max
-------
 85000
(1 row)


#The PostgreSQL MIN aggregate function allows us to select the lowest (minimum) value for a certain column.

test=# select min(age) from company;
 min
-----
  23
(1 row)


# Can see max and min in same time
test=# select max(age),min(age) from company;
 max | min
-----+-----
  27 |  23
(1 row)




test=# select name, max(elevation) from city group by name;
    name    | max
------------+-----
 ambala     | 221
 chandigarh | 123
(2 rows)


#The PostgreSQL AVG aggregate function selects the average value for certain table column.


test=# select avg(salary) from company;
        avg
--------------------
 43500.000000000000
(1 row)


#the PostgreSQL SUM aggregate function allows selecting the total for a numeric column.


test=# select sum(age) from company;
 sum
-----
 100
(1 row)

test=# select sum(elevation) from city group by name;
 sum
-----
 221
 123
(2 rows)



#The PostgreSQL ARRAY aggregate function puts input values, including nulls, concatenated into an array.
test=# select array_agg(salary) from company;
        array_agg
--------------------------
 {4000,20000,65000,85000}
(1 row)



Numeric Functions


The ABS() function returns the absolute value of X.

test=# select abs(4);
 abs
-----
   4
(1 row)



ACOS(X) - This function returns the arccosine of X. The value of X must range between -1 and 1 or NULL will be returned.

test=# select acos(0.1);
        acos
--------------------
 1.4706289056333368
(1 row)

test=# select acos(2);
ERROR:  input is out of range

ASIN(X) - The ASIN() function returns the arcsine of X. The value of X must be in the range of -1 to 1 or NULL is returned.

test=# select asin(0.5);
        asin
--------------------
 0.5235987755982989
(1 row)


test=# select asin(0);
 asin
------
    0
(1 row)


ATAN(X) - This function returns the arctangent of X.

test=# select atan(1);
        atan
--------------------
 0.7853981633974483
(1 row)


ATAN2(Y,X) - This function returns the arctangent of the two arguments: X and Y. 
It is similar to the arctangent of Y/X, except that the signs of both are used to find the quadrant of the result.

test=# select atan2(5,6);
       atan2
--------------------
 0.6947382761967031
(1 row)


CEIL(X) / CEILING(X) - These functions return the smallest integer value that is not smaller than X. 


test=# select ceiling(4.5);
 ceiling
---------
       5
(1 row)


test=# select ceil(-7.65);
 ceil
------
   -7
(1 row)


test=# select ceil(8.9);
 ceil
------
    9
(1 row)

Floor(x)-  Return the bigger integer value just smaller than arg


test=# select floor (3.444);
 floor
-------
     3
(1 row)


test=# select floor(-8.45555);
 floor
-------
    -9
(1 row)


GREATEST(n1,n2,n3,..........)- Give the greates vlue from the no of parameters.

test=# select greatest(12,34,5,6,788,987,43,-56);
 greatest
----------
      987
(1 row)


LEAST(N1,N2,N3,N4,......) - gives the least values from the no of parameters.


test=# select least(1,2,34,5,67,-1,0);
 least
-------
    -1
(1 row)


COS(X)
This function returns the cosine of X. The value of X is given in radians.

test=# select cos(45);
        cos
--------------------
 0.5253219888177297
(1 row)


test=# select cos(60);
         cos
---------------------
 -0.9524129804151563
(1 row)


COT(X)
This function returns the cotangent of X. 

test=# select cot(45);
        cot
--------------------
 0.6173696237835551
(1 row)


test=# select cot(1);
        cot
--------------------
 0.6420926159343306
(1 row)


DEGREES(X)
This function returns the value of X converted from radians to degrees.


test=# select degrees(pi());
 degrees
---------
     180
(1 row)

test=# select degrees(2);
      degrees
--------------------
 114.59155902616465
(1 row)


EXP(X)
This function returns the value of e (the base of the natural logarithm) raised to the power of X.

test=# select exp(5);
        exp
-------------------
 148.4131591025766
(1 row)


test=# select exp(1);
        exp
-------------------
 2.718281828459045
(1 row)



pi() - returns the value of pi



test=# select pi();
        pi
-------------------
 3.141592653589793
(1 row)


LOG(X) / LOG(B,X)
The single argument version of the function will return the natural logarithm of X. If it is called with two arguments, it returns the logarithm of X for an arbitrary base B.

test=# select log(45);
        log
--------------------
 1.6532125137753437
(1 row)



test1=# SELECT LOG(1);
 log
-----
   0
(1 row)


test=# select log(90);
        log
-------------------
 1.954242509439325
(1 row)


test=# select log(2,45321);
        log
--------------------
 15.467892073874788
(1 row)


MOD(N,M)
This function returns the remainder of N divided by M.


test=# SELECT MOD(47,8);
 mod
-----
   7
(1 row)


POW(X,Y) / POWER(X,Y)
These two functions return the value of X raised to the power of Y.


test=# SELECT POWER(4,4);
 power
-------
   256
(1 row)


RADIANS(X)
This function returns the value of X, converted from degrees to radians.


test=# SELECT RADIANS(90);
      radians
--------------------
 1.5707963267948966
(1 row)

ROUND(X) / ROUND(X,D)
This function returns X rounded to the nearest integer.

test=# SELECT ROUND(9.00009);
 round
-------
     9
(1 row)


test=# SELECT ROUND(4.555,2);
 round
-------
  4.56
(1 row)


SIGN(X)
This function returns the sign of X (negative, zero, or positive) as -1, 0, or 1.


test=# SELECT SIGN(-9.65);
 sign
------
   -1
(1 row)



test=# SELECT SIGN(-0);
 sign
------
    0
(1 row)


test=# SELECT SIGN(3.34);
 sign
------
    1
(1 row)



SIN(X)
This function returns the sine of X.


test=# SELECT SIN(90);
        sin
--------------------
 0.8939966636005579
(1 row)


SQRT(X)
This function returns the non-negative square root of X. 


test=# SELECT SQRT(9);
 sqrt
------
    3
(1 row)


test=# SELECT SQRT(16);
 sqrt
------
    4
(1 row)

TAN(X)
This function returns the tangent of the argument X, which is expressed in radians.



test=# SELECT TAN(45);
        tan
--------------------
 1.6197751905438615
(1 row)


test=# SELECT TAN(90);
        tan
--------------------
 -1.995200412208242
(1 row)


#ASCII -  function returns an ASCII code value of a character.


test=# select ascii('a');
 ascii
-------
    97
(1 row)


test=# select ascii('c');
 ascii
-------
    99
(1 row)


#BIT_LENGTH()-Returns length of argument in bits


test=# SELECT BIT_LENGTH('b');
 bit_length
------------
          8
(1 row)


test=# SELECT BIT_LENGTH('f');
 bit_length
------------
          8
(1 row)
test=# SELECT BIT_LENGTH('fsassad');
 bit_length
------------
         56
(1 row)

#CHAR_LENGTH()-Returns number of characters in argument


test=# select char_length('asadf');
 char_length
-------------
           5
(1 row)


test=# select char_length('adawe345');
 char_length
-------------
           8
(1 row)


#CONCAT_WS() - Returns concatenate with separator,first argument is the separator for the rest of the arguments

test=# select concat_ws('abc','32432','dse','1222');
     concat_ws
--------------------
 32432abcdseabc1222
(1 row)


#CONCAT()-Returns concatenated string
test=# select concat('sss','12','sed');
  concat
----------
 sss12sed
(1 row)


#LOWER() - -Returns the argument in lowercase
test=# SELECT LOWER('ASCD');
 lower
-------
 ascd
(1 row)


#LEFT()- Returns the leftmost number of characters as specified
test=# SELECT LEFT('asdsaddfewrwwe213',5);
 left
-------
 asdsa
(1 row)


#Returns the length of the word
test=# select length('asbdkakd');
 length
--------
      8
(1 row)



LPAD()- Returns the string argument, left-padded with the specified string
test=# select lpad('we',5,'23');
 lpad
-------
 232we
(1 row)


#LTRIM()-Removes leading spaces

test=# select ltrim('   bsdd'     );
 ltrim
-------
 bsdd
(1 row)



#POSITION()-A synonym for LOCATE()


test=# select position('4' IN '231324999');
 position
----------
        6
(1 row)


#QUOTE()-Escapes the argument for use in an SQL statement

test=# select quote_ident('hi there');
 quote_ident
-------------
 "hi there"
(1 row)


test=# SELECT QUOTE_LITERAL(43.6);
 quote_literal
---------------
 '43.6'
(1 row)


test=# SELECT QUOTE_NULLABLE(55.6);
 quote_nullable
----------------
 '55.6'
(1 row)

	REGEXP
Pattern matching using regular expressions
Regular Expression
RoadBlock


#REPEAT()-Repeats a string the specified number of times
test=# select repeat('hi',5);
   repeat
------------
 hihihihihi
(1 row)



#REPLACE()- Replaces occurrences of a specified string

test=# select replace('12345','3','5');
 replace
---------
 12545
(1 row)


#REVERSE()-Reverse the characters in a string

test=# select reverse('abcde12');
 reverse
---------
 21edcba
(1 row)


#RIGHT()-Returns the specified rightmost number of characters

                     ^
test=# select right('NJADNS',3);
 right
-------
 DNS
(1 row)



#RPAD()- Appends string the specified number of timesIf str is longer than len, the return value is shortened to len characters

test=# select rpad('ab',5,'#');
 rpad
-------
 ab###
(1 row)


test=# select rpad('tqwew',3,'%');
 rpad
------
 tqw
(1 row)


#RTRIM()- Removes trailing spaces

test=# select rtrim('abcdefghi                ');
   rtrim
-----------
 abcdefghi
(1 row)



#SUBSTRING(), SUBSTR()-Returns the substring as specified
SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len), SUBSTRING(str FROM pos FOR len)

                         ^
test=# select substring('lenovo',4);
 substring
-----------
 ovo
(1 row)


test=# select substring('hithere',5,6);
 substring
-----------
 ere
(1 row)



TRIM()-Removes leading and trailing spaces
TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)


test=# select trim('       dell       ');
 btrim
-------
 dell
(1 row)


test=# select trim(both 'yyy' from 'xyzyyy');
 btrim
-------
 xyz
(1 row)


test=# select trim(trailing 'xyz' from 'xyzabcxyz');
 rtrim
--------
 xyzabc
(1 row)


			   
#UPPER()- Converts to uppercase
test=# select upper('nike');
 upper
-------
 NIKE
(1 row)


AUTO INCREMENT
PostgreSQL has the data types smallserial, serial and bigserial; these are not true types, but merely a notational convenience for creating unique identifier columns.
The type name serial creates an integer columns. The type name bigserial creates a bigint column. bigserial should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table.
 The type name smallserial creates a smallint column.


test=# create table company2(
test(# id serial primary key,
test(# name text not null,
test(# age int not null,
test(# address char(40),
test(# salary real
test(# );
CREATE TABLE
test=# insert into company2 (name,age,address,salary)
test-# values ('Rohit',34,'Ambala',30000.0);
INSERT 0 1
test=# insert into company2 (name,age,address,salary)
test-# values ('Rohan',35,'Patiala',35000.0);
INSERT 0 1
test=# insert into company2 (name,age,address,salary)
test-# values ('Joe',45,'Chandigarh',56000.0);
INSERT 0 1
test=# insert into company2 (name,age,address,salary)
test-# values ('Sai',55,'faridabad',66000.0),('Mark',44;'Mohali',76000.0);
ERROR:  syntax error at or near ";"
LINE 2: values ('Sai',55,'faridabad',66000.0),('Mark',44;'Mohali',76...
                                                        ^
test=# insert into company2 (name,age,address,salary)
test-# values ('Sai',55,'faridabad',66000.0),('Mark',44,'Mohali',76000.0);
INSERT 0 2
test=# select * from company2;
 id | name  | age |                 address                  | salary
----+-------+-----+------------------------------------------+--------
  1 | Rohit |  34 | Ambala                                   |  30000
  2 | Rohan |  35 | Patiala                                  |  35000
  3 | Joe   |  45 | Chandigarh                               |  56000
  4 | Sai   |  55 | faridabad                                |  66000
  5 | Mark  |  44 | Mohali                                   |  76000
(5 rows)



#Creating a user in DB
test=# create user jas with password'abc';
CREATE ROLE
test=# drop user jas;
DROP ROLE



Different Priveleges commands command be given 
 privileges in PostgreSQL are −
SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER,
CREATE,CONNECT,TEMPORAY,EXECUTE, and USAGE

Grant and Revoke are the commands to give privelege to the users
privilege − values could be: SELECT, INSERT, UPDATE, DELETE, RULE, ALL.

object − The name of an object(table, view, sequence) to which to grant/revoke access

PUBLIC − A short form representing all users.

GROUP group − A group to whom to grant privileges.

username − The name of a user to whom to grant privileges. PUBLIC is a short form representing all users.


GRANT privilege [, ...]
ON object [, ...]
TO { PUBLIC | GROUP group | username }

REVOKE privilege [, ...]
ON object [, ...]
FROM { PUBLIC | GROUP groupname | username }


test=# grant all on company to jas;
GRANT
test=# revoke all on company from jas;
REVOKE

