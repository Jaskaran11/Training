A module is a collection of methods,constants, and class variables.Module are defined as a class, but with module keyword not with class keyword.
Points - 
1.You cannot inherit modules or you cant create a subclass of a module.
2.Objects cannot be created from module.
3.all class are module but all module are not class
4.Name of module must start with a capitial letter.


Exlcude vs Include - 
Include keyword does is it makes the method defined in a module available to us as instance method of a class.
add instance methods.-> only available when a class is initialized 

Instance method is a method within a class that is available once a class is initialized or once a class is created.

Extend to use private method in class or if we wanted to create a bunch of method that would not be available to instances of class.
It adds class method.-> only avaible when a class is initialized.

CLass method is a method that is available within all of the classes but it is not available in the instance of a class.

Module are collection of methods,constants and classes.Unlike classes, modules dont have instances,instead, you specify that you want to add the functionality of a particular module to that of a class.

Module use - Modules dont have instances.Instead, modules gets mixed in to classes,using include method or prepend method.When it is mixed this way it is referred to as a mix-in.

Adding or mixing a module into a class makes the methods defined in the module available to all instances of the class.

Mixing in a module bears a strong resemblance to inheriting from superclass.The main difference between inheriting from a class and mixing in a module is that you can mix in more than one module.

Modules open up lots of possibilities particularly for sharing code among more than one class, because any number of classes can mix in the same module.
The difference between include and prepend is that if you prepend a module to a class, the object looks in that module first, before it looks in the class.

What is the difference between a class and a module?
Modules are collections of methods and constants. They cannot generate instances.
Classes may generate instances (objects), and have per-instance state (instance variables).

Modules may be mixed in to classes and other modules. The mixed in module’s constants and methods blend into that class’s own, augmenting the class’s functionality. Classes, however, cannot be mixed in to anything.Modules are a way of grouping together methods, classes, and constants.

Modules give you two major benefits:
=> Modules provide a namespace and prevent name clashes. Namespace help avoid conflicts with functions and classes with the same name that have been written by someone else.
=> Modules implement the mixin facility.             

A class may inherit from another class, but not from a module.
When you define a class, you define a blueprint for a data type. class hold data, have method that interact with that data and are used to instantiate objects.

 polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee model or a product model.
 polymorphic association is an Active Record association that can connect a model to multiple other models.


Why OAuth - it is meant for Authorization.
To solve this problem of services trying to access each other on behalf of the user there was a standard created called OAuth. There was also OAuth1.0 but 2 is used now.

Oauth in general is an authorization mechanism where services can authorize against each other on your behalf.Once you have given them permission.

OAuth Access Token - Contains user-allowed permission Trustable (cannot be tampered).

The OAuth 2.0 authorization framework is a protocol that allows a user to grant a third-party web site or application access to the user's protected resources, without necessarily revealing their long-term credentials or even their identity.

OAuth 2.0 allows users to share specific data with an application while keeping their usernames, passwords, and other information private. For example, an application can use OAuth 2.0 to obtain permission from users to store files in their Google Drives. This OAuth 2.0 flow is called the implicit grant flow.

JWT - JSON Web Tokens
In short, JWTs are used as a secure way to authenticate users and share information.

Typically, a private key, or secret, is used by the issuer to sign the JWT. The receiver of the JWT will verify the signature to ensure that the token hasn’t been altered after it was signed by the issuer. It is difficult for unauthenticated sources to guess the signing key and attempt to change the claims within the JWT.

Not all signing algorithms are created equal though. For example, some signing algorithms use a secret value that is shared between the issuer and the party that verifies the JWT. Other algorithms use a public and private key. The private key is known only to the issuer, while the public key can be widely distributed. The public key can be used to verify the signature, but only the private key can be used to create the signature. This is more secure than a shared secret because the private key only needs to exist in one place.

Because of this, the server does not need to keep a database with the information needed to identify the user. For developers, this is great news — the server that issues the JWT and the server that validates it do not have to be the same. 	

session token refer to a state on server.
jwt contain the value itself.

The key difference is that ActiveRecord lets you be more productive by using a higher level abstraction which lets you write less code. It also makes your code more portable by abstracting away some of the differences between DBMS.this abstraction comes at a cost and can lead to performance problems.

Active-record does not provide support for bulk import. This is one of the reasons why active-record pattern doesn't scale very well. 

ActiveRecord will serve you well most of the time, but there are a few situations where you will need to write raw sql. It is worth noting that ActiveRecord queries can also be written in a sql-like way. For example, you could write:

User.where(name: "Person A")

Or you could write it with a slightly more SQL-like syntax:

User.where("name = ?", "Person A")
User.where("name LIKE ?", "%Person A%")

One of the reasons that you may want to write raw SQL is when you are trying to access something that cannot be accessed through ActiveRecord methods, like the join table in a has_and_belongs_to_many association.

