In Ruby, string is a sequence of one or more characters. It may consist of numbers, letters, or symbols. Here strings are the objects, and apart from other languages, strings are mutable, i.e. strings can be changed in place instead of creating new strings.

It has an arbitrary Sequence of bytes representing text or binay data
It can be created using 
String::new
or as literals

Expression Substitution

Expression substitution is a means of embedding the value of any Ruby expression into a string using #{ and } −
3.0.0 :001 > x,y,z=12,36,72
 => [12, 36, 72] 
3.0.0 :002 > puts "the value of x is #{x}."
the value of x is 12.
 => nil 
3.0.0 :003 > exit
itsacheckmate@itscheckmate:~$ irb
3.0.0 :001 > x,y,z=12,36,72
 => [12, 36, 72] 
3.0.0 :002"> puts "the value of x is #{x}."
the value of x is 12.
 => nil 
3.0.0 :003 > puts "the sum of x and y is #{x+y}"
the sum of x and y is 48
 => nil 
3.0.0 :004"> puts "the average was #{ (x+y+x)/3}."
the average was 20.
 => nil 

The only difference between using single and double quotes is that the double quotes will interpolates the variables but single quotes can’t interpolate.
str1="Jas"
str2='Jas'
puts "Interpolating str1: #{str1}"
puts 'Cannot Interpolate str2: #{str2}'

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Interpolating str1: Jas
Cannot Interpolate str2: #{str2}
[Done] exited with code=0 in 0.062 seconds


 Check if the string is empty

 we can define an empty string as a string of zero length.
 A blank string is a string that has either zero-length, 
 or is composed ONLY of white space characters.
 3.0.0 :015 > a.size == 0
 => false 
 3.0.0 :016 > c = String.new
 => "" 
3.0.0 :017 > c.size == 0
 => true 

The to_s method on the string interpolation block, it itell the object to cinvert itself into a string.
3.0.0 :025 > name+a.to_s
 => "Jaskaranabcd" 
 3.0.0 :025 > name+a.to_s
 => "Jaskaranabcd" 
 
 #Substring extract
 A substring is a smaller part of string
 one way to extract substring is using the index no.
 3.0.0 :036 > name[4]
 => "a" 
3.0.0 :037 > name[2,6]
 => "skaran" 
3.0.0 :038 > name[0,5]
 => "Jaska" 

If only one character is written then that particular character is picked and if there are 2 number in bracket then the character from that index to the number of character in the second number is picked.

if we use negative range
for eg - it is starting from the given index to the second to last character
 syntax variable[index..-2]
3.0.0 :039 > name[3..-1]
 => "karan" 
3.0.0 :040 > name[6..-1]
 => "an" 
3.0.0 :041 > name [7..-1]
 => "n" 
3.0.0 :042 > name [7..-2]
 => "" 

If we want to remove or replace the strings we can assign the value 
 to the above substring
 
 3.0.0 :045 > welcome = "welcome"
 => "welcome" 
3.0.0 :046 > welcome[3] = "d"
 => "d" 
3.0.0 :047 > welcome
 => "weldome" 

.0.0 :048 > welcome[0,2]=""
 => "" 
3.0.0 :049 > welcome
 => "ldome" 
3.0.0 :050 > welcome.size
 => 5 

3.0.0 :051 > p welcome
"ldome"
 => "ldome" 


#If we want to find out that a string contains another string

3.0.0 :052"> day = "Today is Friday"
 => "Today is Friday" 
3.0.0 :053 > day.include?("today")
 => false 
3.0.0 :054 > day.include?("Today")
 => true 

It is case-sensitive

#we can also use the index method here
3.0.0 :055 > day.index("is")
 => 6 

Above methods looks for the partial words too . 
and index will also tell the index of first match also.

#How to pad a ruby string

One way to pad a string is to use the rjust method with 2 arguments
3.0.0 :062 > welcome.rjust(10)
 => "     ldome" 
3.0.0 :063 > welcome.rjust(19,"*")
 => "**************ldome" 


 Compare Strings ignoring characters
 As string comparsion is case sensitive to make sure the two 
 strings  comparing are same or not 
 So the The common way to do that is to make both sides of the
  equation downcase or upcase
  
  3.0.0 :065 > day="day"
 => "day" 
3.0.0 :066 > dAY="DAY"
 => "DAY" 
3.0.0 :067 > day.upcase == dAY.upcase
 => true 
 
 
#
 Casecmp
 it compares for the substring gives ans 0,1,-1
for equal ,greater or smaller string

3.0.0 :068 > day.casecmp("asdf")
 => 1 
3.0.0 :069 > day.casecmp("aydf")
 => 1 
3.0.0 :070 > day.casecmp("day")
 => 0 
3.0.0 :071 > day.casecmp("ab")
 => 1 
3.0.0 :072 > day.casecmp("a")
 => 1 
3.0.0 :073 > day.casecmp("b")
 => 1 
 
 3.0.0 :077 > 'day'.casecmp(day)
 => 0 
3.0.0 :078 > 'dayq'.casecmp(day)
 => 1 
3.0.0 :079 > 'da'.casecmp(day)
 => -1
 
 #Casecmp ? 
 
 true,false or nil
 
 3.0.0 :081 > '1'.casecmp?(day)
 => false 
3.0.0 :082 > 'day'.casecmp?(day)
 => true 
3.0.0 :083 > ''.casecmp?(day)
 => false 
3.0.0 :084 > 'daya'.casecmp?(day)
 => false 
 
 #trim a string and remove white space
 
 Strip method is used to remove space from string
 
 3.0.0 :085"> galaxy = "      "
 => "      " 
3.0.0 :086 > galaxy.strip
 => "" 

If you only want to remove the white space from one of the sides (left / right) you can use
  the lstrip & rstrip methods instead.
  
  3.0.0 :091 > galaxy = "    b   "
 => "    b   " 
3.0.0 :092 > galaxy.lstrip
 => "b   " 
3.0.0 :093 > galaxy.rstrip
 => "    b" 


#Prefix and Suffix

can use the start_with? method to check if a string starts with a specific prefix

3.0.0 :094 > string = "ruby programming"
 => "ruby programming" 
3.0.0 :095"> string.start_with? "ruby"
 => true 
 
 we can also use the end_with? method to check if a string ends with the suffix
 3.0.0 :096 > string.end_with? "programming"
 => true 

 and delete_prefix & delete_suffix methods to delete accordingly
 
 #Convert the string to array
 Taking a string and breaking it down into an array of characters
  using "split" methods
  
  
It split the string based on the spaces  by default 

3.0.0 :097 > name
 => "Jaskaran" 
3.0.0 :098 > name.split
 => ["Jaskaran"] 
3.0.0 :099 > name = " J a s k a r a n"
 => " J a s k a r a n" 
3.0.0 :100 > name.split
 => ["J", "a", "s", "k", "a", "r", "a", "n"] 

 but this can be split based on other delimiter
 like ','
 
 3.0.0 :101"> csv = "a,s,d,f,g,h"
 => "a,s,d,f,g,h" 
3.0.0 :102 > csv.split
 => ["a,s,d,f,g,h"] 

3.0.0 :105 > name.split("r")
 => [" J a s k a ", " a n"] 
 
 #Convert an array to the string
 
 to take an array of strings and join them
 to make a single big string
 use  == join method
 
 3.0.0 :106 > arr = ["Today","is","a","rainy","day"]
 => ["Today", "is", "a", "rainy", "day"] 
3.0.0 :107 > puts arr
Today
is
a
rainy
day
 => nil 
3.0.0 :108 > arr.join
 => "Todayisarainyday" 
 
 Special caracter can be give to join to add between different elements
while joining
3.0.0 :109 > arr=["hi","how","are","you"]
 => ["hi", "how", "are", "you"] 
3.0.0 :110 > arr.join("/")
 => "hi/how/are/you" 

#Convert a string into integer

To convert an string to a integer, we can use the built-in to_i method in Ruby.

The to_i method takes the string as a argument and converts it to number, if a given string is not valid number then it returns 0.

3.0.0 :113 > str = "100"
 => "100" 
3.0.0 :114 > num = str.to_i
 => 100 
3.0.0 :115 > puts num
100
 => nil 
 
 Only number are converted in this, otherwise zero is printed
 3.0.0 :116 > str = "JAS"
 => "JAS" 
3.0.0 :117 > num = str.to_i
 => 0 

#To check if a string is a number
f the string is made fully of number
 can use regex to compare the string
using match? method

3.0.0 :126 > if "89".match(/89/)
3.0.0 :127 >   puts "match found!"
3.0.0 :128 > end
match found!
 => nil 

#How to append characters 
Strings can be appended to add on the string it same as stringconcatenation.
It can be done using << method

3.0.0 :129 > y=""
 => "" 
3.0.0 :130"> y << "hello"
 => "hello" 
3.0.0 :131 > y << "hi"
 => "hellohi" 
3.0.0 :132 > y << " how"
 => "hellohi how"
 
 #Not to use += for every string concatenation because that will create a new string every time,which is not good overall for performance
 
 
 #How to iterate over a character of strings
 
 1.we can use the each_char method
 
 3.0.0 :134 > y.each_char{ |ch| puts ch}
h
e
l
l
o
h
i
 
h
o
w
 => "hellohi how"
 
 2.we can use the chars method to convert the string into array of characters and then can use "each" on this array to iterate over
 
 3.0.0 :135 > array_char=y.chars
 => ["h", "e", "l", "l", "o", "h", "i", " ", "h", "o", "w"] 


#To convert a string to upper , lowe case or capitalize it
using 
upcase method
downcase method
capitalize method

3.0.0 :138 > cricketer.upcase
 => "YUVRAJ SINGH" 
3.0.0 :139 > cricketer.downcase
 => "yuvraj singh" 
3.0.0 :140 > cricketer.capitalize
 => "Yuvraj singh
 
 #Create a multiline string
 We can create a multi-line string in 2 ways
 
 1.Using the heredocs:
 3.0.0 :142"> x = <<-STRING
3.0.0 :143"> hello
3.0.0 :144"> there
3.0.0 :145"> how
3.0.0 :146"> are
3.0.0 :147"> you
3.0.0 :148"> today
3.0.0 :149"> STRING
 => "hello\nthere\nhow\nare\nyou\ntoday\n" 
3.0.0 :150 > x
 => "hello\nthere\nhow\nare\nyou\ntoday\n" 
3.0.0 :151 > puts x
hello
there
how
are
you
today
 => nil 

2.The %Q method

itsacheckmate@itscheckmate:~$ irb
3.0.0 :001"> multi = %Q( here
3.0.0 :002"> i am using
3.0.0 :003"> the multiline
3.0.0 :004"> comment)
 => " here\ni am using\nthe multiline\ncomment" 
3.0.0 :005 > puts multi
 here
i am using
the multiline
comment
 => nil 

3.to use the escape sequence \n

3.0.0 :006 > z="using \nthe \nmultiline \nmethod"
 => "using \nthe \nmultiline \nmethod" 
3.0.0 :007 > puts z
using 
the 
multiline 
method
 => nil 
 
 #Replace the text inside the string using the gsub method
 
 3.0.0 :009 > string = "hello how are you"
 => "hello how are you" 
3.0.0 :010 > string.gsub("are","is")
 => "hello how is you" 

But it also replaces every occurences of that character
so it can also be used to remove occurence of that character

3.0.0 :016 > string.gsub("o","")
 => "hell hw are yu" 
 
 Since gsub returns new string so to create change in that string we have to use gsub!
 gsub can also be used with regex to find substring to replace
 
 3.0.0 :018 > string.gsub!(/\s/,",")
 => "hello,how,are,you" 
3.0.0 :019 > string
 => "hello,how,are,you" 

#Remove the last character from a string
we use the chomp method to remove \n from last by default

3.0.0 :022 > cricketer = "Mahendra Singh Dhoni"
 => "Mahendra Singh Dhoni" 
3.0.0 :023 > cricketer.chomp
 => "Mahendra Singh Dhoni"
 
 3.0.0 :031 > cricketer.chomp("i")
 => "Mahendra Singh Dhon" 

#How to change the String Encodings

Strings are stored as a sequence of bytes , they are turned into
character based on encoding , before we can see them
eg A is 65
but there can be complex encoding for different language character like
UTF-8
encoding method is used to see it 
3.0.0 :032 > string.encoding
 => #<Encoding:UTF-8> 

If some language is not supported by default encoding then it can be
fixed using this method like
"abc".force_encoding("UTF-8")

#Counting Characters

=> COunt method can be used to count the number of specified character in string
 => "hi\nthere how are you" 
3.0.0 :034 > string.count("e")
 => 3 
3.0.0 :035 > string.count("ar")
 => 3 
3.0.0 :036 > string.count("a")
 => 1 
3.0.0 :037 > string.count("h")
 => 3 


#Public Instance Methods

%this means the formatting of the string

3.0.0 :044 > "%05d" %123
 => "00123" 
3.0.0 :045 > "%05a" %123
 => "0x1.ecp+6" 
3.0.0 :046 > "%05s" %123
 => "  123" 
3.0.0 :047 > "%05e" %123
 => "1.230000e+02" 
 
 *Copies the string that many number of times
 
 3.0.0 :050 > name * 1
 => "Virat" 
3.0.0 :051 > name * 7
 => "ViratViratViratViratViratViratVirat" 

+is used for string concatenation

 3.0.0 :054 > name + name
 => "ViratVirat" 
3.0.0 :055 > name + "Kohli"
 => "ViratKohli" 
 
 << is alos used for string concatenation
 
 <=> is used for comparison
 -1 if other string is larger
 0 if the two are equal
 1 if the other string is smaller
 nil if the two are incomparable
 
 3.0.0 :057 > name <=> "012323"
 => 1 
3.0.0 :058 > name <=> "Virat"
 => 0 
3.0.0 :059 > name <=> "Vira"
 => 1 
3.0.0 :060 > name <=> "Virats"
 => -1 
3.0.0 :061 > name <=> ""
 => 1 
3.0.0 :063 > name <=> 123
 => nil 
 
 * == is used to compare the value and length of the two string
 
 3.0.0 :064 > name == "virat"
 => false 
3.0.0 :065"> name == "Virat"
 => true 
3.0.0 :066 > name == 231
 => false 


will return false if two same value have different encoding


 =~ is used to find the 1st occurence of that string or regex
 3.0.0 :067/> name =~ /r/
 => 2 
3.0.0 :068 > into = "he is a cricketer #{name}"
 => "he is a cricketer Virat" 
3.0.0 :069 > into =~ /\Z/
 => 23 
3.0.0 :070 > into =~ /w+\Z/
 => nil 
3.0.0 :071 > into =~ /\w+\Z/
 => 18 

 Here, class String provides methods that are useful for:

Creating a String

Frozen/Unfrozen Strings

Querying

Comparing

Modifying a String

Converting to New String

Converting to Non-String

Iterating

Methods for a Frozen/Unfrozen String¶ ↑
The freeze method in Ruby is used to ensure that an object cannot be modified. 
This method is a great way to create immutable objects.
#+string
Returns a string that is not frozen: self, if not frozen; self.dup otherwise.


3.0.0 :001 > a = 'abcdefgh'
 => "abcdefgh" 
3.0.0 :002 > +a
 => "abcdefgh" 
3.0.0 :003 > -a
 => "abcdefgh" 
 
 #freeze - 
 Freezes self, if not already frozen: returns self.
3.0.0 :004 > a.freeze
 => "abcdefgh" 
3.0.0 :005 > a.frozen?
 => true 
 
 Methods for Querying
 
 Counts
 count the no of character in string or of the specified character occurences.
 3.0.0 :010"> a = "hello there"
 => "hello there" 
3.0.0 :011 > a.count "llo"
 => 3 
3.0.0 :012 > a.count "e"
 => 3 
3.0.0 :013 > a.count "re"
 => 4 


bytesize - returns the count of bytes.

3.0.0 :014 > a.bytesize
 => 11 
 
 Substrings
 index - returns the index of the first occurrence of a given substring: returns nil if none found.
 
 3.0.0 :018 > a.index("ll", -4)
 => nil 
3.0.0 :019 > a.index("l")
 => 2 
3.0.0 :020 > a.index("l",6)
 => nil 
3.0.0 :021 > a.index("ll")
 => 2 


rindex - 
returns the index of the last occurrence of a given substring;returns nil if none found.

3.0.0 :022 > a.rindex("l",6)
 => 3 
3.0.0 :023 > a.rindex("l")
 => 3 
3.0.0 :024 > a.rindex("a",-1)
 => nil 
3.0.0 :025 

match - 
returns a matchdata object if the string matches a given regexp; nil otherwise.

3.0.0 :025 > a.match('l')
 => #<MatchData "l"> 
3.0.0 :026 > a.match('b')
 => nil 
3.0.0 :027 > a.match('H',8)
 => nil 
3.0.0 :028 > a.match('h')
 => #<MatchData "h"> 
3.0.0 :029 > a.match('h',6)
 => #<MatchData "h"> 
3.0.0 :030 > a.match
3.0.0 :031 > a.match(/o/) {|a| print a}
o => nil 


sum - 
returns a basic checksum for the string : the sum of each byte

hash
returns the integer hash code.
3.0.0 :032 > a.sum
 => 1100 
3.0.0 :033 > a.hash
 => 1208836703781400736 
3.0.0 :034 > b = a
 => "hello there" 
3.0.0 :035 > a.sum
 => 1100 
3.0.0 :036 > a.hash
 => 1208836703781400736 


Methods for Comparing

eql?
Returns true if the content is the same as the given other string.

3.0.0 :037 > a.eql?('helpo')
 => false 
3.0.0 :038 > a.eql?('hello')
 => false 
3.0.0 :039 > a.eql?('hello there')
 => true 

Methods for Modifying A String
Each of these methods modifies self.


Substitution 

succ!, next!

Returns self modified to become its own successor.

3.0.0 :040 > a.succ
 => "hello therf" 
3.0.0 :041 > a.next!
 => "hello therf" 
3.0.0 :042 > a
 => "hello therf" 
 
 replace - 
 Returns self with its entire content replaced by a given string
 
 3.0.0 :043 > b.replace('wassup')
 => "wassup" 
3.0.0 :044 > b
 => "wassup" 
 
 reverse!
 Returns self with its characters in reverse order.
 3.0.0 :045 > b.reverse
 => "pussaw" 

setbyte - 
Sets the byte at a given integer offset to a given value;returns the argument.
3.0.0 :046 > b
 => "wassup" 
3.0.0 :047 > b.setbyte(0,91)
 => 91 
3.0.0 :048 > b
 => "[assup" 
3.0.0 :049 > b.setbyte(0,110)
 => 110 
3.0.0 :050 > b
 => "nassup" 


tr!

Replaces specified characters in self with specified replacement characters; returns self if any changes, nil otherwise.
3.0.0 :051 > b
 => "nassup" 
3.0.0 :052 > b.tr!('nass','hell')
 => "hellup" 
3.0.0 :054 > b
 => "hellup" 

tr_s!
Replaces specified characters in self with specified replacement characters, removing duplicates from the substrings that were modified, returns self if any changes, nil otherwise.

3.0.0 :057 > b
 => "helloh" 
3.0.0 :058 > b.tr_s!('helloh','hihihihihih')
 => "ihi" 


Casting 

swapcase!
Upcases each downcase character and downcases each upcase character; returns self if any changes, nil otherwise.

3.0.0 :059 > c = 'DEfkefomSS'
 => "DEfkefomSS" 
3.0.0 :060 > c.swapcase
 => "deFKEFOMss"
 
 Deletion 
 
 clear
 removes all content, so that self is empty; returns self.
 3.0.0 :061 > c
 => "DEfkefomSS" 
3.0.0 :062 > c.clear
 => "" 
3.0.0 :063 > c
 => "" 

center
Returns a copy of self-centered between pad substring.
3.0.0 :066"> a="hello there it is raining today."
 => "hello there it is raining today." 
3.0.0 :067 > a.center(6)
 => "hello there it is raining today." 
3.0.0 :068 > a.center(40)
 => "    hello there it is raining today.    " 
3.0.0 :069 > a.center(40, "***")
 => "****hello there it is raining today.****" 

concat - 
Returns the concatenation of self with given other strings.
3.0.0 :070 > a.concat(32, 'bar', 32, 'baz')
 => "hello there it is raining today. bar baz" 
3.0.0 :071 > a.concat(32, 'bar', 32, 'baz')
 => "hello there it is raining today. bar baz bar baz" 
3.0.0 :072 > a.concat( 'bar', 'baz')
 => "hello there it is raining today. bar baz bar bazbarbaz" 
 
 prepend - 
 Returns the concatenation of a given other string with self.
 3.0.0 :073 > a.prepend("everything")
 => "everythinghello there it is raining today. bar baz bar bazbarbaz" 


Encoding

b
Returns a copy of self with ASCII-8BIT Encoding.

scrub 
Returns a copy of self with each invalid byte replaced with a given character.
??????
Substitution

dump
Returns a copy of +self with all non-printing characters replaced by xHH notation and all special characters escaped.
undump
Returns a copy of +self with all \xNN notation replace by \uNNNN notation and all escaped characters unescaped.

3.0.0 :002"> a = " hello there wassup "
 => " hello there wassup " 
3.0.0 :003 > a.dump
 => "\" hello there wassup \""


Deletion

delete - 
Returns a copy of self with characters removed
3.0.0 :001 > a = "hello there how are you"
 => "hello there how are you" 
3.0.0 :002 > a.delete "h"
 => "ello tere ow are you" 
3.0.0 :003"> a.delete "m"
 => "hello there how are you" 
3.0.0 :004 > a
 => "hello there how are you" 
3.0.0 :005"> a.delete "aeiou" "^m"
 => "hll thr hw r y" 
3.0.0 :006 > a.delete "^m" "aeiou"
 => "eoeeoaeou" 
 
 
chop
Returns a copy of self with trailing whitespace or the last character removed.

3.0.0 :007 > a.chop
 => "hello there how are yo" 
3.0.0 :008 > a.chop.chop
 => "hello there how are y" 


byteslice
Returns a substring determined by a given index, start/length, or range.
3.0.0 :009 > a
 => "hello there how are you" 
3.0.0 :010 > a.byteslice(4..9)
 => "o ther" 

3.0.0 :011 > a.byteslice(4)
 => "o" 
3.0.0 :012 > a
 => "hello there how are you" 

chr
Returns the first character
3.0.0 :013 > a.chr
 => "h" 

Methods for Converting to Non-String
Each of these methods converts the contents of self to a non-String.

Characters, Bytes and Clusters

bytes
Returns an array of the bytes in self.
chars
Returns an array of the characters in self.

3.0.0 :014 > a.chars
 => ["h", "e", "l", "l", "o", " ", "t", "h", "e", "r", "e", " ", "h", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u"] 
3.0.0 :015 > a.bytes
 => [104, 101, 108, 108, 111, 32, 116, 104, 101, 114, 101, 32, 104, 111, 119, 32, 97, 114, 101, 32, 121, 111, 117] 

grapheme_clusters
Returns an array of the grapheme clusters in self.

Splitting

lines
Returns an array of the lines in self, as determined by a given record separator.

3.0.0 :017 > a.lines
 => ["hello there how are you"] 
3.0.0 :019 > a.lines(' ')
 => ["hello ", "there ", "how ", "are ", "you"] 


partition
Returns a 3-element array determined by the first substring that matches a given substring or regexp,
rpartition
Returns a 3-element array determined by the last substring that matches a given substring or regexp,

  3.0.0 :020 > a.rpartition(/.l/)
 => ["he", "ll", "o there how are you"] 
3.0.0 :021 > a.partition(/.r/)
 => ["hello th", "er", "e how are you"] 

Matching

scan 
Returns an array of substrings matching a given regexp or string, or, if a block given, passes each matching substring to the block.
3.0.0 :022 > a.scan(/../)
 => ["he", "ll", "o ", "th", "er", "e ", "ho", "w ", "ar", "e ", "yo"] 
3.0.0 :023 > a.scan(/\w+/) {|w| print "<<#{w}>> " }
<<hello>> <<there>> <<how>> <<are>> <<you>>  => "hello there how are you" 
3.0.0 :024 > a.scan(/(.)(.)/) {|x,y| print y, x }
ehll ohtre eoh wra eoy => "hello there how are you" 

unpack - 
Returns an array of substrings extracted from self according to a given format.
unpack1
Returns the first substring extracted from self according to a given format.

3.0.0 :025 > "abc \0\0abc \0\0".unpack1('A6Z6')
 => "abc" 
3.0.0 :026 > "abc \0\0abc \0\0".unpack('A6Z6')
 => ["abc", "abc "] 
3.0.0 :027 > "abc".unpack1("C*")
 => 97 

Numerics

hex
Returns the integer value of the leading characters, interpreted as hexadecimal digits.

3.0.0 :029 > "123".hex
 => 291 
3.0.0 :030 > a.hex
 => 0 

oct - 
Returns the integer value of the leading characters, interpreted as octal digits.
3.0.0 :031 > a.oct
 => 0 
3.0.0 :032 > "123".oct
 => 83 

ord
Returns the integer ordinal of the first character in self.
3.0.0 :033 > a.ord
 => 104 


to_i
Returns the integer value of leading characters, interpreted as an integer.

to_f
Returns the floating-point value of leading characters, interpreted as a floating-point number.

3.0.0 :034 > a.to_f
 => 0.0 
3.0.0 :035 > a.to_i
 => 0 
3.0.0 :036 > a
 => "hello there how are you" 

Strings and symbols

to_sym,intern
Returns the symbol corresponding to self.
3.0.0 :037 > a.intern
 => :"hello there how are you" 
3.0.0 :038 > a.to_sym
 => :"hello there how are you" 
 
 
Methods for Iterating¶ ↑
each_byte
Calls the given block with each successive byte in self.
3.0.0 :039 > a.each_byte {|c| print c, ' ' }
104 101 108 108 111 32 116 104 101 114 101 32 104 111 119 32 97 114 101 32 121 111 117  => "hello there how are you" 

each_char
Calls the given block with each successive character in self
3.0.0 :040 > a.each_char {|c| print c, ' ' }
h e l l o   t h e r e   h o w   a r e   y o u  => "hello there how are you" 



each_codepoint
Calls the given block with each successive integer codepoint in self.
3.0.0 :041 >  '\nhello'.each_codepoint {|c| print c, ' ' }
92 110 104 101 108 108 111  => "\\nhello"

3.0.0 :042 > a.each_codepoint {|c| print c, ' ' }
104 101 108 108 111 32 116 104 101 114 101 32 104 111 119 32 97 114 101 32 121 111 117  => "hello there how are you" 

each_grapheme_cluster
Calls the given block with each successive grapheme cluster in self.
3.0.0 :043 > a.each_char.to_a.size
 => 23 
3.0.0 :044 > a.each_grapheme_cluster.to_a.size
 => 23 
3.0.0 :045 > '\nhello'.each_grapheme_cluster.to_a.size
 => 7 
3.0.0 :046 > '\nhello'.each_char.to_a.size
 => 7 

each_line
Calls the given block with each successive line in self, as determined by a given record separator.
3.0.0 :047 > a.each_line('l') {|a| p a}
"hel"
"l"
"o there how are you"
 => "hello there how are you" 
3.0.0 :048'> a.each_line{|a| p a}
"hello there how are you"
 => "hello there how are you" 
3.0.0 :049 > a.each_line (' ') {|a| p a}
"hello "
"there "
"how "
"are "
"you"
 => "hello there how are you" 




upto
Calls the given block with each string value returned by successive calls to succ.

3.0.0 :051 > '25'.upto('5') {|s| fail s}
 => "25" 
3.0.0 :052 > 'a8'.upto('b6') {|s| print s, ' ' }
a8 a9 b0 b1 b2 b3 b4 b5 b6  => "a8" 

If argument exclusive is given as a truthy object, the last value is omitted:
3.0.0 :053 > 'a8'.upto('b6', true) {|s| print s, ' ' } 
a8 a9 b0 b1 b2 b3 b4 b5  => "a8" 

2.7.0 :001 > str = "Jaskaran"
 => "Jaskaran" 
2.7.0 :002 > str.each_char do |x|
2.7.0 :003 >   puts x if ['a','e','i','o','u'].include? x.downcase
2.7.0 :004 > end
a
a                                                                               
a                                                                               
 => "Jaskaran"   


 
2.7.0 :011 > str.each_char.with_index do |x, i|
2.7.0 :012 >   puts "#{x} #{i}" if ['a','e','i','o','u'].include? x.downcase
2.7.0 :013 > end
a 1
a 4                                                                        
a 6                                                                        
 => "Jaskaran"  
 
 2.7.0 :014 > string = "Itsacheckmate".chars
 => ["I", "t", "s", "a", "c", "h", "e", "c", "k", "m", "a", "t", "e"] 
 
 2.7.0 :015 > string.map { |x| x.downcase }.join(',')
 => "i,t,s,a,c,h,e,c,k,m,a,t,e" 

2.7.0 :019 > str.length
 => 8 

2.7.0 :020 > "look up".count("o")
 => 2 

2.7.0 :021 > str
 => "Jaskaran" 
2.7.0 :022 > str.reverse
 => "naraksaJ
 
 2.7.0 :023 > "hello world".include?("h")
 => true 

2.7.0 :024 > "Red, Red and Blue".gsub("Red", "Orange")
 => "Orange, Orange and Blue" 
2.7.0 :025 > "Red, Red and Blue".sub("Red", "Orange")
 => "Orange, Red and Blue" 
 
 2.7.0 :026 > sentence = "Hello There"
 => "Hello There" 
2.7.0 :027 > sentence.split
 => ["Hello", "There"] 

.7.0 :028 > "hello world \n\t\v\r".strip
 => "hello world" 
2.7.0 :029 > 

2.7.0 :029 > "..hello..world".chomp(",")
 => "..hello..world" 

2.7.0 :032 > a.insert(a.length, "hi")
 => "hellohi" 
2.7.0 :033 > a
 => "hellohi" 
 
 2.7.0 :034 > "Hello World".downcase
 => "hello world" 
2.7.0 :035 > "Hello World".upcase
 => "HELLO WORLD" 
2.7.0 :036 > "Hello World".downcase
 => "hello world" 
2.7.0 :037 > "Hello World".capitalize
 => "Hello world" 

2.7.0 :038 > str1 = "Jaskaran"
 => "Jaskaran" 
2.7.0 :039 > str2 = "Singh"
 => "Singh" 
2.7.0 :040 > str1.concat(" ").concat(str2)
 => "Jaskaran Singh" 
2.7.0 :041 > 

2.7.0 :041 > str = "hello world"
 => "hello world" 
2.7.0 :042 > puts "#{str.slice(0, 5)}"
hello
 => nil                                                         
2.7.0 :043 >

2.7.0 :043 > name = "Harry"
 => "Harry" 
2.7.0 :044 > name.start_with?("H")
 => true 

2.7.0 :045 > output = ""
 => "" 
2.7.0 :046 > output.empty?
 => true 


2.7.0 :048 > while x >= 4
2.7.0 :049 >   x = x -1
2.7.0 :050 > end
 => nil 
2.7.0 :051 > x = 10
 => 10 
2.7.0 :052 > while x >= 4
2.7.0 :053 >   puts "Value of x is #{x}"
2.7.0 :054 >   x = x - 1
2.7.0 :055 > end
Value of x is 10
Value of x is 9                                               
Value of x is 8                                               
Value of x is 7                                               
Value of x is 6                                               
Value of x is 5                                               
Value of x is 4                                               
 => nil   

2.7.0 :067 > i = "Jaskaran Singh"
 => "Jaskaran Singh" 
2.7.0 :068 > for a in 1..5 do 
2.7.0 :069 >   puts i 
2.7.0 :070 > end
Jaskaran Singh
Jaskaran Singh                                    
Jaskaran Singh                                    
Jaskaran Singh                                    
Jaskaran Singh
 => 1..5 

2.7.0 :071 > arr = ["Rohit", 1, true]
 => ["Rohit", 1, true] 
2.7.0 :072 > for i in arr do
2.7.0 :073 >   puts "#{i} - #{i.class}"
2.7.0 :074 > end
Rohit - String
1 - Integer                                                     
true - TrueClass                                                
 => ["Rohit", 1, true]      

 => nil                                                         
2.7.0 :082 > 5.times do |i|
2.7.0 :083 >   puts "#{i} times will be executed"
2.7.0 :084 > end
0 times will be executed
1 times will be executed                               
2 times will be executed                               
3 times will be executed                               
4 times will be executed   

2.7.0 :102 > a = 10
 => 10 
2.7.0 :103 > until a == 20
2.7.0 :104 >   puts a * 10
2.7.0 :105 >   a = a + 1
2.7.0 :106 > end
100
110                                            
120                                            
130                                            
140                                            
150                                            
160                                            
170                                            
180                                            
190                                            
 => nil  

