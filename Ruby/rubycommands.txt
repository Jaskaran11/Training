Ruby is a perfect Object Oriented Programming Language. The features of the object-oriented programming language include âˆ’
    Data Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance


#check ruby version
itsacheckmate@itscheckmate:~$ ruby -v
ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-linux]

#Basic code practise

itsacheckmate@itscheckmate:~$ irb
3.0.0 :001 > 



#3.0.0 :024 > puts "hello world"
hello world
 => nil 

# multiple line
3.0.0 :001"> puts <<EOF
3.0.0 :002"> this is the first line
3.0.0 :003"> this is the second line
3.0.0 :004"> EOF
3.0.0 :005"> 
this is the first line
this is the second line
 => nil
3.0.0 :007'> print <<'EOC'
3.0.0 :008'> echo hi there
3.0.0 :010 > EOC
echo hi there
 => nil 
 
#In Ruby, nil is a special value that denotes the absence of any value. Nil is an object of NilClass. nil is Ruby's way of referring to nothing or void. 
 
 
 
 Ruby Begin ==> Declares code to be called before the program is run
 Ruby END Statement==>Declares to be called at the end of the program
 
#puts "This line will run in between the code"

END{
    puts "This line will run after "
}
BEGIN{
    puts "This line will run first."
}

Output - [Running] ruby "/home/itsacheckmate/Practise/test.rb"
This line will run first.
This line will run in between the code
This line will run after 

3.0.0 :001'> print <<'EOC'
3.0.0 :002'> echo hi there
3.0.0 :003'> echo lo there
3.0.0 :004'> EOC
echo hi there
echo lo there
 => nil 


print <<"foo", <<"bar"  
	I said foo.
foo
	I said bar.
bar

#Comments in ruby
3.0.0 :006 > #this is a comment
 => nil 
3.0.0 :007 > name = "Jaskaran" #This is a comment
 => "Jaskaran" 
 
 #another way of comment
 =begin
    this is a comment
    this is also a comment
    this is a comment too
rescue => exception
    
end


#Class 
A class is a blueprint from which objects are created. The object is also called as an instance of a class.

3.0.0 :009 > class Vehicle
3.0.0 :010 >   def initialize(id,color,name)
3.0.0 :018 >   end
3.0.0 :019 > end
 => :initialize 
3.0.0 :020 > xveh = Vehicle. new("1","Red","ABC")
Id is : 1
Color is: Red
Name is: ABC

 => #<Vehicle:0x000055dacc6d21d8 @veh_id="1", @veh_color="Red", @veh_name... 
3.0.0 :021 > yveh = Vehicle. new("2","Black","XYZ")
Id is : 2
Color is: Black
Name is: XYZ


itsacheckmate@itscheckmate:~$ irb
3.0.0 :001 > class Person
3.0.0 :002 >   def initialize(id,name,age)
3.0.0 :003 >     @person_id=id
Age is: 23
 => #<Person:0x000055dfc1a92238 @person_id="1", @person_name="Jaskaran", ... 
3.0.0 :013 > person2 = Person.new("2","Rohit","22")
ID is: 2
Name is: Rohit
Age is: 22
 => #<Person:0x000055dfc1fb43b0 @person_id="2", @person_name="Rohit", @pe... 
3.0.0 :014 > class Customer
3.0.0 :015 >   @@no_of_customers=3
3.0.0 :016 >   def initialize(id,name,address)
3.0.0 :017 >     @Customer_id=id
3.0.0 :018 >     @Customer_name=name
3.0.0 :019 >     @Customer_address=address
3.0.0 :020 >     puts "ID is: #@Customer_id"
3.0.0 :022 >     puts "Address is: #@Customer_address"
3.0.0 :023 >     puts "\n"
3.0.0 :024 >   end
3.0.0 :025 > end
 => :initialize 
I
 => #<Customer:0x000055dfc1fe6400 @Customer_id="1", @Customer_name="Jask... 
ID is: 1
Name is: Jaskaran
Address is: Chandigarh

 => #<Customer:0x000055dfc1e13cb8 @Customer_id="2", @Customer_name="Ank...
ID is: 2
Name is: Ankit
Address is: Ambala
 
 => #<Customer:0x000055dfc1ffff40 @Customer_id="3", @Customer_name="Roh... 
3.0.0 :029 > Customer3 = Customer.new("3","Rohit","Mohali")
ID is: 3
Name is: Rohit
Address is: Mohali



#Four type of variables in Ruby

1.Global Variable - Starts with $ sign.
$global_variable=10
class Class1
    def print_global
        puts "Global variable in Class1 is #$global_variable"
    end
end
class Class2
    def print_global
        puts "Global variable in Class2 is #$global_variable"

    end
end

class1obj = Class1.new
class1obj.print_global
class2obj = Class2.new
class2obj.print_global


[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Global variable in Class1 is 10
Global variable in Class2 is 10

2.Instance Variables-It begins with @.

class Customer1
    def initialize(id,name,addr)
        @cust_id=id
        @cust_name=name
        @cust_addr=addr
    
        puts "Customer id #@cust_id"
        puts "Customer name #@cust_name"
        puts "Customer address #@cust_addr"
    end
end

cust1=Customer1.new("1","John","Australia")
cust2=Customer1.new("2","Ron","USA")

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Customer id 1
Customer name John
Customer address Australia
Customer id 2
Customer name Ron
Customer address USA

3.Class Variables - It begins with @@. A class variable belongs to the class and it is a characteristic of a class. They need to be initialized before use.
class Customer2

    @@no_of_customers=0
    
    def initialize(id,name,addr)
        @cust_id=id
        @cust_name=name
        @cust_addr=addr
    end

    def display_details()
        puts "Customer id #@cust_id"
        puts "Customer name #@cust_name"
        puts "Customer address #@cust_addr"
    end

    def total_no_customers()

        @@no_of_customers +=1
        puts "Total number of customers: #@@no_of_customers"
    end
end

cust1 = Customer2.new("1","Virat","Delhi")
cust2 = Customer2.new("2","Paul","Mysore")

cust1.display_details()
cust1.total_no_customers()
cust2.display_details()
cust2.total_no_customers()


[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Customer id 1
Customer name Virat
Customer address Delhi
Total number of customers: 1
Customer id 2
Customer name Paul
Customer address Mysore
Total number of customers: 2

Local Variables: A local variable name always starts with a lowercase letter(a-z) or underscore (_). 
eg 3.0.0 :035 > _age=19
 => 19 
3.0.0 :037"> name="jaskaran"
 => "jaskaran" 





