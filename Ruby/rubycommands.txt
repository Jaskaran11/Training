Ruby is a perfect Object Oriented Programming Language. The features of the object-oriented programming language include âˆ’
    Data Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance


#check ruby version
itsacheckmate@itscheckmate:~$ ruby -v
ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-linux]

#Basic code practise

itsacheckmate@itscheckmate:~$ irb
3.0.0 :001 > 



#3.0.0 :024 > puts "hello world"
hello world
 => nil 

# multiple line
3.0.0 :001"> puts <<EOF
3.0.0 :002"> this is the first line
3.0.0 :003"> this is the second line
3.0.0 :004"> EOF
3.0.0 :005"> 
this is the first line
this is the second line
 => nil
3.0.0 :007'> print <<'EOC'
3.0.0 :008'> echo hi there
3.0.0 :010 > EOC
echo hi there
 => nil 
 
#In Ruby, nil is a special value that denotes the absence of any value. Nil is an object of NilClass. nil is Ruby's way of referring to nothing or void. 
 
 
 
 Ruby Begin ==> Declares code to be called before the program is run
 Ruby END Statement==>Declares to be called at the end of the program
 
#puts "This line will run in between the code"

END{
    puts "This line will run after "
}
BEGIN{
    puts "This line will run first."
}

Output - [Running] ruby "/home/itsacheckmate/Practise/test.rb"
This line will run first.
This line will run in between the code
This line will run after 

3.0.0 :001'> print <<'EOC'
3.0.0 :002'> echo hi there
3.0.0 :003'> echo lo there
3.0.0 :004'> EOC
echo hi there
echo lo there
 => nil 


print <<"foo", <<"bar"  
	I said foo.
foo
	I said bar.
bar

#Comments in ruby
3.0.0 :006 > #this is a comment
 => nil 
3.0.0 :007 > name = "Jaskaran" #This is a comment
 => "Jaskaran" 
 
 #another way of comment
 =begin
    this is a comment
    this is also a comment
    this is a comment too
rescue => exception
    
end


#Class 
A class is a blueprint from which objects are created. The object is also called as an instance of a class.

3.0.0 :009 > class Vehicle
3.0.0 :010 >   def initialize(id,color,name)
3.0.0 :018 >   end
3.0.0 :019 > end
 => :initialize 
3.0.0 :020 > xveh = Vehicle. new("1","Red","ABC")
Id is : 1
Color is: Red
Name is: ABC

 => #<Vehicle:0x000055dacc6d21d8 @veh_id="1", @veh_color="Red", @veh_name... 
3.0.0 :021 > yveh = Vehicle. new("2","Black","XYZ")
Id is : 2
Color is: Black
Name is: XYZ


itsacheckmate@itscheckmate:~$ irb
3.0.0 :001 > class Person
3.0.0 :002 >   def initialize(id,name,age)
3.0.0 :003 >     @person_id=id
Age is: 23
 => #<Person:0x000055dfc1a92238 @person_id="1", @person_name="Jaskaran", ... 
3.0.0 :013 > person2 = Person.new("2","Rohit","22")
ID is: 2
Name is: Rohit
Age is: 22
 => #<Person:0x000055dfc1fb43b0 @person_id="2", @person_name="Rohit", @pe... 
3.0.0 :014 > class Customer
3.0.0 :015 >   @@no_of_customers=3
3.0.0 :016 >   def initialize(id,name,address)
3.0.0 :017 >     @Customer_id=id
3.0.0 :018 >     @Customer_name=name
3.0.0 :019 >     @Customer_address=address
3.0.0 :020 >     puts "ID is: #@Customer_id"
3.0.0 :022 >     puts "Address is: #@Customer_address"
3.0.0 :023 >     puts "\n"
3.0.0 :024 >   end
3.0.0 :025 > end
 => :initialize 
I
 => #<Customer:0x000055dfc1fe6400 @Customer_id="1", @Customer_name="Jask... 
ID is: 1
Name is: Jaskaran
Address is: Chandigarh

 => #<Customer:0x000055dfc1e13cb8 @Customer_id="2", @Customer_name="Ank...
ID is: 2
Name is: Ankit
Address is: Ambala
 
 => #<Customer:0x000055dfc1ffff40 @Customer_id="3", @Customer_name="Roh... 
3.0.0 :029 > Customer3 = Customer.new("3","Rohit","Mohali")
ID is: 3
Name is: Rohit
Address is: Mohali



#Four type of variables in Ruby

1.Global Variable - Starts with $ sign.Global Variable has global scope and accessible from anywhere in the program.
$global_variable=10
class Class1
    def print_global
        puts "Global variable in Class1 is #$global_variable"
    end
end
class Class2
    def print_global
        puts "Global variable in Class2 is #$global_variable"

    end
end

class1obj = Class1.new
class1obj.print_global
class2obj = Class2.new
class2obj.print_global


[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Global variable in Class1 is 10
Global variable in Class2 is 10

2.Instance Variables-It begins with @.its content is restricted to whatever the object itself refers to. Two separate objects, even though they belong to the same class, are allowed to have different values for their instance variables.

class Customer1
    def initialize(id,name,addr)
        @cust_id=id
        @cust_name=name
        @cust_addr=addr
    
        puts "Customer id #@cust_id"
        puts "Customer name #@cust_name"
        puts "Customer address #@cust_addr"
    end
end

cust1=Customer1.new("1","John","Australia")
cust2=Customer1.new("2","Ron","USA")

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Customer id 1
Customer name John
Customer address Australia
Customer id 2
Customer name Ron
Customer address USA

3.Class Variables - It begins with @@. A class variable belongs to the class and it is a characteristic of a class. They need to be initialized before use.
class Customer2

    @@no_of_customers=0
    
    def initialize(id,name,addr)
        @cust_id=id
        @cust_name=name
        @cust_addr=addr
    end

    def display_details()
        puts "Customer id #@cust_id"
        puts "Customer name #@cust_name"
        puts "Customer address #@cust_addr"
    end

    def total_no_customers()

        @@no_of_customers +=1
        puts "Total number of customers: #@@no_of_customers"
    end
end

cust1 = Customer2.new("1","Virat","Delhi")
cust2 = Customer2.new("2","Paul","Mysore")

cust1.display_details()
cust1.total_no_customers()
cust2.display_details()
cust2.total_no_customers()


[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Customer id 1
Customer name Virat
Customer address Delhi
Total number of customers: 1
Customer id 2
Customer name Paul
Customer address Mysore
Total number of customers: 2

4.Local Variables: A local variable name always starts with a lowercase letter(a-z) or underscore (_). 
eg 3.0.0 :035 > _age=19
 => 19 
3.0.0 :037"> name="jaskaran"
 => "jaskaran" 
 
 
5. Ruby Constants
Constants begin with UpperCase Letter
If they are defined withing class then they can be accessed within
that module only.
And if constants are defined outside class or module then it is treated as 
globally accessable
Refrencing an uninitialized constants will produce an error


 #Variables in ruby
 class Example 
    VAR1=100
    VAR2=200
    def show
        puts "value of first constant #{VAR1}"
        puts "valye of second constant #{VAR2}"
    end
end


obj=Example.new()
obj.show


[Running] ruby "/home/itsacheckmate/Practise/test.rb"
value of first constant 100
valye of second constant 200

#Operators in Ruby
1.Addition+
a=19
b=4
puts a+b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
23

2.Subtraction - Subtracts right hand operand from left hand operand.
a=20
b=5
puts a-b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
15

3.Multiplication *
a=20
b=5
puts a*b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
100

4.Divsion /
a=20
b=5
puts a/b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
4

5.Modulus %
a=23
b=6
puts a/b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
3

6.Exponent **
a=3
b=2
puts a**b

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
9

#Comparison Operators
1.==
a=3
b=2
puts a==b

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
false

2.!=
a=3
b=2
puts a!=b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
true

3.>
a=3
b=2
puts a>b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
true

4.<
a=3
b=2
puts a<b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
false

5.<=
a=3
b=5
puts a<=b

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
true

6.>=
a=3
b=5
puts a>=b

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
false

7.<=>
a=5
b=5
puts a<=>b
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
0

8.eql? - checks both value and data type
a=5
b=5.0
puts a.eql?(b)

#Assignment Operators
1.=Assigns value from right side operand to left side operand
a=10
b=20
c=a+b
puts c

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
30

2.+= Add AND assignment operator, 
a=10
c=1
c+=a
puts c
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
11

[Done] exited with code=0 in 0.043 seconds

3.-=Subtract AND assignment operator,
a=10
c=1
c-=a
puts c
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
-9

4.*=Multiply AND assignment operator
a=10
c=2
c*=a
puts c
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
20

5./= Divide AND assignment operator
a=10
c=20
c/=a
puts c
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
2

6.%= Modulus AND assignment operator
a=6
c=20
c%=a
puts c

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
2

7.*= Exponent AND assignment operator
a=3
c=2
c**=a
puts c
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
8

#Ruby Logical Operators

1.and operator- if both the operands are true, then the condition becomes true.
a=true
b=true

puts (a and b)

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
true

2.or operator - . If any of the two operands are true, then the condition becomes true.
a=true
b=false

puts (a or b)
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
true

3.Called Logical NOT Operator. Use to reverses the logical state of its operand. 
a=false
b=true

puts !(a && b)


#Ruby Ternary Operator
?:  Conditonal expression
If Condition is true ? Then value X : Otherwise value Y
score=50
result=score>40?'Pass':'Fail'
puts result
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Pass


Ruby Range Operator
It is used to create a range of successive values - 
consisting of a start value, an end value, and a 
range of values in between.

The two-dot form creates an inclusive range, 
while the three-dot form creates a range that 
excludes the specified high value.
so 1..10 is 1,2,3,4,5,6,7,8,9,10
and 1...10 is 1,2,3,4,5,6,7,8,9

$, =", "
range_op=(7 ..10).to_a
puts "#{range_op}"

range_op1=(7 ... 10).to_a
puts "#{range_op1}"
Running] ruby "/home/itsacheckmate/Practise/test.rb"
[7, 8, 9, 10]
[7, 8, 9]


#Ruby if,else-if etc 
if(condition)  
    # code if the condition is true 
else  
 # code if the condition is false  
end  

3.0.0 :051 > a=15
 => 15 
3.0.0 :052 > if a>=18
3.0.0 :053 >   puts "you are eligible to vote"
3.0.0 :054 > else
3.0.0 :055 >   puts "not eligible to vote"
3.0.0 :056 > end
not eligible to vote
 => nil 



=>if...else Statement
Syntax

if conditional [then]
   code...
[elsif conditional [then]
   code...]...
[else
   code...]
end

1.x=1
if x>2
    puts "x is greater than 2"
elsif x<=2 and x!=0
    puts "x is 1"
else
    puts "cant guess the number"
end

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
x is 1

2.a=88
if a<50
    puts "student is fail"
elsif a>=50 && a<=60
    puts "Student gets D grade"
    elsif a>=60 && a<=70
        puts "student gets c grade"
        elsif a>=70 && a<=80
            puts "student gets b grade"
        elsif a>=80 && a<=90
        puts "student gets a grade"
        elsif a>=90 && a<=100
            puts "student gets a+ grade"
end

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
student gets a grade


=>Ruby unless Statement
Syntax
unless conditional [then]
   code
[else
   code ]
end

3.0.0 :045 > x=1
 => 1 
3.0.0 :046 > unless x>=2
3.0.0 :047 >   puts "x is less than 2"
3.0.0 :048 > else
3.0.0 :049 >   puts "x is greater than 2"
3.0.0 :050 > end
x is less than 2
 => nil


=>Ruby case Statement
Syntax

case expression
[when expression [, expression ...] [then]
   code ]...
[else
   code ]
end

$age =13
case $age
when 0 .. 2
    puts "baby"
when 3 .. 6
    puts "little child"
when 7 .. 12
    puts "child"
when 13 .. 18
    puts "youth"
else
    puts "adult"
end

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
youth

#Ruby while Statement
Syntax

while conditional [do]
   code
end

$i=0
$num =10

while $i<$num do
    puts("Inside the loop i=#$i")
    $i += 1
end
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Inside the loop i=0
Inside the loop i=1
Inside the loop i=2
Inside the loop i=3
Inside the loop i=4
Inside the loop i=5
Inside the loop i=6
Inside the loop i=7
Inside the loop i=8
Inside the loop i=9

=>Ruby until Statement

until conditional [do]
   code
end

$i =0 
$num = 5
until $i > $num do
    puts("Inside the loop i = #$i")
    $i += 1;
end

*Ruby until modifier
Syntax

code until conditional

OR

begin
   code
end until conditional

$i = 0
$num = 5
begin
    
puts("Inside the loop i = #$i")
$i += 1
end until $i > $num

[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
Inside the loop i = 5

=>Ruby for Statement
Syntax

for variable [, variable ...] in expression [do]
   code
end

for i in 0 .. 5
    puts "Value of local var is #{i}"
end
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
Value of local var is 0
Value of local var is 1
Value of local var is 2
Value of local var is 3
Value of local var is 4
Value of local var is 5


arr = ["mumbai","chandigarh","faridabad"]
for i in arr do
    puts i
end
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
mumbai
chandigarh
faridabad

=>Ruby break Statement
Syntax

break

for i in 0 .. 5
    if i>2 then
        break
    end
    puts "value is #{i}"
end
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
value is 0
value is 1
value is 2

=>Ruby next Statement
Syntax

next

for i in 0 ..5
    if i<2 then 
        next
    end
    puts "value of i is #{i}"
end
[Running] ruby "/home/itsacheckmate/Practise/test.rb"
value of i is 2
value of i is 3
value of i is 4
value of i is 5

=>Ruby redo Statement
Syntax

redo

for i in 0..5
    if i < 2 then
        puts "value of local #{i}"
        redo
    end
end
[Done] exited with code=0 in 0.039 seconds

value of local 0
value of local 0
value of local 0
value of local 0
-------------
infinite loop


=>Ruby redo Statement
Syntax

redo

for i in 0 .. 5
    if i<2 then
        puts "value of local is #{i}"
        redo
    end
end

value of local 0
value of local 0
value of local 0
value of local 0
-------------
infinite loop
